// v_2.45.2, Mon Mar 30 17:41:49 2020
#line 1 "..\\..\\SRC\\HMI\\HMI_VTime.cpp"
struct __T50324712;
#line 37 "..\\..\\SRC\\GENERAL\\enum.h"
enum e_SYMBOL {
LOGO_LEGENDAIR,
KEY_WHITE,
BAT,
BLACK_SQUARES,
FREE_SQUARE,
KEY,
LOS,
BLACK_LOS,
LESS_OR_MORE,
RAMPE1,
RAMPE2,
RISETIME1,
RISETIME2,
RISETIME3,
RISETIME4,
TRIGGER,
TRIGGERINV,
VENTIL,
LOCKS,
PAUSE,
VALVE_BLACK,
VALVE_WHITE,
CADRE_WHITE_BG,
CADRE_WHITE_HD,
CADRE_BLACK_BG,
CADRE_BLACK_HD,
TRIANGLE_BLACK,
TRIANGLE_WHITE,
FLECHE_GRAPH_HAUT,
FLECHE_GRAPH_DROITE,
CADRE_WHITE_HG,
CADRE_WHITE_BD,
CADRE_BLACK_HG,
CADRE_BLACK_BD,
BAT_INV,
CADRE_BLACK_BGw,
CADRE_BLACK_BDw,
CADRE_BLACK_HGw,
CADRE_BLACK_HDw,
CADRE_WHITE_HGw,
CADRE_WHITE_HDw,
CADRE_WHITE_BDw,
CADRE_WHITE_BGw,
BELL_BLACK,
ALARM_TRIANGLE_BLACK,
EQUAL,
HEART,
CADRE_WHITE_ALARM_HGw,
CADRE_WHITE_ALARM_HDw,
CADRE_WHITE_ALARM_BDw,
CADRE_WHITE_ALARM_BGw,
HEART_INVERSE_VIDEO,
ALARM_TRIANGLE_BLACK_DOT,
RAMPE3,
LOGO_M2,
LOGO_XL2,
LOGO_S2,
LOGO_XL2_US,


CHART_VERSION,
TRADEMARK,
COMPANY,
WHITE_SQUARE,
WHITE_LOCK,
NO};
#line 112
enum e_HMI_LANG {
HMI_LANG_CHINESE,
HMI_LANG_DANISH,
HMI_LANG_GERMAN,
HMI_LANG_ENGLISH,
HMI_LANG_ENGLISH_US,
HMI_LANG_SPANISH,
HMI_LANG_FRENCH,
HMI_LANG_GREEK,
HMI_LANG_ITALIAN,
HMI_LANG_JAPANESE,
HMI_LANG_KOREAN,
HMI_LANG_DUTCH,
HMI_LANG_NORWISH,
HMI_LANG_POLISH,
HMI_LANG_PORTUGUESE,
HMI_LANG_RUSSIAN,
HMI_LANG_FINNISH,
HMI_LANG_SWEDISH,
HMI_LANG_TURKISH};
#line 137
enum e_TI {
TIMIN,
TIMAX,
end_of_e_TI};



enum e_ActiveModeState {
ACTIVATED,

EXHALATION,
INSPIRATION,

PSV_EXHALATION,
PSV_INSPIRATION,
CC_EXHALATION,
CC_INSPIRATION,

SIMV_VSIMV_EXHALATION,
SIMV_CAV_INSPIRATION,
SIMV_PSV_INSPIRATION,
SIMV_CV_EXHALATION,
SIMV_CV_INSPIRATION,
SIMV_VSIMV_EXHALATION_APNEA,
SIMV_CV_INSPIRATION_APNEA,

SIMV_PSIMV_EXHALATION,
SIMV_CAP_INSPIRATION,
SIMV_CP_EXHALATION,
SIMV_CP_INSPIRATION,
SIMV_PSIMV_EXHALATION_APNEA,
SIMV_CP_INSPIRATION_APNEA,

CPAP_EXHALATION,
CPAP_INSPIRATION};




enum e_DB_ALARM_LEVEL_PRIORITY {



TEC,



WP,



VLP,



LP,



MPR,



HP,



VHP,



UA,



IA};




enum e_ALARM_ERROR {
NO_ERR_AL,
ERR_AL_DISCONNECTION,
ERR_AL_HIGH_PRESSURE,
ERR_AL_APNEA,
ERR_AL_HIGH_VTI,
ERR_AL_LOW_VTI,
ERR_AL_LOW_VTE,
ERR_AL_HIGH_VTE,
ERR_AL_HIGH_VM,
ERR_AL_LOW_VM,
ERR_AL_LOW_RATE,
ERR_AL_HIGH_RATE,
ERR_AL_POWER_SUPPLY_LOSS,
ERR_AL_AC_POWER_FAIL,
ERR_AL_DC_POWER_FAIL,
ERR_AL_CHECK_SUPPLY,
ERR_AL_PERIODICAL_SIGNAL,
ERR_AL_LOW_BATTERY,
ERR_AL_END_OF_BATTERY,
ERR_AL_CHECK_BATTERY,
ERR_AL_NO_BATTERY,
ERR_AL_CHECK_BUZZER,
ERR_AL_BUZZER_BATTERY_LOW,
ERR_AL_BUZZER_BATTERY_FAILURE,
ERR_AL_BUZZER_BATTERY_CHARGE_FAILURE,
ERR_AL_TECHNICAL_PROBLEM,
ERR_AL_EEPROM_OUT_OF_RANGE,
ERR_AL_EEPROM_LOOSING_PARAM,
ERR_AL_NEW_VERSION,
ERR_AL_ERROR_VERSION,
ERR_AL_REVERSED_IE,
ERR_AL_CHECK_PRESSURE,
ERR_AL_CHECK_PROXIMAL,
ERR_AL_PROXI_DISCONNECTION,
ERR_AL_NO_PROXIMAL,
ERR_AL_NO_VALVE_DETECTION,
ERR_AL_CHECK_VALVE,
ERR_AL_CHECK_VOLUME,
ERR_AL_VALVE_LEAKAGE,
ERR_AL_CHECK_REMOTE_ALARM,
ERR_AL_UNKNOW_BATTERY,
ERR_AL_CHECK_BATTERY_CHARGE,
ERR_AL_COOLING_FAN,
ERR_AL_AMBIENT_TEMP,
ERR_AL_BAT_TEMP,
ERR_AL_FAILURE_24V,
ERR_AL_SUPPLY_MEASURE,
ERR_AL_TURBINE_OVERHEAT,
ERR_AL_OCCLUSION,
ERR_AL_CPU_REFERENCE,
ERR_AL_CONTROLLED_CYCLES,
ERR_AL_CHECK_VALVE_PRESSURE,
ERR_AL_CHECK_PIPE,
ERR_AL_LEAKAGE,
ERR_AL_CHECK_FIO2,
ERR_AL_LOW_FIO2,
ERR_AL_HIGH_FIO2,
ERR_AL_NO_FIO2_SENSOR,
ERR_AL_CHECK_O2_SUPPLY,
ERR_AL_MISSING_O2_SUPPLY,
ERR_AL_CHECK_O2,
ERR_AL_O2_LEAKAGE,
ERR_AL_BREATH_TIME_CYCLED,
ERR_AL_INSP_FLOW_FAILURE,
ERR_AL_LEAK_OCCLUSION,
ERR_AL_VOLUNTARY_STOP,
ERR_AL_NEEDED_FIO2_CALIB,
end_of_error_alarm_table};




enum e_DB_ALARMS_STATE {
ALARM_FALSE,
ALARM_DETECTED,
ALARM_TRUE,
ALARM_DISPLAYED,
ALARM_CANCELED,
end_of_alarms_state_table};




enum e_DB_ALARMS_INDICATION_STATE {
ALARM_FALSE_STATE,
ALARM_DETECTED_STATE,
ALARM_INHIBITED_STATE,
end_of_alarms_indication_state_table};
#line 311
enum e_DB_VERSION {
VERSION_NUMBER_0,
VERSION_NUMBER_1,
VERSION_NUMBER_2,
VERSION_NUMBER_3,
SERIAL_NUMBER_1,
SERIAL_NUMBER_2,
SERIAL_NUMBER_3,
SERIAL_NUMBER_4,
SERIAL_NUMBER_5,
SERIAL_NUMBER_6,
end_of_db_version_table};




enum e_DB_Trend {
DB_TREND_VENTIL_HOUR,
DB_TREND_VENTIL_MIN,
DB_TREND_AVG_VTI,
DB_TREND_AVG_VTE,
DB_TREND_AVG_VM,
DB_TREND_AVG_FR,
DB_TREND_LEAK_MODE,
DB_TREND_AVG_LEAK,
DB_TREND_AVG_PI,
DB_TREND_IA,
DB_TREND_APNEA,
DB_TREND_PERCENT_CONTROLLED,
DB_TREND_PERCENT_TRIGGERED,
DB_TREND_SAVE_RTC_DAY,
DB_TREND_SAVE_RTC_MONTH,
DB_TREND_SAVE_RTC_YEAR,
DB_TREND_SAVE_PC_HOUR,
DB_TREND_SAVE_PC_MIN,
DB_TREND_NB_APNEA,
DB_TREND_APNEA_TIME,
DB_TREND_NB_CYCLE_COUNTER_MSB,
DB_TREND_NB_CYCLE_COUNTER_LSB,
DB_TREND_NB_CYCLE_TRIGERRED_MSB,
DB_TREND_NB_CYCLE_TRIGERRED_LSB,
DB_TREND_NB_CYCLE_CONTROLLED_MSB,
DB_TREND_NB_CYCLE_CONTROLLED_LSB,
DB_TREND_VENTIL_REPORT_UPD,
DB_TREND_IHM_VENTIL_HOUR,
DB_TREND_IHM_VENTIL_MIN,
DB_TREND_IHM_AVG_VTI,
DB_TREND_IHM_AVG_VTE,
DB_TREND_IHM_AVG_VM,
DB_TREND_IHM_AVG_FR,
DB_TREND_IHM_LEAK_MODE,
DB_TREND_IHM_AVG_LEAK,
DB_TREND_IHM_AVG_PI,
DB_TREND_IHM_IA,
DB_TREND_IHM_APNEA,
DB_TREND_IHM_PERCENT_CONTROLLED,
DB_TREND_IHM_PERCENT_TRIGGERED,
DB_TREND_IHM_SAVE_RTC_DAY,
DB_TREND_IHM_SAVE_RTC_MONTH,
DB_TREND_IHM_SAVE_RTC_YEAR,
end_of_db_trend_table};




enum e_TYPE_OF_DB_TARGET {
ADJUST,
CONTROL,
COMPUTE,
VERSION,
CONFIG,
RTC,
ALARMS,
POWER_SUPPLY,
KEYBOARD,
USB,
TREND,
CURRENT,
REVISION,
end_of_type_of_db_target};




enum e_DATA_OPERATION {
READ,
WRITE,
DECREASE,
INCREASE,
MIN,
MAX,
STEP,
READ_INFO,
WRITE_INFO};




enum e_MODE_TYPES {
VOL,
PRES,
PSVT,
VSIMV,
PSIMV,
CPAP,
nb_of_mode};



enum e_TRIGGER_LEVELS {
TRIGGER_LEVEL_OFF,
TRIGGER_LEVEL_0P,
TRIGGER_LEVEL_1P,
TRIGGER_LEVEL_2,
TRIGGER_LEVEL_3,
TRIGGER_LEVEL_4,
TRIGGER_LEVEL_5,
nb_of_trigger_levels};



enum e_TEST_STATES {
TEST_STATE_NOT_RUN,
TEST_STATE_RUNNING,
TEST_STATE_ABORTED,
TEST_STATE_PASS,
TEST_STATE_FAIL,
nb_of_test_states};




enum e_VEN_SIMVCycle {
CAV_Cycle,
CV_Cycle,
PSV_Cycle,
CAP_Cycle,
CP_Cycle};




enum e_SupplyInfo {
NONE,
AC,
DC,
BATTERY};




enum e_RTC_OPERATION {
NO_REQUEST,
ADJUST_DATE,
ADJUST_HOUR};




enum e_BadEraseState {
ERASE_OK,
BAD_TOTAL_ERASE};




enum e_RampType {
RAMP_DECELERATED,
RAMP_RECTANGLE,
RAMP_SINUS,
nb_of_ramps};
#line 487
enum e_VEN_ControllerType {
NO_CONTROL,
CONTROL_SPEED,
CONTROL_PRESSURE,
CONTROL_PRESSURE_VALVE,
CONTROL_PRESSURE_MAINT,
CONTROL_FLOW,
CONTROL_FLOW_EXH,
CONTROL_FLOW_O2,
CONTROL_FLOW_O2_MANUEL,
CONTROL_PRESSURE_O2};



enum e_VEN_Controller_Phase {
VEN_EXH_PLAT,
VEN_INSP_RISE,
VEN_INSP_PLAT,
VEN_EXH_FALL};




enum e_CalibrationCommand {
NO_CALIB,
SEGMENT_1,
SEGMENT_2,
SEGMENT_3,
SEGMENT_4,
SEGMENT_5,
SEGMENT_6,
SEGMENT_7,
SEGMENT_8,
TEST_LIMITES_REQUEST,
TEST_LIMITES_OK,
TEST_LIMITES_FALSE,
AUTOCALIB_SEG_1,
AUTOCALIB_SEG_2,
AUTOCALIB_SEG_3,
AUTOCALIB_SEG_4,
AUTOCALIB_SEG_5,
AUTOCALIB_SEG_6,
AUTOCALIB_SEG_7,
AUTOCALIB_SEG_8,
END_AUTOCALIB};




enum e_CalibrationType {
SYS_PATIENT_PRESS_CALIB,
SYS_VALVE_PRESS_CALIB,
SYS_INSP_FLOW_CALIB,
SYS_EXH_FLOW_CALIB,
SYS_EXH_FLOW_VERIF,
SYS_FIO2_CALIB,
SYS_O2_FLOW_CALIB,
SYS_O2_PRESSURE_CALIB,
end_of_sys_calib};
#line 552
enum e_VentilState {
VEN_EXHALATION = 251,
VEN_INSPIRATION_CONTROLED,
VEN_INSPIRATION_TRIGGERED,
VEN_VENTIL_DISABLE};



enum e_InspDetectType {
CONTROLLED,
TRIGGERED,
NO_INSP};




enum e_SYS_KeyboardInput {
KEY_NO_KEYBOARD,
KEY_CODE_MONIT_AND_DOWN,
KEY_CODE_MONIT_AND_UP,
KEY_CODE_UP_AND_DOWN,
Mark_Begin_Simple_Touch,
KEY_CODE_UP,
KEY_CODE_DOWN,
KEY_CODE_VALID,
KEY_CODE_MONIT,
KEY_CODE_STARTSTOPVENTIL,
KEY_CODE_100_O2,
KEY_CODE_NAVIG,
Number_of_key};
#line 587
enum e_TIM_TABLE_ID {
KEY_LONGPUSH_KEY_NO_KEYBOARD,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_UP,
KEY_LONGPUSH_KEY_CODE_UP_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_UP,
KEY_LONGPUSH_KEY_CODE_DOWN,
KEY_LONGPUSH_KEY_CODE_VALID,
KEY_LONGPUSH_KEY_CODE_MONIT,
KEY_LONGPUSH_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_longpush_decnt,
KEY_AUTOREPEAT_KEY_NO_KEYBOARD,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_UP,
KEY_AUTOREPEAT_KEY_CODE_UP_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_UP,
KEY_AUTOREPEAT_KEY_CODE_DOWN,
KEY_AUTOREPEAT_KEY_CODE_VALID,
KEY_AUTOREPEAT_KEY_CODE_MONIT,
KEY_AUTOREPEAT_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_autorepeat_decnt,
KEY_ANO_KEYB,
KEY_DELAY_BETWEEN_LONG_AUTOREPEAT,
KEY_DOUBLE_PULSE_TIME_OUT,
KEY_CONFIRM_VENT_STOP_TIMER,
VEN_TI_COUNT,
VEN_TE_COUNT,
VEN_SIMV_PERIOD_COUNT,
VEN_CONTROLLED_CYCLE_PERIOD_COUNT,
VEN_TIME_CALIB_FIO2,
VEN_VALVE_TIM,
VEN_VENTILATION_BIP,
VEN_END_COUNT0,
VEN_END_COUNT1,
VEN_END_COUNT2,
VEN_END_COUNT3,
VEN_END_COUNT4,
VEN_END_COUNT5,
SYS_TIME_OUT_SPEED,
SYS_1MINPAT,
SYS_TIME_OUT_CALIB,
SYS_TIME_AUTO_CALIB,
SYS_TIME_FAS_VALVE_CALIB,
SYS_TIME_SUPPLY_CHANGE,
SYS_TIME_DETECT_FIO2,
SYS_TIME_BACKLIGHT,
SYS_PRESSURE_CHOICE,
SYS_PRESSURE_CHOICE_INT,
SYS_PROXIMAL_TO_INTERNAL_SWITCH,
SYS_CHECK_PRESSURE,
SYS_CHECK_PROXIMAL,
SYS_VALVE_TIM,
SEC_PRESSURE_CHOICE,
SEC_LOW_PRESS,
SEC_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_DETECT,
SEC_CPAP_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_ALARM,
SEC_FLAG_HIGH_PRESSURE,
SEC_APNEA,
SEC_CHECK_PRESSURE,
SEC_CHECK_PROXIMAL,
SEC_NO_BATTERY_TIM,
SEC_CHECK_FIO2_TIM,
SEC_KEYBOARD_TIM,
SEC_SPEED_BLOW_TIM,
SEC_START_BIP_SOUND,
SEC_STOP_BIP_SOUND,
SEC_LOW_FIO2_TIM,
SEC_CPU_REFERENCE_FAILURE_TIM,
SEC_FLOW,
SEC_TIME_WAIT_STARTING,
SEC_HIGH_FIO2_TIM,
SEC_BAT_LOW_LEVEL,
SEC_HIGH_SPO2_TIM,
SEC_LOW_SPO2_TIM,
SEC_BAT_VERY_LOW_LEVEL,
SEC_BUZ_READ,
SEC_BATTERY_FAILURE_CO_BUZ,
SEC_DETECTION_BATTERY_FAILURE_CO_BUZ,
SEC_FAIL_AC_TIM,
SEC_FAIL_DC_TIM,
SEC_VALVE_CST,
SEC_PROXI_CST,
SEC_INT_CST,
SEC_CHECK_VALVE,
SEC_VALVE_PRESS,
SEC_INHIB_CHECK_FIO2,
SEC_INHIB_LOW_FIO2,
SEC_INHIB_HIGH_FIO2,
SEC_INHIB_CHECK_REMOTE,
SEC_CANCEL_HIGH_PRESSURE,
SEC_CHECK_SUPPLY,
SEC_PPC_APNEA,
SEC_PROX_DISC,
SEC_RAZ_CHECK_BAT,
SEC_CHECK_PRESS,
SEC_CHECK_PRESS2,
SEC_CHECK_PROXI,
SEC_CHECK_REMOTE,
SEC_BAT_P_S_TIM,
SEC_INHIB_BUZZER,
SEC_LOW_PRIORITY_BURST,
SEC_MEDIUM_PRIORITY_BURST,
SEC_HIGH_PRIORITY_BURST,
SEC_BUZZER_PULSE,
SEC_BUZZER_SILENCE,
SEC_BUZZER_SOUND_MAX,
SET_VALIDATION_BIP,
SEC_NO_PROXIMAL,
SET_HISTO_BIP,
SEC_BLOWER_OVERHEAT,
ACT_MIN_FLOW,
ACT_STOP_ADAPTATION,
WAIT_USB_BUSY,
USB_CONNECT_DISCONNECT_KEY,
USB_WAIT_READ_FIFO,
SPI_FRAME_TIME,
SPI_WAIT_DISPLAY_BATTERY_GAUGE,
TIM_COM_RECORDING_MONIT,
TIM_USB_RECORDING_MONIT,
SEC_CHECK_VALVE_PRESSURE,
SEC_LEAKAGE,
SEC_CHECK_O2_SUPPLY,
SEC_O2_LEAKAGE,
SEC_100_FIO2_TIM,
INT_MEASURE_BUZZER,
SEC_CANCEL_BATTERY_FAILURE_CO_BUZ,
ACT_BOOST_FREQ,
SEC_LEAK_OCCLUSION,
SEC_CPU_REF_FAILURE,
SEC_APNEA_FLAG,
SEC_OCCLUSION_TIMER,
end_of_table_cnt_decnt};



enum e_TIM_MINUTE_TABLE_ID {
TimerWelcomeEvent,
TimerHideLoupe,
TimerBlinkEvent,
TimeOutModifEvent,
TimerQuitHistoAlarme,
TimerQuitPreferences,
TimerQuitGraphConfig,
TimerRefresh,
TimerStopModifMode,
TimerAutoCalibTest,
TimerRefreshAlarm,
TimerSwapAlarm,
TimerTriggerOk,
TimerSpyPraram,
TimerHideAlarmMessage,
TimerHideStopVentMess,
TimerAddToBlinkEvent,
TimerWaitCalibVerif,
TimerHistoAlarmSeek,
TimerHistoAnoSeek,
TimerWaitCalibQExp,
TimerWaitCalibFiO2,
TimerUsbMessage,
TimerUsbProcessing,
Timer100PrCentO2,
TimerVenRecordingApnea,
TimerUsbRecordingDetailledHorodatage,
TimerUsbCommandTooLong,
TimerQuitVentilReport,
SEC_PERIODICAL_BIP,
TimerEndLongDownKey,
TimerEndLongUpKey,
TimerDoubleAlarm,
SEC_BATTERY_FAILURE_CHARGE_BUZ_READ,
SEC_LOW_BATTERY_BUZ_READ,
SEC_BATTERY_FAILURE_CC_BUZ,
TimerLeakTest,
end_of_minute_ihm_table_decnt,
end_of_minute_table_cnt_decnt};



enum e_TYPE_USE_TIMER {
COUNT,
DECOUNT};




enum e_DRV_RTC_ACCESS_STATE {
FREE_RTC,
READ_RTC,
WRITE_RTC,
ERROR_RTC};




enum e_DRV_RTC_REGISTER {
RTC_SECOND,
RTC_MINUTE,
RTC_HOUR,
RTC_DAY,
RTC_DATE,
RTC_MONTH,
RTC_YEAR,
RTC_SEC_ALARM1,
RTC_MIN_ALARM1,
RTC_HOURS_ALARM1,
RTC_DAY_ALARM1,
RTC_SEC_ALARM2,
RTC_MIN_ALARM2,
RTC_HOURS_ALARM2,
RTC_DAY_ALARM2,
RTC_CONTROL,
RTC_STATUS,
RTC_CHARGER,
RTC_BEGIN_RAM};



enum e_DRV_RTC_ERROR {
DRV_RTC_NO_ERROR,
DRV_RTC_TIME_OUT_TRANSMIT};



enum e_EEP_ACCESS_STATE {
READ_EEP,
WRITE_EEP,
FREE_EEP,
ERROR_EEP};



enum e_DRV_EVENT_STATE {
DRV_EVENT_FREE,
DRV_EVENT_ERASE,
DRV_EVENT_WRITE};
#line 829
enum e_DRV_EEP_WRITE_ERROR {
DRV_EEP_NO_ERROR,
DRV_EEP_TIME_OUT_WRITE,
DRV_EEP_TIME_OUT_TRANSMIT};



enum e_STATE_OF_DRIVE_EEP {
DRV_EEP_WRITE_PENDING,
DRV_EEP_FREE};
#line 844
enum e_DRV_DISPLAY_FUNCTION {
DRV_INIT,
DRV_LOAD_TABLE,
DRV_BRITHNESSAJUST,
DRV_NEGATIVE_CAR,
DRV_DISPLAY_PAGE,
DRV_STRING,
DRV_NUMBER,
DRV_SYMBOL,
DRV_PIXEL,
DRV_LINE,
DRV_BOX,
DRV_ERASE_ZONE,
DRV_ERASE_PAGE,
DRV_BACKLIHGHTADJUST};




enum e_TYPE_SOUND {
NO_SOUND,
BIP_SHORT_SOUND,
BIP_LONG_SOUND,
BIP_VERY_LONG_SOUND,
START_BIP_SOUND,
STOP_BIP_SOUND,
BATTERY_SOUND,
VERY_SLOW_SOUND,
SLOW_SOUND,
FAST_SOUND,
USB_CONNECT,
USB_DISCONNECT,
CONTINU_SOUND};




enum e_TYPE_TEST_BUZ {
NO_BUZ,
BUZ};




enum e_TYPE_BACKLIGHT_LEVEL {
SWITCH_OFF,
WEAK,
SWITCH_ON};




enum e_NUMBER_BUZ {
BUZ_CARD,
BUZ_SEC,
BUZ_ALL,
BUZ_VOLUME};




enum e_TYPE_BLINK {
NO_LED,
BLINK_LED,
CONTINU_LED};




enum e_VALIDATION_BIP {
NO_BIP,
BIP_SHORT,
BIP_LONG,
BIP_VERY_LONG,
BIP_START_VENTIL,
BIP_STOP_VENTIL,
BURST,
BIP_USB_CONNECT,
BIP_USB_DISCONNECT,
BIP_SHORT_VALID,
BIP_BATTERY_PERIODICAL};




enum e_VALIDATION_BIP_TYPE {
NO_CLOC_BIP,
CLOC,
BIP,
BIP_AND_CLOC};



enum e_SPI_ACCESS {
SPI_EEPROM,
SPI_RTC,
SPI_POWER};



enum e_SIMV {
PIM,
VIM,
PSV,
end_of_e_SIMV};




enum e_SIMV_PS_End {
PS_FLOW_END,
PS_HIGH_PRESS_END,
PS_TIMED_END,
end_of_e_SIMV_PS_End};




enum e_Month {
Month_start,
JANUARY,
FEBRUARY,
MARSH,
APRIL,
MAY,
JUNE,
JULY,
AUGUST,
SEPTEMBER,
OCTOBER,
NOVEMBER,
DECEMBER};



enum e_DataBaseType {
DB_RTC,
DB_CURRENT,
DB_CONFIG,
DB_CONTROL,
DB_COMPUTE,
DB_POWERSUPPLY,
DB_NULL};
#line 992
enum e_OUTPUT_NAME {
OUT_LED_VENTIL,
OUT_LED_O2,
FREE_1Q3,
CE_EEP,
CE_RTC1,
CE_RTC2,
CE_INT_PRES_SENS,
CE_PROX_PRES_SENS,
CE_VALVE_PRES_SENS,
CE_SPI_USB,
CE_SPI_PIC,
CE_FLOW_INSP_SENS,
CE_FLOW_EXP_SENS,
CE_SPI_PIC_IC44,
FREE_2Q7,
FREE_2Q8};
#line 1019
enum e_SPI_POWER_TRANSMIT {
SPI_POWER_TRANSMIT_START_FRAME_MSB,
SPI_POWER_TRANSMIT_START_FRAME_LSB,
SPI_POWER_TRANSMIT_VENTIL_AUTHORIZATION,
SPI_POWER_TRANSMIT_MAINTENANCE_MODE,
SPI_POWER_TRANSMIT_CALIBRATION_MODE,
SPI_POWER_TRANSMIT_CRC,
SPI_POWER_TRANSMIT_END_FRAME,
SPI_POWER_TRANSMIT_EndOfFrame};
#line 1033
enum e_SPI_POWER_RECEIVE {
SPI_POWER_RECEIVE_MSB_START_FRAME,
SPI_POWER_RECEIVE_LSB_START_FRAME,
SPI_POWER_RECEIVE_MSB_V_BAT_U16,
SPI_POWER_RECEIVE_LSB_V_BAT_U16,
SPI_POWER_RECEIVE_MSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_LSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_MSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_STATE_U16,
SPI_POWER_RECEIVE_LSB_POWER_TYPE_U16,
SPI_POWER_RECEIVE_MSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_AVALAIBLE_U16,
SPI_POWER_RECEIVE_LSB_PER_CENT_BAT_U16,
SPI_POWER_RECEIVE_LSB_NO_PRESENCE_BAT_U16,
SPI_POWER_RECEIVE_LSB_BAT_KO_U16,
SPI_POWER_RECEIVE_LSB_CHARGE_KO_U16,
SPI_POWER_RECEIVE_LSB_UNKNOWN_BATTERY_U16,
SPI_POWER_RECEIVE_MSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_BATTERY_END_U16,
SPI_POWER_RECEIVE_LSB_BATTERY_LOW_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_DAY_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_MONTH_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_YEAR_U16,
SPI_POWER_RECEIVE_LSB_BAT_TEMP_OVERFLOW,
SPI_POWER_RECEIVE_LSB_SUPPLY_MEASURE_FAILURE,
SPI_POWER_RECEIVE_LSB_FAILURE_24V_FLAG,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_OUTOFBOUNDS,
SPI_POWER_RECEIVE_LSB_COOLING_FAN_FAILURE_FLAG,
SPI_POWER_RECEIVE_LSB_FIRST_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_SECOND_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_THIRD_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_HOUR_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_SECOND_U16,
SPI_POWER_RECEIVE_LSB_BAT_AGEING_U16,
SPI_POWER_RECEIVE_LSB_BAT_SUPPLIER_U16,
SPI_POWER_RECEIVE_LSB_BAT_TYPICAL_CAPACITY_U16,
SPI_POWER_RECEIVE_CRC,
SPI_POWER_RECEIVE_END_FRAME,
SPI_POWER_RECEIVE_EndOfTable,
SPI_POWER_RECEIVE_BufferSize = 70};
#line 1082
enum e_DRV_SPI_POWER_ERROR {
DRV_SPI_POWER_NO_ERROR,
DRV_SPI_POWER_TIME_OUT_TRANSMIT,
DRV_SPI_POWER_NO_FRAME,
DRV_SPI_POWER_BAD_FRAME};
#line 1093
enum e_MODE_COM {
COM_VOL_A,
COM_PSVT,
COM_PRES_A,
COM_VSIMV,
COM_CPAP,
COM_VOL_C,
COM_PSV,
COM_PRES_C,
COM_VOL_US,
COM_PRES_US,
COM_PSV_US,
COM_VSIMV_US,
COM_PSIMV_US,
COM_CPAP_US,
COM_PSIMV,
End_of_Table_Mode_COM};




enum e_Monit_Buffer_Data_Type {
MONITORAGE,
HORODATAGE};
#line 1122
enum e_FrameUART1 {
DATA_FRAME0,
DATA_FRAME1,
DATA_FRAME2,
SIZE_FRAME_UART1};



enum e_Flash_Read_Status {
REQUEST,
RUNNING,
ENDED};



enum e_Cycling_Mode {
I_T,
I_E};




enum e_Alarm_Tone {
ORIGINAL,
COMPLIANT};
#line 1155
enum e_DIRECT_MONITORING {
MONIT_MSB_PRESSURE,
MONIT_LSB_PRESSURE,
MONIT_MSB_CORRECTED_FLOW_INSP,
MONIT_LSB_CORRECTED_FLOW_INSP,
MONIT_MSB_CORRECTED_FLOW_EXHAL,
MONIT_LSB_CORRECTED_FLOW_EXHAL,
MONIT_CORRECTED_VT_LEAK,
MONIT_SPO2,
MONIT_HR,
MONIT_ALARM_1,
MONIT_ALARM_2,
MONIT_ALARM_3,
MONIT_ALARM_4,
MONIT_ALARM_5,
MONIT_ALARM_6,
MONIT_ALARM_7,
MONIT_ALARM_8,
MONIT_ALARM_9,
MONIT_SYMBOL,
MONIT_VENTIL_MODE,
End_Of_Table_Direct_Monitoring};
#line 1185
enum e_DETAILLED_MONITORING {
DETAILLED_DATA_TYPE,

DETAILLED_DAY,
DETAILLED_VENTIL_STATE = 1,

DETAILLED_MONTH,
DETAILLED_PATIENT_PRESSURE_MSB = 2,

DETAILLED_YEAR,
DETAILLED_PATIENT_PRESSURE_LSB = 3,

DETAILLED_HOUR,
DETAILLED_INSP_FLOW_MSB = 4,

DETAILLED_MINUTE,
DETAILLED_INSP_FLOW_LSB = 5,

DETAILLED_SECOND,
DETAILLED_EXH_FLOW_MSB = 6,

DETAILLED_RESERVED1,
DETAILLED_EXH_FLOW_LSB = 7,

DETAILLED_RESERVED2,
DETAILLED_LEAK = 8,

End_Of_Table_Detailled_Monitoring};
#line 1222
enum e_TREND {
TREND_DAY,
TREND_MONTH,
TREND_YEAR,
TREND_HOUR,
TREND_MINUTE,
TREND_SECOND,
TREND_VENTIL_MODE,
TREND_VENTIL_TYPE,
TREND_MSB_P_MAX,
TREND_LSB_P_MAX,
TREND_MSB_AV_PEP,
TREND_LSB_AV_PEP,
TREND_MSB_LEAKAGE,
TREND_LSB_LEAKAGE,
TREND_MSB_AV_VOLUME,
TREND_LSB_AV_VOLUME,
TREND_IE_RATIO_NUMERATOR,
TREND_IE_RATIO_DENOMINATOR,
TREND_FREQUENCY,
TREND_MSB_INSPIRATED_VOLUME,
TREND_LSB_INSPIRATED_VOLUME,
TREND_MSB_EXHALED_VOLUME,
TREND_LSB_EXHALED_VOLUME,
TREND_HEART_RATE,
TREND_SPO2,
End_Of_Table_Trends};
#line 1257
enum e_EVENT_PARAMETERS {

EVENT_NB_ID,
EVENT_DAY_ID,
EVENT_MON_ID,
EVENT_YEA_ID,
EVENT_HOU_ID,
EVENT_MIN_ID,
EVENT_SCD_ID,
EVENT_CPTMACHHOURMSB_ID,
EVENT_CPTMACHHOURLSB_ID,
EVENT_MODE_ID,
EVENT_TYPE_ID,
EVENT_TRIGECONV_ID,
EVENT_PUNITCONV_ID,
EVENT_CYCL_ID,
EVENT_24VMSB_ID,
EVENT_24VLSB_ID,
EVENT_5VMSB_ID,
EVENT_5VLSB_ID,
EVENT_WTDMSB_ID,
EVENT_WTDLSB_ID,
EVENT_TINTMSB_ID,
EVENT_TINTLSB_ID,
EVENT_VBATMSB_ID,
EVENT_VBATLSB_ID,
EVENT_TBATMSB_ID,
EVENT_TBATLSB_ID,
EVENT_QBATMSB_ID,
EVENT_QBATLSB_ID,
EVENT_MBATMSB_ID,
EVENT_MBATLSB_ID,
EVENT_FIO2_ID,
EVENT_SPO2_ID,
EVENT_FREQCAR_ID,
EVENT_PMAXMSB_ID,
EVENT_PMAXLSB_ID,
EVENT_PEPMSB_ID,
EVENT_PEPLSB_ID,
EVENT_RAPIT_ID,
EVENT_RAPIEMSB_ID,
EVENT_RAPIELSB_ID,
EVENT_FREQ_ID,
EVENT_VTIMSB_ID,
EVENT_VTILSB_ID,
EVENT_VTEMSB_ID,
EVENT_VTELSB_ID,
EVENT_VMMSB_ID,
EVENT_VMLSB_ID,
EVENT_LEAK_ID,
EVENT_TIMSB_ID,
EVENT_TILSB_ID,
EVENT_TEMSB_ID,
EVENT_TELSB_ID,
EVENT_SUPPLY_TYPE,
EVENT_BATLEVEL_ID,
EVENT_SETRELATIVE_PRESSURE_ID,
EVENT_SETBAROMETRIC_COMP_ID,
EVENT_SETSOUND_LEVEL_ID,
EVENT_SETPEDIATRIC_CIRCUIT_ID,
EVENT_SETDISCONNECTION_DELAY_ID,
EVENT_SETAPNEA_ALARM_ID,
EVENT_SETSPO2MIN_ID,
EVENT_SETSPO2MAX_ID,
EVENT_SETFIO2_ID,
EVENT_SETFIO2MIN_ID,
EVENT_SETFIO2MAX_ID,


EVENT_SPECPAR_1_ID,
EVENT_SPECPAR_2_ID,
EVENT_SPECPAR_3_ID,
EVENT_SPECPAR_4_ID,
EVENT_SPECPAR_5_ID,
EVENT_SPECPAR_6_ID,
EVENT_SPECPAR_7_ID,
EVENT_SPECPAR_8_ID,
EVENT_SPECPAR_9_ID,
EVENT_SPECPAR_10_ID,
EVENT_SPECPAR_11_ID,
EVENT_SPECPAR_12_ID,
EVENT_SPECPAR_13_ID,
EVENT_SPECPAR_14_ID,
EVENT_SPECPAR_15_ID,
EVENT_SPECPAR_16_ID,
EVENT_SPECPAR_17_ID,
EVENT_SPECPAR_18_ID,
EVENT_SPECPAR_19_ID,
EVENT_SPECPAR_20_ID,
EVENT_SPECPAR_21_ID,
EVENT_SPECPAR_22_ID,
EVENT_SPECPAR_23_ID,
EVENT_SPECPAR_24_ID,
EVENT_SPECPAR_25_ID,
EVENT_SPECPAR_26_ID,
EVENT_SPECPAR_27_ID,
EVENT_SPECPAR_28_ID,
EVENT_SPECPAR_29_ID,
EVENT_SPECPAR_30_ID,
EVENT_SPECPAR_31_ID,
EVENT_STATE_ID,
EVENT_Last_Event_Parameter = 96,
End_Of_Table_Events};
#line 1369
enum e_Settings {

SETTINGS_COMPATIBILITY,
SETTINGS_MODE,
SETTINGS_CYCLING_MODE_LSB,
SETTINGS_CYCLING_MODE_MSB,
SETTINGS_PRESSURE_UNIT_LSB,
SETTINGS_PRESSURE_UNIT_MSB,
SETTINGS_LOW_SPO2_LSB,
SETTINGS_LOW_SPO2_MSB,
SETTINGS_SPO2_LOW_SELECT_LSB,
SETTINGS_SPO2_LOW_SELECT_MSB,
SETTINGS_HIGH_SPO2_LSB,
SETTINGS_HIGH_SPO2_MSB,
SETTINGS_SPO2_HIGH_SELECT_LSB,
SETTINGS_SPO2_HIGH_SELECT_MSB,
SETTINGS_VOL_CONTROL_LSB,
SETTINGS_VOL_CONTROL_MSB,
SETTINGS_P_CONTROL_LSB,
SETTINGS_P_CONTROL_MSB,
SETTINGS_P_SUPPORT_LSB,
SETTINGS_P_SUPPORT_MSB,
SETTINGS_PEEP_LSB,
SETTINGS_PEEP_MSB,
SETTINGS_PEEP_NO_SELECT_LSB,
SETTINGS_PEEP_NO_SELECT_MSB,
SETTINGS_RISE_TIME_LSB,
SETTINGS_RISE_TIME_MSB,
SETTINGS_RAMP_LSB,
SETTINGS_RAMP_MSB,
SETTINGS_I_T_LSB,
SETTINGS_I_T_MSB,
SETTINGS_IE_NUMERATOR_LSB,
SETTINGS_IE_NUMERATOR_MSB,
SETTINGS_IE_DENOMINATOR_LSB,
SETTINGS_IE_DENOMINATOR_MSB,
SETTINGS_CONTROL_R_LSB,
SETTINGS_CONTROL_R_MSB,
SETTINGS_BACKUP_R_LSB,
SETTINGS_BACKUP_R_MSB,
SETTINGS_BACKUP_R_NO_SELECT_LSB,
SETTINGS_BACKUP_R_NO_SELECT_MSB,
SETTINGS_APNEA_LSB,
SETTINGS_APNEA_MSB,
SETTINGS_AUTO_APNEA_SELECT_LSB,
SETTINGS_AUTO_APNEA_SELECT_MSB,
SETTINGS_INSP_SENS_LSB,
SETTINGS_INSP_SENS_MSB,
SETTINGS_INSP_SENS_NO_SELECT_LSB,
SETTINGS_INSP_SENS_NO_SELECT_MSB,
SETTINGS_EXH_SENS_LSB,
SETTINGS_EXH_SENS_MSB,
SETTINGS_AUTO_EXH_SENS_SELECT_LSB,
SETTINGS_AUTO_EXH_SENS_SELECT_MSB,
SETTINGS_TARGET_VT_LSB,
SETTINGS_TARGET_VT_MSB,
SETTINGS_TARGET_VT_SELECT_LSB,
SETTINGS_TARGET_VT_SELECT_MSB,
SETTINGS_MAX_PRESSURE_LSB,
SETTINGS_MAX_PRESSURE_MSB,
SETTINGS_LOW_VTI_LSB,
SETTINGS_LOW_VTI_MSB,
SETTINGS_LOW_VTI_NO_SELECT_LSB,
SETTINGS_LOW_VTI_NO_SELECT_MSB,
SETTINGS_HIGH_VTI_LSB,
SETTINGS_HIGH_VTI_MSB,
SETTINGS_HIGH_VTI_NO_SELECT_LSB,
SETTINGS_HIGH_VTI_NO_SELECT_MSB,
SETTINGS_LOW_VTE_LSB,
SETTINGS_LOW_VTE_MSB,
SETTINGS_LOW_VTE_NO_SELECT_LSB,
SETTINGS_LOW_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_VTE_LSB,
SETTINGS_HIGH_VTE_MSB,
SETTINGS_HIGH_VTE_NO_SELECT_LSB,
SETTINGS_HIGH_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_PIP_LSB,
SETTINGS_HIGH_PIP_MSB,
SETTINGS_LOW_PIP_LSB,
SETTINGS_LOW_PIP_MSB,
SETTINGS_HIGH_R_LSB,
SETTINGS_HIGH_R_MSB,
SETTINGS_HIGH_R_NO_SELECT_LSB,
SETTINGS_HIGH_R_NO_SELECT_MSB,
SETTINGS_HIGH_LEAK_LSB,
SETTINGS_HIGH_LEAK_MSB,
SETTINGS_HIGH_LEAK_SELECT_LSB,
SETTINGS_HIGH_LEAK_SELECT_MSB,
SETTINGS_TI_MIN_LSB,
SETTINGS_TI_MIN_MSB,
SETTINGS_TI_MIN_AUTO_SELECT_LSB,
SETTINGS_TI_MIN_AUTO_SELECT_MSB,
SETTINGS_TI_MAX_LSB,
SETTINGS_TI_MAX_MSB,
SETTINGS_TI_MAX_AUTO_SELECT_LSB,
SETTINGS_TI_MAX_AUTO_SELECT_MSB,
SETTINGS_DISCONNECTION_DELAY_LSB,
SETTINGS_DISCONNECTION_DELAY_MSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_LSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_MSB,
SETTINGS_SIGH_SELECT_LSB,
SETTINGS_SIGH_SELECT_MSB,
SETTINGS_SIGH_VT_COEF_LSB,
SETTINGS_SIGH_VT_COEF_MSB,
SETTINGS_SIGH_CPT_LSB,
SETTINGS_SIGH_CPT_MSB,
SETTINGS_APNEA_ALARM_ACTIVATION_LSB,
SETTINGS_APNEA_ALARM_ACTIVATION_MSB,
SETTINGS_PEDIATRIC_CIRCUIT_LSB,
SETTINGS_PEDIATRIC_CIRCUIT_MSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_LSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_MSB,
End_Of_Table_Settings};
#line 1492
enum e_USB_SerialNumberAndDate_Frame {

USB_SETTING_SERIAL_NUMBER_1,
USB_SETTING_SERIAL_NUMBER_2,
USB_SETTING_SERIAL_NUMBER_3,
USB_SETTING_SERIAL_NUMBER_4,
USB_SETTING_SERIAL_NUMBER_5,
USB_SETTING_SERIAL_NUMBER_6,
USB_SETTING_SERIAL_NUMBER_7,
USB_SETTING_SERIAL_NUMBER_8,
USB_SETTING_SERIAL_NUMBER_9,
USB_SETTING_SERIAL_NUMBER_10,
USB_SETTING_SERIAL_NUMBER_11,
USB_SETTING_SERIAL_NUMBER_12,

USB_SETTING_DATE_YEAR,
USB_SETTING_DATE_MONTH,
USB_SETTING_DATE_DAY,
USB_SETTING_DATE_HOUR,
USB_SETTING_DATE_MINUTE,
USB_SETTING_DATE_SECOND,
End_of_e_usb_frame_serialNumberAndDate};




enum e_USB_SerialNumber_Frame {

USB_SERIAL_NUMBER_1,
USB_SERIAL_NUMBER_2,
USB_SERIAL_NUMBER_3,
USB_SERIAL_NUMBER_4,
USB_SERIAL_NUMBER_5,
USB_SERIAL_NUMBER_6,
USB_SERIAL_NUMBER_7,
USB_SERIAL_NUMBER_8,
USB_SERIAL_NUMBER_9,
USB_SERIAL_NUMBER_10,
USB_SERIAL_NUMBER_11,
USB_SERIAL_NUMBER_12,
End_of_e_usb_frame_serialNumber};
#line 1538
enum e_USB_Settings_Frame {

USB_SETTINGS_DATA,
USB_SETTINGS_MSB_CRC_FRAME,
USB_SETTINGS_LSB_CRC_FRAME,
End_of_e_usb_frame_setting};




enum e_USB_Transfer_Apply {
Usb_FirstStep,
Usb_ReadCurrentDirectoryNext,
Usb_OpenFile,
Usb_CreateFile,
Usb_ReadFile,
Usb_WriteSerialNumberAndDateAtIndex,
Usb_WriteSerialNumberAndDateAtEndOfFile,
Usb_WriteSerialNumberAtEndOfFile,
Usb_WriteFileAtIndex,
Usb_WriteAtTheEndOfFile,
Usb_UpadateDateAndTime,
Usb_WriteCRC,
Usb_CloseFile,
End_of_e_usb_transfer_apply};
#line 1569
enum e_USB_File_Settings {
FileSettingNext,
FileSettingNotFound,
FileSettingFound,
end_of_e_usb_file_setting};
#line 1579
enum e_USB_File_Type {
SettingsType,
ContinuousRecordingType,
MonitoringTransferType,
TrendsTransferType,
EventsTransferType,
end_of_e_usb_file_type};




enum e_USB_Continuous_Frame {
USB_ID_FRAME,

USB_DATA,
USB_End_Of_Continuous_Frame};




enum e_NAND_FLASH_STATE {
NAND_FREE,
NAND_ERASE,
NAND_MONIT_WRITE,
NAND_MONIT_READ,
NAND_TREND_WRITE,
NAND_TREND_READ};
#line 95 "..\\..\\SRC\\HMI\\HMI_IhmType.hpp"
enum e_TYPE_OF_LED {
LED_ALARM_RED,
LED_ALARM_ORANGE,
LED_VENTIL,
LED_WHITE,
LED_AC,
LED_DC,
LED_BAT};
#line 167
enum EventId {
ProgExhalFlowUsed,
ProgExhalFlowUnused,
ProgInspControlEvent,
ProgInspTrigEvent,
ProgExhEvent,
ProgHideBatEvent,
ProgStartVentilOk,
ProgStartVentilKo,
ProgShowBatEvent,
ProgInibAlarmOK,
ProgInibAlarmNOK,
ProgCancelAlarmOK,
ProgCancelAlarmNOK,
ProgRemoveHighPressureAlarm,
ProgValveMissing,
ProgValveDetected,
ProgBlocExpiMissing,
ProgBlocExpiDetected,
ProgSpo2SensorNoError,
ProgSpo2SensorError,
ProgFio2SensorOK,
ProgFio2SensorNOK,
ProgCheckSupplyNoError,
ProgCheckSupplyError,
ProgUsbKeyDetected,
ProgUsbKeyNotDetected,
ProgUsbErrorCodeReady,
ProgUsbNewModeDetected,
ProgStartMonitoring,
ProgSupplyBusFailure,
ProgSupplyBusOK};
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject;
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject;
#line 33 "..\\..\\SRC\\DATABASE\\Db_PowerSupply.h"
enum e_DB_POWERSUPPLY {
V_BAT_U16,
TEMP_BAT_S16,
BAT_CYCLES_U16,
BAT_STATE_U16,
POWER_TYPE_U16,
JAUGE_MINUTE_U16,
JAUGE_HOUR_DISPLAY_U16,
JAUGE_MINUTE_DISPLAY_U16,
JAUGE_AVALAIBLE_U16,
PER_CENT_BAT_U16,
NO_PRESENCE_BAT_U16,
BAT_KO_U16,
CHARGE_KO_U16,
UNKNOWN_BATTERY_U16,
AMBIENT_TEMP_S16,
BATTERY_END_U16,
BATTERY_LOW_U16,
FIRST_DATE_DAY_U16,
FIRST_DATE_MONTH_U16,
FIRST_DATE_YEAR_U16,
COOLING_FAN_FAILURE_FLAG_U16,
AMBIENT_TEMP_OUTOFBOUNDS_U16,
FAILURE_24V_FLAG_U16,
BAT_TEMP_OUTOFBOUNDS_U16,
SUPPLY_MEASURE_FAILURE_U16,
POWER_SUPPLY_VERSION_NUMBER_0,
POWER_SUPPLY_VERSION_NUMBER_1,
POWER_SUPPLY_VERSION_NUMBER_2,
SUPPLIER_U16,
CAPACITY_U16,
CAPACITY_THEORICAL_U16,
FIRST_DATE_HOUR_U16,
FIRST_DATE_MINUTE_U16,
FIRST_DATE_SECOND_U16,
AGING_U16,
end_of_db_powersupply_table};
#line 47 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
enum ePANIC_MODULE {
PANIC_MODULE_VENTIL,
PANIC_MODULE_ALARM,
PANIC_MODULE_GRAPH,
PANIC_MODULE_EVENT_NODE_VENTIL,
PANIC_MODULE_EVENT_NODE_ALARM,
PANIC_MODULE_EVENT_NODE_MAINT_CALIB,
PANIC_MODULE_FRAME_GRAPH,
PANIC_MODULE_UNKNOWN,
PANIC_MODULE_MAX};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField;
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField;
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField;
#line 42 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
enum DataType {
eValue,
eString,
eValueSign};


struct Loupe;
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label;
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_VTime.hpp"
enum e_VTIME_FORMAT {
VTIME_24H_FORMAT,
VTIME_12H_FORMAT};
#line 47
enum __Q2_5VTime8e_PERIOD { AM__5VTime, PM__5VTime};
#line 42
struct VTime;
#line 236 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
enum e_OBJECT {
OBJECT_VENTIL_LOVPIP,
OBJECT_VENTIL_LOVVTI,
OBJECT_VENTIL_LOVVTE,
OBJECT_VENTIL_LOVVM,
OBJECT_VENTIL_LOVR,
OBJECT_VENTIL_LOVFUITE,
OBJECT_VENTIL_LOVFIO2,
OBJECT_VENTIL_LOVSPO2,
OBJECT_VENTIL_LTVIE,
OBJECT_VENTIL_LTVIT,
OBJECT_VENTIL_OBJECT_MAX,
OBJECT_ALARM_LOVPIP = 0,
OBJECT_ALARM_LOVVTI,
OBJECT_ALARM_LOVMAP,
OBJECT_ALARM_LOVPEEP,
OBJECT_ALARM_LTVIE,
OBJECT_ALARM_LOVIT,
OBJECT_ALARM_LOVR,
OBJECT_ALARM_LOVM,
OBJECT_ALARM_OBJECT_MAX,
OBJECT_GRAPH_MOFIO2 = 0,
OBJECT_GRAPH_MOSPO2,
OBJECT_GRAPH_MOPULSE,
OBJECT_GRAPH_MOTI,
OBJECT_GRAPH_MOTE,
OBJECT_GRAPH_MOIE,
OBJECT_GRAPH_MOIT,
OBJECT_GRAPH_MOFR,
OBJECT_GRAPH_MOVM,
OBJECT_GRAPH_MOVTE,
OBJECT_GRAPH_MOVTI,
OBJECT_GRAPH_MOPE,
OBJECT_GRAPH_MOPI,
OBJECT_GRAPH_MOFUITE,
OBJECT_GRAPH_OBJECT_MAX};
#line 28 "..\\..\\SRC\\DATABASE\\DB_AlarmStatus.h"
enum e_DB_ALARMS {
Mark_Begin_Alarm,
ALARM_DISCONNECTION_U16,
ALARM_HIGH_PRESSURE_U16,
ALARM_APNEA_U16,
ALARM_HIGH_VTI_U16,
ALARM_LOW_VTI_U16,
ALARM_LOW_VTE_U16,
ALARM_HIGH_RATE_U16,
ALARM_AC_POWER_FAIL_U16,
ALARM_DC_POWER_FAIL_U16,
ALARM_CHECK_SUPPLY_U16,
ALARM_LOW_BATTERY_U16,
ALARM_END_OF_BATTERY_U16,
ALARM_CHECK_BATTERY_U16,
ALARM_NO_BATTERY_U16,
ALARM_CHECK_BUZZER_U16,
ALARM_BUZZER_BATTERY_LOW_U16,
ALARM_BUZZER_BATTERY_CHARGE_FAILURE_U16,
ALARM_RESERVED_18,
ALARM_TECHNICAL_PROBLEM_U16,
ALARM_CHECK_SETTINGS_U16,
ALARM_CHECK_PRESSURE_U16,
ALARM_CHECK_PROXIMAL_U16,
ALARM_PROXI_DISCONNECTION_U16,
ALARM_NO_PROXIMAL_U16,
ALARM_CHECK_VALVE_U16,
ALARM_CHECK_VOLUME_U16,
ALARM_VALVE_LEAKAGE_U16,
ALARM_CHECK_REMOTE_ALARM_U16,
ALARM_UNKNOWN_BATTERY_U16,
ALARM_CHECK_BATTERY_CHARGE_U16,
ALARM_HIGH_VTE_U16,
ALARM_CALIBRATION_FAIL_U16,
ALARM_KEYBOARD_DEFAULT_U16,
ALARM_AMBIENT_TEMP_U16,
ALARM_BAT_TEMP_U16,
ALARM_FAILURE_24V_U16,
ALARM_COOLING_FAN_U16,
ALARM_SUPPLY_MEASURE_U16,
ALARM_TURBINE_OVERHEAT_U16,
ALARM_RESERVED_40,
ALARM_CONTROLLED_CYCLES_U16,
ALARM_OCCLUSION_U16,
ALARM_CPU_REFERENCE_U16,
ALARM_BREATH_TIME_CYCLED_U16,
ALARM_INSP_FLOW_FAILURE_U16,
ALARM_CHECK_VALVE_PRESSURE_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_UTILISER_VALVE_1_U16,
ALARM_UTILISER_VALVE_2_U16,
ALARM_ENLEVER_VALVE_1_U16,
ALARM_ENLEVER_VALVE_2_U16,
ALARM_LEAKAGE_U16,
ALARM_CHECK_FIO2_U16,
ALARM_LOW_FIO2_U16,
ALARM_HIGH_FIO2_U16,
ALARM_NO_FIO2_SENSOR_U16,
ALARM_CALIB_FIO2_U16,
ALARM_CHECK_O2_SUPPLY_U16,
ALARM_MISSING_O2_SUPPLY_U16,
ALARM_CHECK_O2_U16,
ALARM_O2_LEAKAGE_U16,
ALARM_HIGH_SPO2_U16,
ALARM_LOW_SPO2_U16,
ALARM_SPO2_SENSOR_DISCONNECTED_U16,
ALARM_100_PER_CENT_O2_U16,
ALARM_DELAYED_MESSAGE_U16,
ALARM_LEAK_OCCLUSION_U16,
ALARM_VOLUNTARY_STOP_U16,
ALARM_NEEDED_FIO2_CALIB_U16,
ALARM_APNEA_FLAG_U16,
Mark_Displayed_Alarm,
Mark_Begin_Technical_Alarm,
TECH_ALARM_RESERVED_1,
TECH_ALARM_INSP_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_EXHAL_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_VALVE_PRESS_OFFSET_DEFAULT_U16,
TECH_ALARM_INTERNAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_SPEED_DEFAULT_U16,
TECH_ALARM_CLOCK_DEFAULT_U16,
TECH_ALARM_PROXIMAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_VERY_LOW_PROXIMAL_PRESS_U16,
TECH_ALARM_VERY_LOW_INTERNAL_PRESS_U16,
TECH_ALARM_VERY_LOW_VALVE_PRESS_U16,
TECH_ALARM_LOOSE_FLASH_POINTER,
TECH_ALARM_FIO2_OFFSET_DEFAULT,
TECH_ALARM_OFFSET_O2_FLOW,
TECH_ALARM_O2_PRESSURE_OFFSET_DEFAULT,
TECH_ALARM_RESERVED_16,
TECH_ALARM_RESERVED_17,
TECH_ALARM_RESERVED_18,
TECH_ALARM_RESERVED_19,
TECH_ALARM_RESERVED_20,
end_of_alarms_table,
NO_ALARM};
#line 32 "..\\..\\SRC\\DATABASE\\DB_Event.h"
enum e_EVENT_ENUM {

NO_EVENT,
EVENT_START,
EVENT_VENTIL,
EVENT_VOLUNTARY_STOP_VENTIL,
EVENT_MODIF_PEEP,
EVENT_MODIF_BACKUP_R,
EVENT_RESET_PATIENT_COUNTER,
EVENT_MODIF_CONTROL_R,
RESERVED_8,
EVENT_MODIF_VOL_CONTROL,
EVENT_MODIF_RAMP,
EVENT_MODIF_IE,
RESERVED_12,
EVENT_MODIF_STOP_DEVICE,
EVENT_MODIF_INSP_SENS,
EVENT_MODIF_MODE,
EVENT_MODIF_RISE_TIME,
EVENT_MODIF_P_SUPPORT,
EVENT_MODIF_VTC,
EVENT_MODIF_PIMAX,
EVENT_MODIF_IT,
RESERVED_21,
EVENT_MODIF_EXH_SENS,
EVENT_MODIF_APNEA_TIME,
EVENT_MODIF_LOW_PIP,
EVENT_MODIF_HIGH_PIP,
EVENT_MODIF_HIGH_R,
EVENT_MODIF_LOW_VTE,
RESERVED_28,
RESERVED_29,
EVENT_MODIF_LOW_VTI,
EVENT_MODIF_HIGH_VTI,
RESERVED_32,
RESERVED_33,
RESERVED_34,
RESERVED_35,
EVENT_UNVOLUNTARY_STOP_VENTIL,
RESERVED_37,
RESERVED_38,
RESERVED_39,
EVENT_EXH_FLOW_CALIB,
RESERVED_41,
EVENT_MODIF_FIO2,
EVENT_FIO2_CALIB,
EVENT_MODIF_MAX_LEAK,
EVENT_INSP_FLOW_CALIB,
EVENT_O2_FLOW_CALIB,
EVENT_PATIENT_PRESS_CALIB,
RESERVED_48,
EVENT_MODIF_SPO2_MAXI,
EVENT_MODIF_SPO2_MINI,
EVENT_MODIF_TI_MAXI,
EVENT_MODIF_TI_MINI,
EVENT_VALVE_PRESS_CALIB,
EVENT_AC_RETURN,
EVENT_O2_PRESS_CALIB,
EVENT_ALARM_INHIBITION,
EVENT_DC_RETURN,
EVENT_CIRCUIT_CHECK_MENU_ACCESS,
EVENT_MAINTENANCE_MENU_ACCESS,
EVENT_ALARM_CANCELLATION,
EVENT_MODIF_P_CONTROL,
EVENT_MODIF_TI_CONTROL,
RESERVED_63,
RESERVED_64,
EVENT_MODIF_HIGH_VTE,
EVENT_MODIF_TIME,
EVENT_MODIF_DATE,
EVENT_USB_TOO_MANY_KEYS_CONNECTED,
EVENT_USB_KEY_DISCONNECTED_DURING_OPERATION,
EVENT_USB_TRANSFER_ERROR,
EVENT_USB_ERASE_KEY_ERROR,
EVENT_USB_SETTINGS_INCOMPATIBLES,
EVENT_USB_SETTINGS_FILE_ERROR,
EVENT_USB_KEY_FULL,
EVENT_USB_SETTINGS_TRANSFER_FROM_KEY,
EVENT_MODIF_FIO2_MAXI,
EVENT_MODIF_FIO2_MINI,
EVENT_MODIF_DISCONNECTION_DELAY,
EVENT_MODIF_SIGHT_COUNT,
EVENT_MODIF_SIGHT_COEF,
EVENT_FLASH_CHECKSUM_POST_ERROR,
EVENT_RAM_CHECKSUM_POST_ERROR,
EVENT_VOLT_REFERENCE_POST_ERROR,
EVENT_EEPROM_POST_ERROR,
EVENT_POST_VERSION_ERROR,
EVENT_USB_CONTINUOUS_TRANSFER_START,
EVENT_USB_CONTINUOUS_TRANSFER_STOP,
RESERVED_88,
Start_Alarm,
EVENT_AL_HIGH_PRESS,
EVENT_AL_DISCONNECTION,
EVENT_AL_HIGH_RATE,
EVENT_AL_LOW_VTI,
EVENT_AL_HIGH_VTI,
EVENT_AL_LOW_VTE,
EVENT_AL_VALVE_LEAKAGE,
EVENT_AL_APNEA,
EVENT_AL_LOW_FIO2,
EVENT_AL_HIGH_FIO2,
EVENT_AL_CHECK_PRESSURE,
EVENT_AL_CHECK_VALVE,
EVENT_AL_AC_POWER_FAIL,
EVENT_AL_DC_POWER_FAIL,
EVENT_AL_LOW_BATTERY,
EVENT_AL_END_OF_BATTERY,
EVENT_AL_CHECK_BATTERY,
EVENT_AL_HIGH_SPO2,
EVENT_AL_NO_FIO2_SENSOR,
EVENT_AL_LEAKAGE,
EVENT_AL_LEAK_OCCLUSION,
EVENT_AL_LOW_SPO2,
EVENT_AL_NO_BATTERY,
EVENT_AL_NO_PROXI,
EVENT_AL_O2_LEAKAGE,
EVENT_AL_CHECK_VOLUME,
EVENT_AL_CHECK_BUZZER,
EVENT_AL_CHECK_FIO2,
EVENT_AL_CHECK_O2,
EVENT_AL_CHECK_O2_SUPPLY,
EVENT_AL_CHECK_PROXIMAL,
EVENT_AL_CHECK_REMOTE_ALARM,
EVENT_AL_CHECK_SUPPLY,
RESERVED_123,
EVENT_AL_CONNECT_VALVE,
EVENT_AL_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_DISCONNECT_VALVE,
EVENT_AL_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_PROXIMAL_DISCONNECTION,
EVENT_AL_TECHNICAL_PROBLEM,
EVENT_AL_CHECK_VALVE_PRESSURE,
EVENT_AL_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_MISSING_O2_SUPPLY,
EVENT_AL_CONTROLLED_CYCLES,
RESERVED_134,
EVENT_AL_100_PER_CENT_O2,
EVENT_AL_UNKNOWN_BATTERY,
EVENT_AL_CHECK_BATTERY_CHARGE,
RESERVED_138,
RESERVED_139,
RESERVED_140,
RESERVED_141,
EVENT_AL_NEW_VERSION,
EVENT_AL_EEPROM_OUT_OF_RANGE,
EVENT_AL_EEPROM_LOOSING_PARAM,
RESERVED_145,
EVENT_AL_HIGH_VTE,
EVENT_AL_KEYBOARD,
EVENT_AL_CALIBRATION,
EVENT_AL_COOLING_FAN,
EVENT_AL_AMBIENT_TEMP,
EVENT_AL_BAT_TEMP,
EVENT_AL_SUPPLY_MEASURE,
EVENT_AL_FAILURE_24V,
EVENT_AL_TURBINE_OVERHEAT,
EVENT_AL_OCCLUSION,
EVENT_AL_CPU_REFERENCE,
RESERVED_157,
EVENT_AL_BREATH_TIME_CYCLED,
EVENT_AL_INSP_FLOW_FAILURE,
EVENT_AL_LOW_BUZZER_BATTERY,
RESERVED_161,
EVENT_AL_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_NEEDED_FIO2_CALIB,
EVENT_AL_VOLUNTARY_STOP,
RESERVED_165,
RESERVED_166,
RESERVED_167,
End_Event_Alarm,
Start_End_Of_Alarm,
EVENT_AL_END_OF_APNEA,
EVENT_AL_END_OF_CHECK_BATTERY,
EVENT_AL_END_OF_DISCONNECTION,
EVENT_AL_END_OF_CHECK_FIO2,
EVENT_AL_END_OF_CHECK_O2,
EVENT_AL_END_OF_CHECK_O2_SUPPLY,
EVENT_AL_END_OF_CHECK_PRESSURE,
EVENT_AL_END_OF_CHECK_PROXIMAL,
RESERVED_178,
RESERVED_179,
EVENT_AL_END_OF_CHECK_SUPPLY,
EVENT_AL_END_OF_CHECK_VALVE,
EVENT_AL_END_OF_LEAK_OCCLUSION,
EVENT_AL_END_OF_CHECK_VOLUME,
EVENT_AL_END_OF_CONNECT_VALVE,
EVENT_AL_END_OF_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_DISCONNECT_VALVE,
EVENT_AL_END_OF_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_HIGH_FIO2,
EVENT_AL_END_OF_HIGH_PRESSURE,
EVENT_AL_END_OF_HIGH_RATE,
EVENT_AL_END_OF_HIGH_SPO2,
EVENT_AL_END_OF_HIGH_VTI,
EVENT_AL_END_OF_LEAKAGE,
EVENT_AL_END_OF_LOW_FIO2,
EVENT_AL_END_OF_LOW_SPO2,
EVENT_AL_END_OF_LOW_VTE,
EVENT_AL_END_OF_LOW_VTI,
EVENT_AL_END_OF_NO_BATTERY,
EVENT_AL_END_OF_NO_FIO2_SENSOR,
EVENT_AL_END_OF_NO_PROXI,
EVENT_AL_END_OF_O2_LEAKAGE,
EVENT_AL_END_OF_PROXI_DISCONNECTION,
EVENT_AL_END_OF_TECHNICAL_PROBLEM,
EVENT_AL_END_OF_VALVE_LEAKAGE,
EVENT_AL_END_OF_HIGH_VTE,
EVENT_AL_END_KEYBOARD,
EVENT_AL_END_CHECK_VALVE_PRESSURE,
EVENT_AL_END_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_END_MISSING_O2_SUPPLY,
EVENT_AL_END_CONTROLLED_CYCLES,
RESERVED_211,
EVENT_AL_END_OF_100_PER_CENT_O2,
EVENT_AL_END_OF_UNKNOWN_BATTERY,
EVENT_AL_END_OF_CHECK_BATTERY_CHARGE,
RESERVED_215,
RESERVED_216,
RESERVED_217,
RESERVED_218,
EVENT_AL_END_COOLING_FAN,
EVENT_AL_END_AMBIENT_TEMP,
EVENT_AL_END_BAT_TEMP,
EVENT_AL_END_SUPPLY_MEASURE,
EVENT_AL_END_FAILURE_24V,
RESERVED_224,
EVENT_AL_END_OCCLUSION,
EVENT_AL_END_CPU_REFERENCE,
RESERVED_227,
EVENT_AL_END_BREATH_TIME_CYCLED,
EVENT_AL_END_OF_INSP_FLOW_FAILURE,
EVENT_AL_END_LOW_BUZZER_BATTERY,
RESERVED_231,
EVENT_AL_END_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_END_OF_VOLUNTARY_STOP,
RESERVED_234,
RESERVED_235,
End_Alarm,
Start_Anomalies,
RESERVED_238,
EVENT_ALT_INSP_FLOW_OFFSET,
EVENT_ALT_EXH_FLOW_OFFSET,
EVENT_ALT_VALVE_PRESSURE_OFFSET,
EVENT_ALT_INT_PRESS_OFSSET,
EVENT_ALT_SPEED,
EVENT_ALT_CLOCK,
EVENT_ALT_PROXI_PRESS_OFSSET,
EVENT_ALT_VERY_LOW_PROXI_PRESS,
EVENT_ALT_VERY_LOW_INT_PRESS,
EVENT_ALT_VERY_LOW_VALVE_PRESS,
EVENT_ALT_LOOSE_FLASH_POINTER,
EVENT_ALT_FIO2_OFFSET,
EVENT_ALT_O2_FLOW_OFFSET,
EVENT_ALT_O2_PRESSURE_OFFSET,
RESERVED_253,
RESERVED_254,
End_Anomalie};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Control.h"
enum e_DB_CONTROL {
VENTIL_AUTHORIZATION_U16,
CURRENT_MODE_U16,
CHANGE_MODE_U16,
VENTIL_STATE_U16,
SIMV_CYCLES_U16,
CALIB_PATIENT_PRESS_REQ_U16,
CALIB_FLOW_INSP_REQ_U16,
CALIB_FLOW_EXH_REQ_U16,
CALIB_VALVE_PRESS_REQ_U16,
CALIB_FAS_VALVE_REQ_U16,
INHIBITED_BUZZER_U16,
INHIBITION_AUTHORIZATION_U16,
CANCELLED_ALARM_U16,
BUZZER_CMD_U16,
CALIB_ADJUST_CMD_U16,
SETUP_CONTROL_SET_POINT_U16,
SETUP_CONTROL_TYPE_U16,
SUPPLY_AC_DC_BAT_U16,
DISPLAY_BATTERY_U16,
CURRENT_PATIENT_COUNTER_HOUR_U16,
CURRENT_PATIENT_COUNTER_MIN_U16,
CURRENT_MACHINE_COUNTER_HOUR_U16,
CURRENT_MACHINE_COUNTER_MIN_U16,
CONTROL_BUZZER_U16,
VALVE_DETECTED_U16,
AC_SELECTED_U16,
DC_SELECTED_U16,
REMOTE_STATE_U16,
PROXI_DETECTED_U16,
ALARM_DETECTED_U16,
NEW_ALARM_HP_DETECTED_U16,
Start_Limit_Setting,
LIMIT_LOW_PIP_U16,
LIMIT_HIGH_PIP_U16,
LIMIT_PEEP_U16,
LIMIT_VOL_CONTROL_U16,
LIMIT_TI_CONTROL_U16,
LIMIT_CONTROL_R_U16,
LIMIT_PI_U16,
LIMIT_LOW_VTI_U16,
LIMIT_HIGH_VTI_U16,
LIMIT_LOW_VTE_U16,
LIMIT_HIGH_VTE_U16,
LIMIT_P_SUPPORT_U16,
LIMIT_TI_MIN_U16,
LIMIT_TI_MAX_U16,
LIMIT_SPO2_MINI_U16,
LIMIT_SPO2_MAXI_U16,
LIMIT_INSP_SENS_U16,
LIMIT_SIGH_U16,
LIMIT_TARGET_VT_U16,
LIMIT_APNEA_U16,
LIMIT_HIGH_FIO2,
LIMIT_LOW_FIO2,
LIMIT_SPO2,
LIMIT_BACKUP_R_U16,
LIMIT_PMAX_U16,
End_Limit_Setting,
UNCANCEL_CMD_U16,
SUPPLY_BUS_FAILURE_U16,
KEYBOARD_ANOMALIE_U16,
VALIDATION_BIP_U16,
BIP_RUNNING_U16,
MAINTENANCE_MODE_U16,
CALIBRATION_MODE_U16,
TEST_BUZ_CARD_U16,
TEST_BUZ_SEC_U16,
TEST_VOLUME_U16,
CANCEL_ALARM_ASKED,
KEY_EVENT_U16,
BACKLIGHT_OFF_U16,
HIGH_PRESSURE_LED_REMINDER_U16,
RECORD_SETTINGS_USB_U16,
APPLY_SETTINGS_USB_U16,
ERASE_KEY_USB_U16,
RECORD_TIME_TENDANCE_U16,
ERROR_SPO2_SENSOR_DETECTED,
DETECTED_FIO2_SENSOR,
CALIBRATED_FIO2_SENSOR,
CALIB_ADJUST_VANNE_FIO2_CMD,
CALIB_FIO2_REQ_U16,
CALIB_FLOW_O2_REQ_U16,
MEMO_CMD_VANNE_FIO2_TO_CALIB,
CALIB_PRESS_O2_REQ_U16,
FLOW_SAT_FLAG_U16,
HIGH_PRESSURE_DETECTED_U16,
HIGH_PRESSURE_EXHALATION_DETECTED_U16,
HIGH_PRESSURE_FILTER_WINDOW_U16,
FIO2_100_ACTIVE,
LOAD_USB_SETTINGS_U16,
COM_READY_U16,
START_MONITORING_U16,
SIMV_PSV_CYCLE_U16,
BLOC_EXPI_DETECTED_U16,
ADJUSTMENT_IN_PROGRESS_U16,
VALVE_DETECT_IN_PROGRESS_U16,
EXHAL_FLOW_USE_U16,
FLAT_INT_U16,
FLAT_PROXI_U16,
VALVE_O2_CMD_U16,
CPAP_TRIG_I_U16,
CPAP_TRIG_E_U16,
CONTROLER_TYPE_U16,
VTI_DISPLAY_DELAY_U16,
VOLUNTARY_STOP_U16,
SIMV_CONTROLLED_INSP_U16,
END_OF_OPERATION_U16,
CIRCUIT_CHECK_MODE_U16,
end_of_db_control_table};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Config.h"
enum e_DB_CONFIG {
ADJUST_LANGUAGE_U16,
ADJUST_MODE_U16,
ADJUST_KEYLOCK_U16,
VENTIL_REQ_U16,
OFFSET_INSP_FLOW_1_U16,
OFFSET_INSP_FLOW_2_U16,
OFFSET_INSP_FLOW_3_U16,
OFFSET_INSP_FLOW_4_U16,
OFFSET_INSP_FLOW_5_U16,
OFFSET_INSP_FLOW_6_U16,
OFFSET_INSP_FLOW_7_U16,
OFFSET_INSP_FLOW_8_U16,
OFFSET_EXH_FLOW_1_U16,
OFFSET_EXH_FLOW_2_U16,
OFFSET_EXH_FLOW_3_U16,
OFFSET_EXH_FLOW_4_U16,
OFFSET_EXH_FLOW_5_U16,
OFFSET_EXH_FLOW_6_U16,
OFFSET_EXH_FLOW_7_U16,
OFFSET_EXH_FLOW_8_U16,
OFFSET_O2_FLOW_1,
OFFSET_O2_FLOW_2,
OFFSET_O2_FLOW_3,
OFFSET_O2_FLOW_4,
OFFSET_O2_FLOW_5,
OFFSET_O2_FLOW_6,
OFFSET_O2_FLOW_7,
OFFSET_PATIENT_PRESS_1_U16,
OFFSET_PATIENT_PRESS_2_U16,
OFFSET_PATIENT_PROX_PRESS_1_U16,
OFFSET_PATIENT_PROX_PRESS_2_U16,
OFFSET_PRESS_O2,
I_VALVE_REF_U16,
OFFSET_FAS_VALVE_1_U16,
OFFSET_FAS_VALVE_2_U16,
OFFSET_FAS_VALVE_3_U16,
OFFSET_FAS_VALVE_4_U16,
OFFSET_FAS_VALVE_5_U16,
OFFSET_FAS_VALVE_6_U16,
OFFSET_FAS_VALVE_7_U16,
OFFSET_FAS_VALVE_8_U16,
OFFSET_FAS_VALVE_9_U16,
OFFSET_VALVE_PRESS_U16,
OFFSET_VALVE_PRESS_2_U16,
OFFSET_FIO2,
ADJUST_BRIGHTNESS_U16,
ADJUST_BACKLIGHT_U16,

SAVED_PATIENT_COUNTER_HOUR_U16,

SAVED_PATIENT_COUNTER_MIN_U16,

SAVED_MACHINE_COUNTER_HOUR_U16,

SAVED_MACHINE_COUNTER_MIN_U16,

RETRIEVAL_EVENT_ADRESS_MSB_U16,

RETRIEVAL_EVENT_ADRESS_LSB_U16,

FLASH_MONIT_WRITE_BLOCK_U16,

FLASH_MONIT_WRITE_PAGE_U16,

FLASH_MONIT_WRITE_COLUMN_U16,

FLASH_TREND_WRITE_BLOCK_U16,

FLASH_TREND_WRITE_PAGE_U16,

FLASH_TREND_WRITE_COLUMN_U16,

FLASH_FIRST_PARTITION_FULL_U16,

FLASH_SECOND_PARTITION_FULL_U16,

SPEED_COM_U16,
RAZ_COUNTER_PAT_DATE_U16,
RAZ_COUNTER_PAT_MONTH_U16,
RAZ_COUNTER_PAT_YEAR_U16,
RAZ_COUNTER_PAT_HOUR_U16,
RAZ_COUNTER_PAT_MIN_U16,
BAD_ERASE_U16,
SOUND_LEVEL_SELECT_U16,
PREVIOUS_SOUND_LEVEL_SELECT_U16,
CURVE_DISPLAY_TYPE_MODE_U16,
CURVE_MAX_PRESSURE_U16,
CURVE_MAX_FLOW_U16,
CURVE_MAX_VT_U16,
CURVE_MAX_TIME_U16,
CURVE_DRAW_MODE_U16,
ADJUST_CYCLING_MODE_U16,
ADJUST_KEY_TONE_U16,
ADJUST_WAVEFORM_DISPLAY_U16,
ADJUST_BAROMETRIC_CORRECTOR_U16,
ADJUST_FIO2,
ADJUST_FIO2_SELECT,
ADJUST_LOW_FIO2,
ADJUST_HIGH_FIO2,
ADJUST_LOW_SPO2,
ADJUST_HIGH_SPO2,
SPO2_LOW_SELECT,
SPO2_HIGH_SELECT,
FIO2_LOW_SELECT,
FIO2_HIGH_SELECT,
PRESSURE_UNIT_U16,
TRIGG_E_POSITIVE,
APNEA_ALARM_ACTIVATION,
FLASH_MEMORY_MANUFACTURER,
FLASH_MEMORY_DEVICE,
FLASH_MEMORY_FIVE_ADDRESS_CYCLES,
PARAM_COMPATIBILITY,
IHM_LOCKED_FRAME_ID,
ADJUST_PEDIATRIC_CIRCUIT_U16,
PREVIOUS_MODE_U16,
PRESSURE_SUPPORT_RELATIVE_U16,
PRESSURE_SUPPORT_CHANGED_U16,
VOLUNTARY_STOP_ALARM_ACTIVATION,
SOUND_TYPE_SELECT_U16,
end_of_db_config_table};
#line 28 "..\\..\\SRC\\DATABASE\\DB_Rtc.h"
enum e_DB_RTC {
DB_RTC_SECOND_U16,
DB_RTC_MINUTE_U16,
DB_RTC_HOUR_U16,
DB_RTC_DAY_U16,
DB_RTC_MONTH_U16,
DB_RTC_YEAR_U16,
ADJUST_RTC_REQ_U16,
ADJUST_RTC_SECOND_U16,
ADJUST_RTC_MINUTE_U16,
ADJUST_RTC_HOUR_U16,
ADJUST_RTC_DAY_U16,
ADJUST_RTC_MONTH_U16,
ADJUST_RTC_YEAR_U16,
end_of_db_rtc_table}; struct __T50324712 { short d; short i; void (*f)();};
#line 33 "..\\..\\SRC\\GENERAL\\typedef.h"
typedef int e_BOOL;
#line 63
typedef unsigned char UBYTE;
typedef unsigned UWORD16;


typedef signed int SWORD16;
#line 104 "..\\..\\SRC\\GENERAL\\enum.h"
typedef enum e_SYMBOL e_SYMBOL;
#line 391
typedef enum e_TYPE_OF_DB_TARGET e_TYPE_OF_DB_TARGET;
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject {
#line 45
e_TYPE_OF_DB_TARGET DbTarget;

UWORD16 IdParam; struct __T50324712 *__vptr;};
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject { struct MenuObject __b_MenuObject;
#line 47
struct DisplayObject *Parent;


UWORD16 Line;


UWORD16 Col;


UWORD16 Page;

e_BOOL Visible;

e_BOOL RefreshE;};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject { struct DisplayObject __b_DisplayObject;
#line 47
UWORD16 Font;

e_BOOL ReverseVideo;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField { struct FieldObject __b_FieldObject;
#line 41
UWORD16 Value; UWORD16 NbDigit; UWORD16 Divider;

e_BOOL DisplayZero; e_BOOL Float; e_BOOL SignValue;
#line 51
e_BOOL ChildBackgroundEqualParent;

e_BOOL IEDisplay;};
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField { struct FieldObject __b_FieldObject;
#line 41
UBYTE *Text;};
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField { struct FieldObject __b_FieldObject;
#line 40
e_SYMBOL Symbol;

e_BOOL BarredSymbol;};
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label { struct DisplayObject __b_DisplayObject;
#line 44
e_SYMBOL PreviousIcon;

UBYTE **Name;

struct Loupe *LoupeObject;

struct SymbolField FIcon;

struct TextField FLabel;

e_BOOL Centered;};
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject { struct Label __b_Label;
#line 42
UWORD16 ValueTemp;


UWORD16 IdFlagTemp;


UWORD16 ValueFlagTemp;

e_TYPE_OF_DB_TARGET DbIdFlagTemp;};
#line 37 "..\\..\\SRC\\HMI\\HMI_VTime.hpp"
typedef enum e_VTIME_FORMAT e_VTIME_FORMAT;
#line 47
typedef enum __Q2_5VTime8e_PERIOD __Q2_5VTime8e_PERIOD;
#line 42
struct VTime { struct EditableObject __b_EditableObject;
#line 50
e_BOOL SecVisible;

__Q2_5VTime8e_PERIOD Suffixe;

e_BOOL ForcedSuffixUpdate;


struct TextField FSep;

struct TextField FSepHours;

struct TextField FSepMin;

struct TextField FSuffixe;


struct ValueField FHours;

struct ValueField FMin;

struct ValueField FSec;


UWORD16 ValueState;


UWORD16 IdParam2;

UWORD16 IdParam3;

UWORD16 IdParamReg1;

UWORD16 IdParamReg2;

UWORD16 IdParamReg3;

e_VTIME_FORMAT VTimeFormat;

e_BOOL StopMonitoring;}; extern void *__nw__FUi(unsigned);
#line 67 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
extern void SetIdParam__10MenuObjectFUi(struct MenuObject *const, UWORD16);
extern UWORD16 GetIdParam__10MenuObjectFv(struct MenuObject *const);

extern void SetDbTarget__10MenuObjectF19e_TYPE_OF_DB_TARGET(struct MenuObject *const, e_TYPE_OF_DB_TARGET);
extern e_TYPE_OF_DB_TARGET GetDbTarget__10MenuObjectFv(struct MenuObject *const);
#line 83 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
extern void SetLine__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);


extern void SetCol__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetCol__13DisplayObjectFv(struct DisplayObject *const);




extern UWORD16 GetFullValue__13DisplayObjectFv(struct DisplayObject *const);

extern void SetParent__13DisplayObjectFP13DisplayObject(struct DisplayObject *const, struct DisplayObject *);



extern void SetVisible__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void SetForcedVisible__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void RefreshEnable__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
#line 112
extern void FreezeMonitoringMode__13DisplayObjectFv(struct DisplayObject *const);

extern void FreezeMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void StartMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void StopMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void SetLanguage__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetLanguage__13DisplayObjectFv(struct DisplayObject *const);
extern void SetEndOfInit__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern e_BOOL GetEndOfInit__13DisplayObjectFv(struct DisplayObject *const);


extern UBYTE *GetStringValue1__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetStringValue2__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetUnit1__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetUnit2__13DisplayObjectFv(struct DisplayObject *const);
#line 138 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
extern void ShortBipRequest__5ToolsSFv(void);
#line 72 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
extern void SetFont__11FieldObjectFUi(struct FieldObject *const, UWORD16);
extern UWORD16 GetFont__11FieldObjectFv(struct FieldObject *const);
#line 63 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
extern struct ValueField *__ct__10ValueFieldFv(struct ValueField *const);



extern void Init__10ValueFieldFUiN21iN21N24(struct ValueField *const, UWORD16, UWORD16, UWORD16, e_BOOL, UWORD16, UWORD16, e_BOOL, e_BOOL);
#line 80
extern UWORD16 GetValue__10ValueFieldFv(struct ValueField *const);
#line 57 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
extern struct TextField *__ct__9TextFieldFv(struct TextField *const);



extern void Init__9TextFieldFiUiT2T1PUc(struct TextField *const, SWORD16, UWORD16, UWORD16, e_BOOL, UBYTE *);
#line 67
extern void SetText__9TextFieldFPUc(struct TextField *const, UBYTE *);
extern UBYTE *GetText__9TextFieldFv(struct TextField *const);
#line 89 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
extern UBYTE *GetName__5LabelFv(struct Label *const);

extern UWORD16 GetEndCol__5LabelFv(struct Label *const);
#line 104
extern void SetLoupe__5LabelFP5Loupe(struct Label *const, struct Loupe *);
extern struct Loupe *GetLoupe__5LabelFv(struct Label *const);

extern void SetInvertVideo__5LabelFi(struct Label *const, e_BOOL);
extern void Lock__5LabelFi(struct Label *const, e_BOOL);
extern void Show__5LabelFv(struct Label *const);
extern void Hide__5LabelFv(struct Label *const);

extern void WinFocus__5LabelFv(struct Label *const);
extern void LoseFocus__5LabelFv(struct Label *const);
extern void StartModifMode__5LabelFv(struct Label *const);


extern void RefreshLanguage__5LabelFv(struct Label *const);
#line 66 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
extern struct EditableObject *__ct__14EditableObjectFv(struct EditableObject *const);

extern void SetValueTemp__14EditableObjectFUi(struct EditableObject *const, UWORD16);
extern UWORD16 GetValueTemp__14EditableObjectFv(struct EditableObject *const);
#line 81
extern void StopModifMode__14EditableObjectFv(struct EditableObject *const);
extern void CancelModifMode__14EditableObjectFv(struct EditableObject *const);
#line 42 "..\\..\\SRC\\HMI\\HMI_VTime.cpp"
extern struct VTime *__ct__5VTimeFv(struct VTime *);
#line 443
extern void Format__5VTimeFv(struct VTime *const);
#line 105
extern void SetVTimeFormat__5VTimeF14e_VTIME_FORMAT(struct VTime *const, e_VTIME_FORMAT);




extern e_VTIME_FORMAT GetVTimeFormat__5VTimeFv(struct VTime *const);
#line 165
extern UBYTE *GetSep__5VTimeFv(struct VTime *const);




extern void SetSep__5VTimeFPUc(struct VTime *const, UBYTE *);
#line 191
extern UBYTE *GetTextSuffixe__5VTimeFv(struct VTime *const);




extern void SetTextSuffixe__5VTimeFPUc(struct VTime *const, UBYTE *);
#line 175
extern UBYTE *GetSepHours__5VTimeFv(struct VTime *const);




extern void SetSepHours__5VTimeFPUc(struct VTime *const, UBYTE *);
#line 186
extern e_BOOL GetSecVisible__5VTimeFv(struct VTime *const);
#line 477
extern void SetSecVisible__5VTimeFi(struct VTime *const, e_BOOL);
#line 201
extern UWORD16 GetHours__5VTimeFv(struct VTime *const);
#line 223
extern void SetHours__5VTimeFUi(struct VTime *const, UWORD16);
#line 265
extern UWORD16 GetMin__5VTimeFv(struct VTime *const);




extern void SetMin__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 GetSec__5VTimeFv(struct VTime *const);




extern void SetSec__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 getColSep__5VTimeFv(struct VTime *const);




extern void SetColSep__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 getColHours__5VTimeFv(struct VTime *const);




extern void SetColHours__5VTimeFUi(struct VTime *const, UWORD16);
#line 306
extern void SetFontHours__5VTimeFUi(struct VTime *const, UWORD16);
#line 323
extern e_BOOL IsSecVisible__5VTimeFv(struct VTime *const);
#line 335
extern UWORD16 GetValueState__5VTimeFv(struct VTime *const);




extern void SetValueState__5VTimeFUi(struct VTime *const, UWORD16);
#line 115
extern void SetIdParam2__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 GetIdParam2__5VTimeFv(struct VTime *const);




extern void SetIdParam3__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 GetIdParam3__5VTimeFv(struct VTime *const);




extern void SetIdParamReg1__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 GetIdParamReg1__5VTimeFv(struct VTime *const);




extern void SetIdParamReg2__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 GetIdParamReg2__5VTimeFv(struct VTime *const);




extern void SetIdParamReg3__5VTimeFUi(struct VTime *const, UWORD16);




extern UWORD16 GetIdParamReg3__5VTimeFv(struct VTime *const);
#line 376
extern void InitDbAccess__5VTimeFUi19e_TYPE_OF_DB_TARGETN51(struct VTime *const, UWORD16, e_TYPE_OF_DB_TARGET, UWORD16, UWORD16, UWORD16, UWORD16, UWORD16);
#line 345
extern void SetStopMonitoring__5VTimeFi(struct VTime *const, e_BOOL);




extern e_BOOL IsStopMonitoring__5VTimeFv(struct VTime *const);
#line 404
extern void StopMonitoringMode__5VTimeFv(struct VTime *const);
#line 427
extern void StartMonitoringMode__5VTimeFv(struct VTime *const);
#line 838
extern void ConfirmModifValue__5VTimeFi(struct VTime *const, e_BOOL);
#line 512
extern void Refresh__5VTimeFv(struct VTime *const);
#line 547
extern void Show__5VTimeFv(struct VTime *const);
#line 591
extern void Hide__5VTimeFv(struct VTime *const);
#line 620
extern void Blink__5VTimeFi(struct VTime *const, e_BOOL);
#line 649
extern void IncreaseValue__5VTimeFv(struct VTime *const);
#line 695
extern void DecreaseValue__5VTimeFv(struct VTime *const);
#line 742
extern e_BOOL IncreaseValueOk__5VTimeFPUi(struct VTime *const, UWORD16 *);
#line 773
extern e_BOOL DecreaseValueOk__5VTimeFPUi(struct VTime *const, UWORD16 *);
#line 805
extern void StartModifMode__5VTimeFv(struct VTime *const);
#line 909
extern void ModifNextValue__5VTimeFv(struct VTime *const);
#line 93
extern void SetVisible__5VTimeFi(struct VTime *const, e_BOOL);
#line 59 "..\\..\\SRC\\HMI\\HMI_DataBaseAccess.hpp"
extern e_BOOL IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);



extern e_BOOL DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);



extern e_BOOL ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);
#line 75
extern e_BOOL WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);
#line 501 "..\\..\\SRC\\HMI\\HMI_Message.hpp"
extern const UBYTE *const huge cMSG_Am[19];
extern const UBYTE *const huge cMSG_Pm[19]; extern struct __T50324712 __vtbl__5VTime[42]; struct __T50324712 __vtbl__5VTime[42] = {{((short)0),((short)0),((void (*)())0)},{((short)0),((short)0),((void (*)())Lock__5LabelFi)},{((short)0),((short)0),((void (*)())WinFocus__5LabelFv)},{((short)0),((short
#line 502
)0),((void (*)())LoseFocus__5LabelFv)},{((short)0),((short)0),((void (*)())StartModifMode__5VTimeFv)},{((short)0),((short)0),((void (*)())StopModifMode__14EditableObjectFv)},{((short)0),((short)0),((void (*)())CancelModifMode__14EditableObjectFv)},{((short)0),((short)0),((void (*)())
#line 502
IncreaseValue__5VTimeFv)},{((short)0),((short)0),((void (*)())DecreaseValue__5VTimeFv)},{((short)0),((short)0),((void (*)())ModifNextValue__5VTimeFv)},{((short)0),((short)0),((void (*)())SetLine__13DisplayObjectFUi)},{((short)0),((short)0),((void (*)())SetCol__13DisplayObjectFUi)},{((short)0),((
#line 502
short)0),((void (*)())GetFullValue__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())SetVisible__5VTimeFi)},{((short)0),((short)0),((void (*)())SetForcedVisible__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())Refresh__5VTimeFv)},{((short)0),((short)0),((void (*)())Show__5VTimeFv)},{(
#line 502
(short)0),((short)0),((void (*)())Hide__5VTimeFv)},{((short)0),((short)0),((void (*)())Blink__5VTimeFi)},{((short)0),((short)0),((void (*)())RefreshLanguage__5LabelFv)},{((short)0),((short)0),((void (*)())StopMonitoringMode__5VTimeFv)},{((short)0),((short)0),((void (*)())
#line 502
FreezeMonitoringMode__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())StartMonitoringMode__5VTimeFv)},{((short)0),((short)0),((void (*)())FreezeMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())StartMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0
#line 502
),((short)0),((void (*)())StopMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())SetLanguage__13DisplayObjectFUi)},{((short)0),((short)0),((void (*)())GetLanguage__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())SetEndOfInit__13DisplayObjectFi)},{((short)0),
#line 502
((short)0),((void (*)())GetEndOfInit__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetName__5LabelFv)},{((short)0),((short)0),((void (*)())GetStringValue1__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetStringValue2__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())
#line 502
GetUnit1__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetUnit2__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetEndCol__5LabelFv)},{((short)0),((short)0),((void (*)())SetLoupe__5LabelFP5Loupe)},{((short)0),((short)0),((void (*)())GetLoupe__5LabelFv)},{((short)0),((short)0),((
#line 502
void (*)())SetInvertVideo__5LabelFi)},{((short)0),((short)0),((void (*)())ConfirmModifValue__5VTimeFi)},{((short)0),((short)0),((void (*)())IncreaseValueOk__5VTimeFPUi)},{((short)0),((short)0),((void (*)())DecreaseValueOk__5VTimeFPUi)}};
#line 42 "..\\..\\SRC\\HMI\\HMI_VTime.cpp"
struct VTime *__ct__5VTimeFv( struct VTime *this)
{  if ((this != ((struct VTime *)0)) || ((this = ((struct VTime *)(__nw__FUi(370U)))) != ((struct VTime *)0))) { __ct__14EditableObjectFv(((struct EditableObject *)this)); ((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))))).__vptr) = __vtbl__5VTime; 
#line 43
__ct__9TextFieldFv((&this->FSep)); __ct__9TextFieldFv((&this->FSepHours)); __ct__9TextFieldFv((&this->FSepMin)); __ct__9TextFieldFv((&this->FSuffixe)); __ct__10ValueFieldFv((&this->FHours)); __ct__10ValueFieldFv((&this->FMin)); __ct__10ValueFieldFv((&this->FSec));
(this->Suffixe) = AM__5VTime;

SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->FSep))), ((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))));
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours))), ((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))));
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))), ((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))));
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->FHours))), ((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))));
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->FMin))), ((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))));
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->FSec))), ((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))));
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))), ((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))));


SetVTimeFormat__5VTimeF14e_VTIME_FORMAT(this, VTIME_24H_FORMAT);
#line 62
SetSep__5VTimeFPUc(this, ((UBYTE *)":"));
SetSepHours__5VTimeFPUc(this, ((UBYTE *)":"));
SetTextSuffixe__5VTimeFPUc(this, ((UBYTE *)(cMSG_Am[0])));
SetSecVisible__5VTimeFi(this, 1);
SetColSep__5VTimeFUi(this, 40U);

Init__10ValueFieldFUiN21iN21N24((&this->FHours), 0U, 48U, 4U, 0, 0U, 2U, 1, 0);
Init__9TextFieldFiUiT2T1PUc((&this->FSepHours), 0, ((getColHours__5VTimeFv(this)) + 24U), 4U, 0, ((UBYTE *)":"));
Init__10ValueFieldFUiN21iN21N24((&this->FMin), 0U, ((getColHours__5VTimeFv(this)) + 32U), 4U, 0, 0U, 2U, 1, 0);
Init__9TextFieldFiUiT2T1PUc((&this->FSepMin), 0, ((getColHours__5VTimeFv(this)) + 56U), 4U, 0, ((UBYTE *)":"));
Init__10ValueFieldFUiN21iN21N24((&this->FSec), 0U, ((getColHours__5VTimeFv(this)) + 64U), 4U, 0, 0U, 2U, 1, 0);
if (((int)(GetVTimeFormat__5VTimeFv(this))) == 1) {
Init__9TextFieldFiUiT2T1PUc((&this->FSuffixe), 0, ((getColHours__5VTimeFv(this)) + 88U), 1U, 0, ((UBYTE *)(cMSG_Am[0]))); }

Format__5VTimeFv(this);

SetDbTarget__10MenuObjectF19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))), ADJUST);
SetIdParam2__5VTimeFUi(this, 999U);
SetIdParam3__5VTimeFUi(this, 999U);
SetIdParamReg1__5VTimeFUi(this, 999U);
SetIdParamReg2__5VTimeFUi(this, 999U);
SetIdParamReg3__5VTimeFUi(this, 999U);

(this->StopMonitoring) = 0;

(this->ForcedSuffixUpdate) = 1; } return this;
}
#line 443
void Format__5VTimeFv( struct VTime *const this)
{ auto struct __T50324712 *__T50431040;

if ((GetFont__11FieldObjectFv(((struct FieldObject *)(&this->FHours)))) == 1U)
{ auto struct __T50324712 *__T50425320;
(__T50425320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50425320->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep)))) + ((
#line 448
__T50425320->d)))), ((getColHours__5VTimeFv(this)) + 16U)));
(__T50425320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50425320->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->
#line 449
FSepHours)))) + ((__T50425320->d)))), ((getColHours__5VTimeFv(this)) + 16U)));
(__T50425320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50425320->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin)))) + ((
#line 450
__T50425320->d)))), ((getColHours__5VTimeFv(this)) + 21U)));
(__T50425320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50425320->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin)))
#line 451
) + ((__T50425320->d)))), ((getColHours__5VTimeFv(this)) + 37U)));
(__T50425320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50425320->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec)))) + ((
#line 452
__T50425320->d)))), ((getColHours__5VTimeFv(this)) + 42U)));
(__T50425320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50425320->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe)
#line 453
))) + ((__T50425320->d)))), ((getColHours__5VTimeFv(this)) + 58U)));
}

else  {
(__T50431040 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50431040->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->
#line 457
FSepHours)))) + ((__T50431040->d)))), ((getColHours__5VTimeFv(this)) + 24U)));
(__T50431040 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50431040->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin)))) + ((
#line 458
__T50431040->d)))), ((getColHours__5VTimeFv(this)) + 32U)));
(__T50431040 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50431040->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin)))
#line 459
) + ((__T50431040->d)))), ((getColHours__5VTimeFv(this)) + 56U)));
(__T50431040 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50431040->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec)))) + ((
#line 460
__T50431040->d)))), ((getColHours__5VTimeFv(this)) + 64U)));
(__T50431040 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50431040->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe)
#line 461
))) + ((__T50431040->d)))), ((getColHours__5VTimeFv(this)) + 88U)));
} return;
}
#line 105
void SetVTimeFormat__5VTimeF14e_VTIME_FORMAT( struct VTime *const this,  e_VTIME_FORMAT _format)
{
(this->VTimeFormat) = _format; return;
}

e_VTIME_FORMAT GetVTimeFormat__5VTimeFv( struct VTime *const this)
{
return (this->VTimeFormat);
}
#line 165
UBYTE *GetSep__5VTimeFv( struct VTime *const this)
{
return GetText__9TextFieldFv((&this->FSep));
}

void SetSep__5VTimeFPUc( struct VTime *const this,  UBYTE *_Sep)
{
SetText__9TextFieldFPUc((&this->FSep), _Sep); return;
}
#line 191
UBYTE *GetTextSuffixe__5VTimeFv( struct VTime *const this)
{
return GetText__9TextFieldFv((&this->FSuffixe));
}

void SetTextSuffixe__5VTimeFPUc( struct VTime *const this,  UBYTE *_Suffixe)
{
SetText__9TextFieldFPUc((&this->FSuffixe), _Suffixe); return;
}
#line 175
UBYTE *GetSepHours__5VTimeFv( struct VTime *const this)
{
return GetText__9TextFieldFv((&this->FSepHours));
}

void SetSepHours__5VTimeFPUc( struct VTime *const this,  UBYTE *_SepHours)
{
SetText__9TextFieldFPUc((&this->FSepHours), _SepHours);
SetText__9TextFieldFPUc((&this->FSepMin), _SepHours); return;
}

e_BOOL GetSecVisible__5VTimeFv( struct VTime *const this)
{
return (this->SecVisible);
}
#line 477
void SetSecVisible__5VTimeFi( struct VTime *const this,  e_BOOL _SecVisible)
{ auto struct __T50324712 *__T50439832; auto struct __T50324712 *__T50441616;
(this->SecVisible) = _SecVisible;



if ((this->SecVisible))
{ auto struct __T50324712 *__T50437936;
(__T50437936 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 16)) , (((void (*)(struct TextField *const))((__T50437936->f)))(((struct TextField *)(((char *)(&this->FSepMin)) + ((__T50437936->d))))));
(__T50437936 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 16)) , (((void (*)(struct ValueField *const))((__T50437936->f)))(((struct ValueField *)(((char *)(&this->FSec)) + ((__T50437936->d))))));
}

else  {
(__T50439832 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50439832->f)))(((struct TextField *)(((char *)(&this->FSepMin)) + ((__T50439832->d))))));
(__T50439832 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50439832->f)))(((struct ValueField *)(((char *)(&this->FSec)) + ((__T50439832->d))))));
}
if (((int)(GetVTimeFormat__5VTimeFv(this))) == 1)
{

(__T50441616 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 16)) , (((void (*)(struct TextField *const))((__T50441616->f)))(((struct TextField *)(((char *)(&this->FSuffixe)) + ((__T50441616->d))))));
} return;
}
#line 201
UWORD16 GetHours__5VTimeFv( struct VTime *const this)
{
auto UWORD16 _Hours;
_Hours = (GetValue__10ValueFieldFv((&this->FHours)));

if (((int)(GetVTimeFormat__5VTimeFv(this))) == 1) {

if (((int)((this->Suffixe))) == 1) {
if (_Hours != 12U) {
_Hours = (_Hours + 12U);
}
}
else  {
if (_Hours == 12U) {
_Hours = 0U;
}
}
}

return _Hours;
}

void SetHours__5VTimeFUi( struct VTime *const this,  UWORD16 _Hours)
{ auto struct __T50324712 *__T50393280;
auto UWORD16 Val;

auto __Q2_5VTime8e_PERIOD TempSuffixe;
#line 226
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 0U, CONFIG);


if (((int)(GetVTimeFormat__5VTimeFv(this))) == 1)
{
if (_Hours >= 12U)
{
if (_Hours != 12U) {
_Hours = (_Hours - 12U); }

TempSuffixe = PM__5VTime;

if ((((int)TempSuffixe) != ((int)((this->Suffixe)))) || ((this->ForcedSuffixUpdate)))
{
SetTextSuffixe__5VTimeFPUc(this, ((UBYTE *)(cMSG_Pm[Val])));
(this->Suffixe) = TempSuffixe;
}
}

else  {
if (_Hours == 0U) {
_Hours = (_Hours + 12U); }

TempSuffixe = AM__5VTime;

if ((((int)TempSuffixe) != ((int)((this->Suffixe)))) || ((this->ForcedSuffixUpdate)))
{
SetTextSuffixe__5VTimeFPUc(this, ((UBYTE *)(cMSG_Am[Val])));
(this->Suffixe) = TempSuffixe;
}
}

if ((this->ForcedSuffixUpdate)) {
(this->ForcedSuffixUpdate) = 0; }
}
(__T50393280 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 36)) , (((void (*)(struct ValueField *const, UWORD16))((__T50393280->f)))(((struct ValueField *)(((char *)(&this->FHours)) + ((__T50393280->d)))), _Hours)); return;

}

UWORD16 GetMin__5VTimeFv( struct VTime *const this)
{
return GetValue__10ValueFieldFv((&this->FMin));
}

void SetMin__5VTimeFUi( struct VTime *const this,  UWORD16 _Min)
{ auto struct __T50324712 *__T50395364;
(__T50395364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 36)) , (((void (*)(struct ValueField *const, UWORD16))((__T50395364->f)))(((struct ValueField *)(((char *)(&this->FMin)) + ((__T50395364->d)))), _Min)); return;
}

UWORD16 GetSec__5VTimeFv( struct VTime *const this)
{
return GetValue__10ValueFieldFv((&this->FSec));
}

void SetSec__5VTimeFUi( struct VTime *const this,  UWORD16 _Sec)
{ auto struct __T50324712 *__T50397448;
(__T50397448 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 36)) , (((void (*)(struct ValueField *const, UWORD16))((__T50397448->f)))(((struct ValueField *)(((char *)(&this->FSec)) + ((__T50397448->d)))), _Sec)); return;
}

UWORD16 getColSep__5VTimeFv( struct VTime *const this)
{
return GetCol__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(&this->FSep))));
}

void SetColSep__5VTimeFUi( struct VTime *const this,  UWORD16 _ColSep)
{ auto struct __T50324712 *__T50399724;
(__T50399724 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50399724->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep)))) + ((
#line 292
__T50399724->d)))), _ColSep)); return;
}

UWORD16 getColHours__5VTimeFv( struct VTime *const this)
{
return GetCol__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(&this->FHours))));
}

void SetColHours__5VTimeFUi( struct VTime *const this,  UWORD16 _ColHours)
{ auto struct __T50324712 *__T50402192;
(__T50402192 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50402192->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours)))) 
#line 302
+ ((__T50402192->d)))), _ColHours));
Format__5VTimeFv(this); return;
}

void SetFontHours__5VTimeFUi( struct VTime *const this,  UWORD16 _Font)
{
SetFont__11FieldObjectFUi(((struct FieldObject *)(&this->FHours)), _Font);
SetFont__11FieldObjectFUi(((struct FieldObject *)(&this->FSepHours)), _Font);
SetFont__11FieldObjectFUi(((struct FieldObject *)(&this->FMin)), _Font);
SetFont__11FieldObjectFUi(((struct FieldObject *)(&this->FSepMin)), _Font);
SetFont__11FieldObjectFUi(((struct FieldObject *)(&this->FSec)), _Font);
if (_Font > 2U)
{
SetFont__11FieldObjectFUi(((struct FieldObject *)(&this->FSuffixe)), 1U);
}

else  {
SetFont__11FieldObjectFUi(((struct FieldObject *)(&this->FSuffixe)), _Font);
} return;
}

e_BOOL IsSecVisible__5VTimeFv( struct VTime *const this)
{
if (((this->SecVisible)) == 1)
{
return 1;
}

else  {
return 0;
}
}

UWORD16 GetValueState__5VTimeFv( struct VTime *const this)
{
return (this->ValueState);
}

void SetValueState__5VTimeFUi( struct VTime *const this,  UWORD16 _ValueState)
{
(this->ValueState) = _ValueState; return;
}
#line 115
void SetIdParam2__5VTimeFUi( struct VTime *const this,  UWORD16 _IdParam2)
{
(this->IdParam2) = _IdParam2; return;
}

UWORD16 GetIdParam2__5VTimeFv( struct VTime *const this)
{
return (this->IdParam2);
}

void SetIdParam3__5VTimeFUi( struct VTime *const this,  UWORD16 _IdParam3)
{
(this->IdParam3) = _IdParam3; return;
}

UWORD16 GetIdParam3__5VTimeFv( struct VTime *const this)
{
return (this->IdParam3);
}

void SetIdParamReg1__5VTimeFUi( struct VTime *const this,  UWORD16 _IdParamReg1)
{
(this->IdParamReg1) = _IdParamReg1; return;
}

UWORD16 GetIdParamReg1__5VTimeFv( struct VTime *const this)
{
return (this->IdParamReg1);
}

void SetIdParamReg2__5VTimeFUi( struct VTime *const this,  UWORD16 _IdParamReg2)
{
(this->IdParamReg2) = _IdParamReg2; return;
}

UWORD16 GetIdParamReg2__5VTimeFv( struct VTime *const this)
{
return (this->IdParamReg2);
}

void SetIdParamReg3__5VTimeFUi( struct VTime *const this,  UWORD16 _IdParamReg3)
{
(this->IdParamReg3) = _IdParamReg3; return;
}

UWORD16 GetIdParamReg3__5VTimeFv( struct VTime *const this)
{
return (this->IdParamReg3);
}
#line 376
void InitDbAccess__5VTimeFUi19e_TYPE_OF_DB_TARGETN51( struct VTime *const this,  UWORD16 _IdParamHours, 
e_TYPE_OF_DB_TARGET _DbTarget, 
UWORD16 _IdParamMin, 
UWORD16 _IdParamSec, 
UWORD16 _IdParamRegHours, 
UWORD16 _IdParamRegMin, 
UWORD16 _IdParamRegSec)
{
SetIdParam__10MenuObjectFUi(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))), _IdParamHours);
SetDbTarget__10MenuObjectF19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))), _DbTarget);
SetIdParam2__5VTimeFUi(this, _IdParamMin);
SetIdParam3__5VTimeFUi(this, _IdParamSec);
SetIdParamReg1__5VTimeFUi(this, _IdParamRegHours);
SetIdParamReg2__5VTimeFUi(this, _IdParamRegMin);
SetIdParamReg3__5VTimeFUi(this, _IdParamRegSec); return;
}
#line 345
void SetStopMonitoring__5VTimeFi( struct VTime *const this,  e_BOOL Flag)
{
(this->StopMonitoring) = Flag; return;
}

e_BOOL IsStopMonitoring__5VTimeFv( struct VTime *const this)
{
return (e_BOOL)(((this->StopMonitoring)) == 1);
}
#line 404
void StopMonitoringMode__5VTimeFv( struct VTime *const this)
{ auto struct __T50324712 *__T50413284;
SetStopMonitoring__5VTimeFi(this, 1);
(__T50413284 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50413284->f)))(((struct ValueField *)(((char *)(&this->FHours)) + ((__T50413284->d))))));
(__T50413284 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50413284->f)))(((struct TextField *)(((char *)(&this->FSepHours)) + ((__T50413284->d))))));
(__T50413284 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50413284->f)))(((struct TextField *)(((char *)(&this->FSepMin)) + ((__T50413284->d))))));
(__T50413284 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50413284->f)))(((struct TextField *)(((char *)(&this->FSuffixe)) + ((__T50413284->d))))));
(__T50413284 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50413284->f)))(((struct ValueField *)(((char *)(&this->FHours)) + ((__T50413284->d))))));
(__T50413284 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50413284->f)))(((struct ValueField *)(((char *)(&this->FMin)) + ((__T50413284->d))))));
(__T50413284 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50413284->f)))(((struct ValueField *)(((char *)(&this->FSec)) + ((__T50413284->d)))))); return;
}
#line 427
void StartMonitoringMode__5VTimeFv( struct VTime *const this)
{
SetStopMonitoring__5VTimeFi(this, 0); return;
}
#line 838
void ConfirmModifValue__5VTimeFi( struct VTime *const this,  e_BOOL _Confirm)
{
auto e_BOOL ValidState = 1;


if (_Confirm)
{
auto UWORD16 Value;
switch (GetValueState__5VTimeFv(this)) {

case 1U: Value = (GetHours__5VTimeFv(this));
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), (GetIdParamReg1__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));


break;

case 2U: Value = (GetMin__5VTimeFv(this));
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), (GetIdParamReg2__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));


break;

case 3U: Value = (GetSec__5VTimeFv(this));
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), (GetIdParamReg3__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));



RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))), 1);
break;

default: Value = 0U;
ValidState = 0;
break;}

if (ValidState)
{

ShortBipRequest__5ToolsSFv();
}
}


else  {
switch (GetValueState__5VTimeFv(this)) {

case 1U: SetHours__5VTimeFUi(this, (GetValueTemp__14EditableObjectFv(((struct EditableObject *)this))));
break;
case 2U: SetMin__5VTimeFUi(this, (GetValueTemp__14EditableObjectFv(((struct EditableObject *)this))));
break;
case 3U: SetSec__5VTimeFUi(this, (GetValueTemp__14EditableObjectFv(((struct EditableObject *)this))));
break;
default: break;}


RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))), 1);
} return;
}
#line 512
void Refresh__5VTimeFv( struct VTime *const this)
{
if (!(IsStopMonitoring__5VTimeFv(this)))
{

if ((GetIdParam__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))) != 999U)
{
auto UWORD16 Value;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), (GetIdParam__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct 
#line 521
EditableObject *)this)))))));
SetHours__5VTimeFUi(this, Value);


ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), (GetIdParam2__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));
SetMin__5VTimeFUi(this, Value);


ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), (GetIdParam3__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));
SetSec__5VTimeFUi(this, Value);
}
} return;
}
#line 547
void Show__5VTimeFv( struct VTime *const this)
{ auto struct __T50324712 *__T50452952; auto struct __T50324712 *__T50454736;

Format__5VTimeFv(this);

Show__5LabelFv(((struct Label *)((struct EditableObject *)this)));

if (!(IsStopMonitoring__5VTimeFv(this)))
{ auto struct __T50324712 *__T50449304;

(__T50449304 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep))))).__vptr)) + 16)) , (((void (*)(struct TextField *const))((__T50449304->f)))(((struct TextField *)(((char *)(&this->FSep)) + ((__T50449304->d))))));

(__T50449304 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 16)) , (((void (*)(struct ValueField *const))((__T50449304->f)))(((struct ValueField *)(((char *)(&this->FHours)) + ((__T50449304->d))))));

(__T50449304 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours))))).__vptr)) + 16)) , (((void (*)(struct TextField *const))((__T50449304->f)))(((struct TextField *)(((char *)(&this->FSepHours)) + ((__T50449304->d))))));

(__T50449304 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 16)) , (((void (*)(struct ValueField *const))((__T50449304->f)))(((struct ValueField *)(((char *)(&this->FMin)) + ((__T50449304->d))))));


if (IsSecVisible__5VTimeFv(this))
{
(__T50452952 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 16)) , (((void (*)(struct TextField *const))((__T50452952->f)))(((struct TextField *)(((char *)(&this->FSepMin)) + ((__T50452952->d))))));
(__T50452952 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 16)) , (((void (*)(struct ValueField *const))((__T50452952->f)))(((struct ValueField *)(((char *)(&this->FSec)) + ((__T50452952->d))))));
}
if (((int)(GetVTimeFormat__5VTimeFv(this))) == 1)
{

(__T50454736 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 16)) , (((void (*)(struct TextField *const))((__T50454736->f)))(((struct TextField *)(((char *)(&this->FSuffixe)) + ((__T50454736->d))))));
}
} return;
}
#line 591
void Hide__5VTimeFv( struct VTime *const this)
{ auto struct __T50324712 *__T50457928;

Hide__5LabelFv(((struct Label *)((struct EditableObject *)this)));
(__T50457928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50457928->f)))(((struct TextField *)(((char *)(&this->FSep)) + ((__T50457928->d))))));
(__T50457928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50457928->f)))(((struct TextField *)(((char *)(&this->FSepHours)) + ((__T50457928->d))))));
(__T50457928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50457928->f)))(((struct TextField *)(((char *)(&this->FSepMin)) + ((__T50457928->d))))));
(__T50457928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50457928->f)))(((struct ValueField *)(((char *)(&this->FHours)) + ((__T50457928->d))))));
(__T50457928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50457928->f)))(((struct ValueField *)(((char *)(&this->FMin)) + ((__T50457928->d))))));
(__T50457928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 17)) , (((void (*)(struct ValueField *const))((__T50457928->f)))(((struct ValueField *)(((char *)(&this->FSec)) + ((__T50457928->d))))));

if (((int)(GetVTimeFormat__5VTimeFv(this))) == 1)
{ auto struct __T50324712 *__T50463152;
(__T50463152 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 17)) , (((void (*)(struct TextField *const))((__T50463152->f)))(((struct TextField *)(((char *)(&this->FSuffixe)) + ((__T50463152->d))))));
} return;
}
#line 620
void Blink__5VTimeFi( struct VTime *const this,  e_BOOL _Actif)
{ auto struct __T50324712 *__T50467432;

switch (GetValueState__5VTimeFv(this)) { auto struct __T50324712 *__T50466396;

case 1U: (__T50466396 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 18)) , (((void (*)(struct ValueField *const, e_BOOL))((__T50466396->f)))(((struct ValueField *)(((char *)(&this->FHours)) + ((__T50466396->d)))), _Actif));
if (((int)(GetVTimeFormat__5VTimeFv(this))) == 1) {
(__T50467432 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 18)) , (((void (*)(struct TextField *const, e_BOOL))((__T50467432->f)))(((struct TextField *)(((char *)(&this->FSuffixe)) + ((__T50467432->d)))), _Actif)); }
break;
case 2U: (__T50466396 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 18)) , (((void (*)(struct ValueField *const, e_BOOL))((__T50466396->f)))(((struct ValueField *)(((char *)(&this->FMin)) + ((__T50466396->d)))), _Actif));
break;
case 3U: (__T50466396 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 18)) , (((void (*)(struct ValueField *const, e_BOOL))((__T50466396->f)))(((struct ValueField *)(((char *)(&this->FSec)) + ((__T50466396->d)))), _Actif));
break;
default: break;} return;

}
#line 649
void IncreaseValue__5VTimeFv( struct VTime *const this)
{ auto struct __T50324712 *__T50473080;
auto UWORD16 Value;


switch (GetValueState__5VTimeFv(this)) {

case 1U: Value = (GetHours__5VTimeFv(this));
break;
case 2U: Value = (GetMin__5VTimeFv(this));
break;
case 3U: Value = (GetSec__5VTimeFv(this));
break;
default: Value = 0U;
break;}




if ((__T50473080 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))))).__vptr)) + 40)) , (((e_BOOL (*)(struct VTime *const, UWORD16 *))((__T50473080->f)))(((struct VTime *)(((char *)this) + ((__T50473080->d)))), (&Value))))
{
switch (GetValueState__5VTimeFv(this)) {

case 1U: SetHours__5VTimeFUi(this, Value);
break;
case 2U: SetMin__5VTimeFUi(this, Value);
break;
case 3U: SetSec__5VTimeFUi(this, Value);
break;
default: break;}

} return;
}
#line 695
void DecreaseValue__5VTimeFv( struct VTime *const this)
{ auto struct __T50324712 *__T50476976;
auto UWORD16 Value;


switch (GetValueState__5VTimeFv(this)) {

case 1U: Value = (GetHours__5VTimeFv(this));
break;
case 2U: Value = (GetMin__5VTimeFv(this));
break;
case 3U: Value = (GetSec__5VTimeFv(this));
break;
default: Value = 0U;
break;}




if ((__T50476976 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))))).__vptr)) + 41)) , (((e_BOOL (*)(struct VTime *const, UWORD16 *))((__T50476976->f)))(((struct VTime *)(((char *)this) + ((__T50476976->d)))), (&Value))))
{
switch (GetValueState__5VTimeFv(this)) {

case 1U: SetHours__5VTimeFUi(this, Value);
break;
case 2U: SetMin__5VTimeFUi(this, Value);
break;
case 3U: SetSec__5VTimeFUi(this, Value);
break;
default: break;}

} return;
}
#line 742
e_BOOL IncreaseValueOk__5VTimeFPUi( struct VTime *const this,  UWORD16 *_Val)
{

switch (GetValueState__5VTimeFv(this)) {

case 1U: return IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(_Val, (GetIdParamReg1__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));


case 2U: return IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(_Val, (GetIdParamReg2__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));


case 3U: return IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(_Val, (GetIdParamReg3__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));


default: return 0;}

}
#line 773
e_BOOL DecreaseValueOk__5VTimeFPUi( struct VTime *const this,  UWORD16 *_Val)
{

switch (GetValueState__5VTimeFv(this)) {

case 1U: return DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(_Val, (GetIdParamReg1__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));



case 2U: return DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(_Val, (GetIdParamReg2__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));



case 3U: return DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(_Val, (GetIdParamReg3__5VTimeFv(this)), (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this)))))));


default: return 0;}

}
#line 805
void StartModifMode__5VTimeFv( struct VTime *const this)
{
#line 817
auto UWORD16 Value;
#line 808
RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))), 0);

StartModifMode__5LabelFv(((struct Label *)((struct EditableObject *)this)));

SetValueState__5VTimeFUi(this, 1U);

SetValueTemp__14EditableObjectFUi(((struct EditableObject *)this), (GetHours__5VTimeFv(this)));



Value = (GetSec__5VTimeFv(this));
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 7U, RTC);
Value = (GetMin__5VTimeFv(this));
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 8U, RTC);
Value = (GetHours__5VTimeFv(this));
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 9U, RTC); return;
}
#line 909
void ModifNextValue__5VTimeFv( struct VTime *const this)
{ auto struct __T50324712 *__T50605580;



auto UWORD16 State;
#line 912
(__T50605580 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))))).__vptr)) + 39)) , (((void (*)(struct VTime *const, e_BOOL))((__T50605580->f)))(((struct VTime *)(((char *)this) + ((__T50605580->d)))), 1));

State = (GetValueState__5VTimeFv(this));

if (State < 3U)
{
SetValueState__5VTimeFUi(this, (++State));
}

switch (GetValueState__5VTimeFv(this)) {

case 2U: SetValueTemp__14EditableObjectFUi(((struct EditableObject *)this), (GetMin__5VTimeFv(this)));
break;
case 3U: SetValueTemp__14EditableObjectFUi(((struct EditableObject *)this), (GetSec__5VTimeFv(this)));
break;
default: break;} return;

}
#line 93
void SetVisible__5VTimeFi( struct VTime *const this,  e_BOOL V)
{ auto struct __T50324712 *__T50368780;
SetVisible__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)this))), V);
(__T50368780 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50368780->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSep)))) + ((
#line 96
__T50368780->d)))), V));
(__T50368780 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50368780->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepHours
#line 97
)))) + ((__T50368780->d)))), V));
(__T50368780 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50368780->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSepMin)))) 
#line 98
+ ((__T50368780->d)))), V));
(__T50368780 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50368780->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSuffixe))
#line 99
)) + ((__T50368780->d)))), V));
(__T50368780 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50368780->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FHours)))) + 
#line 100
((__T50368780->d)))), V));
(__T50368780 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50368780->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FMin)))) + ((
#line 101
__T50368780->d)))), V));
(__T50368780 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50368780->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->FSec)))) + ((
#line 102
__T50368780->d)))), V)); return;
}
