// v_2.45.2, Mon Mar 30 17:40:43 2020
#line 1 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.cpp"
struct __T51878692;
#line 37 "..\\..\\SRC\\GENERAL\\enum.h"
enum e_SYMBOL {
LOGO_LEGENDAIR,
KEY_WHITE,
BAT,
BLACK_SQUARES,
FREE_SQUARE,
KEY,
LOS,
BLACK_LOS,
LESS_OR_MORE,
RAMPE1,
RAMPE2,
RISETIME1,
RISETIME2,
RISETIME3,
RISETIME4,
TRIGGER,
TRIGGERINV,
VENTIL,
LOCKS,
PAUSE,
VALVE_BLACK,
VALVE_WHITE,
CADRE_WHITE_BG,
CADRE_WHITE_HD,
CADRE_BLACK_BG,
CADRE_BLACK_HD,
TRIANGLE_BLACK,
TRIANGLE_WHITE,
FLECHE_GRAPH_HAUT,
FLECHE_GRAPH_DROITE,
CADRE_WHITE_HG,
CADRE_WHITE_BD,
CADRE_BLACK_HG,
CADRE_BLACK_BD,
BAT_INV,
CADRE_BLACK_BGw,
CADRE_BLACK_BDw,
CADRE_BLACK_HGw,
CADRE_BLACK_HDw,
CADRE_WHITE_HGw,
CADRE_WHITE_HDw,
CADRE_WHITE_BDw,
CADRE_WHITE_BGw,
BELL_BLACK,
ALARM_TRIANGLE_BLACK,
EQUAL,
HEART,
CADRE_WHITE_ALARM_HGw,
CADRE_WHITE_ALARM_HDw,
CADRE_WHITE_ALARM_BDw,
CADRE_WHITE_ALARM_BGw,
HEART_INVERSE_VIDEO,
ALARM_TRIANGLE_BLACK_DOT,
RAMPE3,
LOGO_M2,
LOGO_XL2,
LOGO_S2,
LOGO_XL2_US,


CHART_VERSION,
TRADEMARK,
COMPANY,
WHITE_SQUARE,
WHITE_LOCK,
NO};
#line 112
enum e_HMI_LANG {
HMI_LANG_CHINESE,
HMI_LANG_DANISH,
HMI_LANG_GERMAN,
HMI_LANG_ENGLISH,
HMI_LANG_ENGLISH_US,
HMI_LANG_SPANISH,
HMI_LANG_FRENCH,
HMI_LANG_GREEK,
HMI_LANG_ITALIAN,
HMI_LANG_JAPANESE,
HMI_LANG_KOREAN,
HMI_LANG_DUTCH,
HMI_LANG_NORWISH,
HMI_LANG_POLISH,
HMI_LANG_PORTUGUESE,
HMI_LANG_RUSSIAN,
HMI_LANG_FINNISH,
HMI_LANG_SWEDISH,
HMI_LANG_TURKISH};
#line 137
enum e_TI {
TIMIN,
TIMAX,
end_of_e_TI};



enum e_ActiveModeState {
ACTIVATED,

EXHALATION,
INSPIRATION,

PSV_EXHALATION,
PSV_INSPIRATION,
CC_EXHALATION,
CC_INSPIRATION,

SIMV_VSIMV_EXHALATION,
SIMV_CAV_INSPIRATION,
SIMV_PSV_INSPIRATION,
SIMV_CV_EXHALATION,
SIMV_CV_INSPIRATION,
SIMV_VSIMV_EXHALATION_APNEA,
SIMV_CV_INSPIRATION_APNEA,

SIMV_PSIMV_EXHALATION,
SIMV_CAP_INSPIRATION,
SIMV_CP_EXHALATION,
SIMV_CP_INSPIRATION,
SIMV_PSIMV_EXHALATION_APNEA,
SIMV_CP_INSPIRATION_APNEA,

CPAP_EXHALATION,
CPAP_INSPIRATION};




enum e_DB_ALARM_LEVEL_PRIORITY {



TEC,



WP,



VLP,



LP,



MPR,



HP,



VHP,



UA,



IA};




enum e_ALARM_ERROR {
NO_ERR_AL,
ERR_AL_DISCONNECTION,
ERR_AL_HIGH_PRESSURE,
ERR_AL_APNEA,
ERR_AL_HIGH_VTI,
ERR_AL_LOW_VTI,
ERR_AL_LOW_VTE,
ERR_AL_HIGH_VTE,
ERR_AL_HIGH_VM,
ERR_AL_LOW_VM,
ERR_AL_LOW_RATE,
ERR_AL_HIGH_RATE,
ERR_AL_POWER_SUPPLY_LOSS,
ERR_AL_AC_POWER_FAIL,
ERR_AL_DC_POWER_FAIL,
ERR_AL_CHECK_SUPPLY,
ERR_AL_PERIODICAL_SIGNAL,
ERR_AL_LOW_BATTERY,
ERR_AL_END_OF_BATTERY,
ERR_AL_CHECK_BATTERY,
ERR_AL_NO_BATTERY,
ERR_AL_CHECK_BUZZER,
ERR_AL_BUZZER_BATTERY_LOW,
ERR_AL_BUZZER_BATTERY_FAILURE,
ERR_AL_BUZZER_BATTERY_CHARGE_FAILURE,
ERR_AL_TECHNICAL_PROBLEM,
ERR_AL_EEPROM_OUT_OF_RANGE,
ERR_AL_EEPROM_LOOSING_PARAM,
ERR_AL_NEW_VERSION,
ERR_AL_ERROR_VERSION,
ERR_AL_REVERSED_IE,
ERR_AL_CHECK_PRESSURE,
ERR_AL_CHECK_PROXIMAL,
ERR_AL_PROXI_DISCONNECTION,
ERR_AL_NO_PROXIMAL,
ERR_AL_NO_VALVE_DETECTION,
ERR_AL_CHECK_VALVE,
ERR_AL_CHECK_VOLUME,
ERR_AL_VALVE_LEAKAGE,
ERR_AL_CHECK_REMOTE_ALARM,
ERR_AL_UNKNOW_BATTERY,
ERR_AL_CHECK_BATTERY_CHARGE,
ERR_AL_COOLING_FAN,
ERR_AL_AMBIENT_TEMP,
ERR_AL_BAT_TEMP,
ERR_AL_FAILURE_24V,
ERR_AL_SUPPLY_MEASURE,
ERR_AL_TURBINE_OVERHEAT,
ERR_AL_OCCLUSION,
ERR_AL_CPU_REFERENCE,
ERR_AL_CONTROLLED_CYCLES,
ERR_AL_CHECK_VALVE_PRESSURE,
ERR_AL_CHECK_PIPE,
ERR_AL_LEAKAGE,
ERR_AL_CHECK_FIO2,
ERR_AL_LOW_FIO2,
ERR_AL_HIGH_FIO2,
ERR_AL_NO_FIO2_SENSOR,
ERR_AL_CHECK_O2_SUPPLY,
ERR_AL_MISSING_O2_SUPPLY,
ERR_AL_CHECK_O2,
ERR_AL_O2_LEAKAGE,
ERR_AL_BREATH_TIME_CYCLED,
ERR_AL_INSP_FLOW_FAILURE,
ERR_AL_LEAK_OCCLUSION,
ERR_AL_VOLUNTARY_STOP,
ERR_AL_NEEDED_FIO2_CALIB,
end_of_error_alarm_table};




enum e_DB_ALARMS_STATE {
ALARM_FALSE,
ALARM_DETECTED,
ALARM_TRUE,
ALARM_DISPLAYED,
ALARM_CANCELED,
end_of_alarms_state_table};




enum e_DB_ALARMS_INDICATION_STATE {
ALARM_FALSE_STATE,
ALARM_DETECTED_STATE,
ALARM_INHIBITED_STATE,
end_of_alarms_indication_state_table};
#line 311
enum e_DB_VERSION {
VERSION_NUMBER_0,
VERSION_NUMBER_1,
VERSION_NUMBER_2,
VERSION_NUMBER_3,
SERIAL_NUMBER_1,
SERIAL_NUMBER_2,
SERIAL_NUMBER_3,
SERIAL_NUMBER_4,
SERIAL_NUMBER_5,
SERIAL_NUMBER_6,
end_of_db_version_table};




enum e_DB_Trend {
DB_TREND_VENTIL_HOUR,
DB_TREND_VENTIL_MIN,
DB_TREND_AVG_VTI,
DB_TREND_AVG_VTE,
DB_TREND_AVG_VM,
DB_TREND_AVG_FR,
DB_TREND_LEAK_MODE,
DB_TREND_AVG_LEAK,
DB_TREND_AVG_PI,
DB_TREND_IA,
DB_TREND_APNEA,
DB_TREND_PERCENT_CONTROLLED,
DB_TREND_PERCENT_TRIGGERED,
DB_TREND_SAVE_RTC_DAY,
DB_TREND_SAVE_RTC_MONTH,
DB_TREND_SAVE_RTC_YEAR,
DB_TREND_SAVE_PC_HOUR,
DB_TREND_SAVE_PC_MIN,
DB_TREND_NB_APNEA,
DB_TREND_APNEA_TIME,
DB_TREND_NB_CYCLE_COUNTER_MSB,
DB_TREND_NB_CYCLE_COUNTER_LSB,
DB_TREND_NB_CYCLE_TRIGERRED_MSB,
DB_TREND_NB_CYCLE_TRIGERRED_LSB,
DB_TREND_NB_CYCLE_CONTROLLED_MSB,
DB_TREND_NB_CYCLE_CONTROLLED_LSB,
DB_TREND_VENTIL_REPORT_UPD,
DB_TREND_IHM_VENTIL_HOUR,
DB_TREND_IHM_VENTIL_MIN,
DB_TREND_IHM_AVG_VTI,
DB_TREND_IHM_AVG_VTE,
DB_TREND_IHM_AVG_VM,
DB_TREND_IHM_AVG_FR,
DB_TREND_IHM_LEAK_MODE,
DB_TREND_IHM_AVG_LEAK,
DB_TREND_IHM_AVG_PI,
DB_TREND_IHM_IA,
DB_TREND_IHM_APNEA,
DB_TREND_IHM_PERCENT_CONTROLLED,
DB_TREND_IHM_PERCENT_TRIGGERED,
DB_TREND_IHM_SAVE_RTC_DAY,
DB_TREND_IHM_SAVE_RTC_MONTH,
DB_TREND_IHM_SAVE_RTC_YEAR,
end_of_db_trend_table};




enum e_TYPE_OF_DB_TARGET {
ADJUST,
CONTROL,
COMPUTE,
VERSION,
CONFIG,
RTC,
ALARMS,
POWER_SUPPLY,
KEYBOARD,
USB,
TREND,
CURRENT,
REVISION,
end_of_type_of_db_target};




enum e_DATA_OPERATION {
READ,
WRITE,
DECREASE,
INCREASE,
MIN,
MAX,
STEP,
READ_INFO,
WRITE_INFO};




enum e_MODE_TYPES {
VOL,
PRES,
PSVT,
VSIMV,
PSIMV,
CPAP,
nb_of_mode};



enum e_TRIGGER_LEVELS {
TRIGGER_LEVEL_OFF,
TRIGGER_LEVEL_0P,
TRIGGER_LEVEL_1P,
TRIGGER_LEVEL_2,
TRIGGER_LEVEL_3,
TRIGGER_LEVEL_4,
TRIGGER_LEVEL_5,
nb_of_trigger_levels};



enum e_TEST_STATES {
TEST_STATE_NOT_RUN,
TEST_STATE_RUNNING,
TEST_STATE_ABORTED,
TEST_STATE_PASS,
TEST_STATE_FAIL,
nb_of_test_states};




enum e_VEN_SIMVCycle {
CAV_Cycle,
CV_Cycle,
PSV_Cycle,
CAP_Cycle,
CP_Cycle};




enum e_SupplyInfo {
NONE,
AC,
DC,
BATTERY};




enum e_RTC_OPERATION {
NO_REQUEST,
ADJUST_DATE,
ADJUST_HOUR};




enum e_BadEraseState {
ERASE_OK,
BAD_TOTAL_ERASE};




enum e_RampType {
RAMP_DECELERATED,
RAMP_RECTANGLE,
RAMP_SINUS,
nb_of_ramps};
#line 487
enum e_VEN_ControllerType {
NO_CONTROL,
CONTROL_SPEED,
CONTROL_PRESSURE,
CONTROL_PRESSURE_VALVE,
CONTROL_PRESSURE_MAINT,
CONTROL_FLOW,
CONTROL_FLOW_EXH,
CONTROL_FLOW_O2,
CONTROL_FLOW_O2_MANUEL,
CONTROL_PRESSURE_O2};



enum e_VEN_Controller_Phase {
VEN_EXH_PLAT,
VEN_INSP_RISE,
VEN_INSP_PLAT,
VEN_EXH_FALL};




enum e_CalibrationCommand {
NO_CALIB,
SEGMENT_1,
SEGMENT_2,
SEGMENT_3,
SEGMENT_4,
SEGMENT_5,
SEGMENT_6,
SEGMENT_7,
SEGMENT_8,
TEST_LIMITES_REQUEST,
TEST_LIMITES_OK,
TEST_LIMITES_FALSE,
AUTOCALIB_SEG_1,
AUTOCALIB_SEG_2,
AUTOCALIB_SEG_3,
AUTOCALIB_SEG_4,
AUTOCALIB_SEG_5,
AUTOCALIB_SEG_6,
AUTOCALIB_SEG_7,
AUTOCALIB_SEG_8,
END_AUTOCALIB};




enum e_CalibrationType {
SYS_PATIENT_PRESS_CALIB,
SYS_VALVE_PRESS_CALIB,
SYS_INSP_FLOW_CALIB,
SYS_EXH_FLOW_CALIB,
SYS_EXH_FLOW_VERIF,
SYS_FIO2_CALIB,
SYS_O2_FLOW_CALIB,
SYS_O2_PRESSURE_CALIB,
end_of_sys_calib};
#line 552
enum e_VentilState {
VEN_EXHALATION = 251,
VEN_INSPIRATION_CONTROLED,
VEN_INSPIRATION_TRIGGERED,
VEN_VENTIL_DISABLE};



enum e_InspDetectType {
CONTROLLED,
TRIGGERED,
NO_INSP};




enum e_SYS_KeyboardInput {
KEY_NO_KEYBOARD,
KEY_CODE_MONIT_AND_DOWN,
KEY_CODE_MONIT_AND_UP,
KEY_CODE_UP_AND_DOWN,
Mark_Begin_Simple_Touch,
KEY_CODE_UP,
KEY_CODE_DOWN,
KEY_CODE_VALID,
KEY_CODE_MONIT,
KEY_CODE_STARTSTOPVENTIL,
KEY_CODE_100_O2,
KEY_CODE_NAVIG,
Number_of_key};
#line 587
enum e_TIM_TABLE_ID {
KEY_LONGPUSH_KEY_NO_KEYBOARD,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_UP,
KEY_LONGPUSH_KEY_CODE_UP_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_UP,
KEY_LONGPUSH_KEY_CODE_DOWN,
KEY_LONGPUSH_KEY_CODE_VALID,
KEY_LONGPUSH_KEY_CODE_MONIT,
KEY_LONGPUSH_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_longpush_decnt,
KEY_AUTOREPEAT_KEY_NO_KEYBOARD,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_UP,
KEY_AUTOREPEAT_KEY_CODE_UP_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_UP,
KEY_AUTOREPEAT_KEY_CODE_DOWN,
KEY_AUTOREPEAT_KEY_CODE_VALID,
KEY_AUTOREPEAT_KEY_CODE_MONIT,
KEY_AUTOREPEAT_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_autorepeat_decnt,
KEY_ANO_KEYB,
KEY_DELAY_BETWEEN_LONG_AUTOREPEAT,
KEY_DOUBLE_PULSE_TIME_OUT,
KEY_CONFIRM_VENT_STOP_TIMER,
VEN_TI_COUNT,
VEN_TE_COUNT,
VEN_SIMV_PERIOD_COUNT,
VEN_CONTROLLED_CYCLE_PERIOD_COUNT,
VEN_TIME_CALIB_FIO2,
VEN_VALVE_TIM,
VEN_VENTILATION_BIP,
VEN_END_COUNT0,
VEN_END_COUNT1,
VEN_END_COUNT2,
VEN_END_COUNT3,
VEN_END_COUNT4,
VEN_END_COUNT5,
SYS_TIME_OUT_SPEED,
SYS_1MINPAT,
SYS_TIME_OUT_CALIB,
SYS_TIME_AUTO_CALIB,
SYS_TIME_FAS_VALVE_CALIB,
SYS_TIME_SUPPLY_CHANGE,
SYS_TIME_DETECT_FIO2,
SYS_TIME_BACKLIGHT,
SYS_PRESSURE_CHOICE,
SYS_PRESSURE_CHOICE_INT,
SYS_PROXIMAL_TO_INTERNAL_SWITCH,
SYS_CHECK_PRESSURE,
SYS_CHECK_PROXIMAL,
SYS_VALVE_TIM,
SEC_PRESSURE_CHOICE,
SEC_LOW_PRESS,
SEC_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_DETECT,
SEC_CPAP_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_ALARM,
SEC_FLAG_HIGH_PRESSURE,
SEC_APNEA,
SEC_CHECK_PRESSURE,
SEC_CHECK_PROXIMAL,
SEC_NO_BATTERY_TIM,
SEC_CHECK_FIO2_TIM,
SEC_KEYBOARD_TIM,
SEC_SPEED_BLOW_TIM,
SEC_START_BIP_SOUND,
SEC_STOP_BIP_SOUND,
SEC_LOW_FIO2_TIM,
SEC_CPU_REFERENCE_FAILURE_TIM,
SEC_FLOW,
SEC_TIME_WAIT_STARTING,
SEC_HIGH_FIO2_TIM,
SEC_BAT_LOW_LEVEL,
SEC_HIGH_SPO2_TIM,
SEC_LOW_SPO2_TIM,
SEC_BAT_VERY_LOW_LEVEL,
SEC_BUZ_READ,
SEC_BATTERY_FAILURE_CO_BUZ,
SEC_DETECTION_BATTERY_FAILURE_CO_BUZ,
SEC_FAIL_AC_TIM,
SEC_FAIL_DC_TIM,
SEC_VALVE_CST,
SEC_PROXI_CST,
SEC_INT_CST,
SEC_CHECK_VALVE,
SEC_VALVE_PRESS,
SEC_INHIB_CHECK_FIO2,
SEC_INHIB_LOW_FIO2,
SEC_INHIB_HIGH_FIO2,
SEC_INHIB_CHECK_REMOTE,
SEC_CANCEL_HIGH_PRESSURE,
SEC_CHECK_SUPPLY,
SEC_PPC_APNEA,
SEC_PROX_DISC,
SEC_RAZ_CHECK_BAT,
SEC_CHECK_PRESS,
SEC_CHECK_PRESS2,
SEC_CHECK_PROXI,
SEC_CHECK_REMOTE,
SEC_BAT_P_S_TIM,
SEC_INHIB_BUZZER,
SEC_LOW_PRIORITY_BURST,
SEC_MEDIUM_PRIORITY_BURST,
SEC_HIGH_PRIORITY_BURST,
SEC_BUZZER_PULSE,
SEC_BUZZER_SILENCE,
SEC_BUZZER_SOUND_MAX,
SET_VALIDATION_BIP,
SEC_NO_PROXIMAL,
SET_HISTO_BIP,
SEC_BLOWER_OVERHEAT,
ACT_MIN_FLOW,
ACT_STOP_ADAPTATION,
WAIT_USB_BUSY,
USB_CONNECT_DISCONNECT_KEY,
USB_WAIT_READ_FIFO,
SPI_FRAME_TIME,
SPI_WAIT_DISPLAY_BATTERY_GAUGE,
TIM_COM_RECORDING_MONIT,
TIM_USB_RECORDING_MONIT,
SEC_CHECK_VALVE_PRESSURE,
SEC_LEAKAGE,
SEC_CHECK_O2_SUPPLY,
SEC_O2_LEAKAGE,
SEC_100_FIO2_TIM,
INT_MEASURE_BUZZER,
SEC_CANCEL_BATTERY_FAILURE_CO_BUZ,
ACT_BOOST_FREQ,
SEC_LEAK_OCCLUSION,
SEC_CPU_REF_FAILURE,
SEC_APNEA_FLAG,
SEC_OCCLUSION_TIMER,
end_of_table_cnt_decnt};



enum e_TIM_MINUTE_TABLE_ID {
TimerWelcomeEvent,
TimerHideLoupe,
TimerBlinkEvent,
TimeOutModifEvent,
TimerQuitHistoAlarme,
TimerQuitPreferences,
TimerQuitGraphConfig,
TimerRefresh,
TimerStopModifMode,
TimerAutoCalibTest,
TimerRefreshAlarm,
TimerSwapAlarm,
TimerTriggerOk,
TimerSpyPraram,
TimerHideAlarmMessage,
TimerHideStopVentMess,
TimerAddToBlinkEvent,
TimerWaitCalibVerif,
TimerHistoAlarmSeek,
TimerHistoAnoSeek,
TimerWaitCalibQExp,
TimerWaitCalibFiO2,
TimerUsbMessage,
TimerUsbProcessing,
Timer100PrCentO2,
TimerVenRecordingApnea,
TimerUsbRecordingDetailledHorodatage,
TimerUsbCommandTooLong,
TimerQuitVentilReport,
SEC_PERIODICAL_BIP,
TimerEndLongDownKey,
TimerEndLongUpKey,
TimerDoubleAlarm,
SEC_BATTERY_FAILURE_CHARGE_BUZ_READ,
SEC_LOW_BATTERY_BUZ_READ,
SEC_BATTERY_FAILURE_CC_BUZ,
TimerLeakTest,
end_of_minute_ihm_table_decnt,
end_of_minute_table_cnt_decnt};



enum e_TYPE_USE_TIMER {
COUNT,
DECOUNT};




enum e_DRV_RTC_ACCESS_STATE {
FREE_RTC,
READ_RTC,
WRITE_RTC,
ERROR_RTC};




enum e_DRV_RTC_REGISTER {
RTC_SECOND,
RTC_MINUTE,
RTC_HOUR,
RTC_DAY,
RTC_DATE,
RTC_MONTH,
RTC_YEAR,
RTC_SEC_ALARM1,
RTC_MIN_ALARM1,
RTC_HOURS_ALARM1,
RTC_DAY_ALARM1,
RTC_SEC_ALARM2,
RTC_MIN_ALARM2,
RTC_HOURS_ALARM2,
RTC_DAY_ALARM2,
RTC_CONTROL,
RTC_STATUS,
RTC_CHARGER,
RTC_BEGIN_RAM};



enum e_DRV_RTC_ERROR {
DRV_RTC_NO_ERROR,
DRV_RTC_TIME_OUT_TRANSMIT};



enum e_EEP_ACCESS_STATE {
READ_EEP,
WRITE_EEP,
FREE_EEP,
ERROR_EEP};



enum e_DRV_EVENT_STATE {
DRV_EVENT_FREE,
DRV_EVENT_ERASE,
DRV_EVENT_WRITE};
#line 829
enum e_DRV_EEP_WRITE_ERROR {
DRV_EEP_NO_ERROR,
DRV_EEP_TIME_OUT_WRITE,
DRV_EEP_TIME_OUT_TRANSMIT};



enum e_STATE_OF_DRIVE_EEP {
DRV_EEP_WRITE_PENDING,
DRV_EEP_FREE};
#line 844
enum e_DRV_DISPLAY_FUNCTION {
DRV_INIT,
DRV_LOAD_TABLE,
DRV_BRITHNESSAJUST,
DRV_NEGATIVE_CAR,
DRV_DISPLAY_PAGE,
DRV_STRING,
DRV_NUMBER,
DRV_SYMBOL,
DRV_PIXEL,
DRV_LINE,
DRV_BOX,
DRV_ERASE_ZONE,
DRV_ERASE_PAGE,
DRV_BACKLIHGHTADJUST};




enum e_TYPE_SOUND {
NO_SOUND,
BIP_SHORT_SOUND,
BIP_LONG_SOUND,
BIP_VERY_LONG_SOUND,
START_BIP_SOUND,
STOP_BIP_SOUND,
BATTERY_SOUND,
VERY_SLOW_SOUND,
SLOW_SOUND,
FAST_SOUND,
USB_CONNECT,
USB_DISCONNECT,
CONTINU_SOUND};




enum e_TYPE_TEST_BUZ {
NO_BUZ,
BUZ};




enum e_TYPE_BACKLIGHT_LEVEL {
SWITCH_OFF,
WEAK,
SWITCH_ON};




enum e_NUMBER_BUZ {
BUZ_CARD,
BUZ_SEC,
BUZ_ALL,
BUZ_VOLUME};




enum e_TYPE_BLINK {
NO_LED,
BLINK_LED,
CONTINU_LED};




enum e_VALIDATION_BIP {
NO_BIP,
BIP_SHORT,
BIP_LONG,
BIP_VERY_LONG,
BIP_START_VENTIL,
BIP_STOP_VENTIL,
BURST,
BIP_USB_CONNECT,
BIP_USB_DISCONNECT,
BIP_SHORT_VALID,
BIP_BATTERY_PERIODICAL};




enum e_VALIDATION_BIP_TYPE {
NO_CLOC_BIP,
CLOC,
BIP,
BIP_AND_CLOC};



enum e_SPI_ACCESS {
SPI_EEPROM,
SPI_RTC,
SPI_POWER};



enum e_SIMV {
PIM,
VIM,
PSV,
end_of_e_SIMV};




enum e_SIMV_PS_End {
PS_FLOW_END,
PS_HIGH_PRESS_END,
PS_TIMED_END,
end_of_e_SIMV_PS_End};




enum e_Month {
Month_start,
JANUARY,
FEBRUARY,
MARSH,
APRIL,
MAY,
JUNE,
JULY,
AUGUST,
SEPTEMBER,
OCTOBER,
NOVEMBER,
DECEMBER};



enum e_DataBaseType {
DB_RTC,
DB_CURRENT,
DB_CONFIG,
DB_CONTROL,
DB_COMPUTE,
DB_POWERSUPPLY,
DB_NULL};
#line 992
enum e_OUTPUT_NAME {
OUT_LED_VENTIL,
OUT_LED_O2,
FREE_1Q3,
CE_EEP,
CE_RTC1,
CE_RTC2,
CE_INT_PRES_SENS,
CE_PROX_PRES_SENS,
CE_VALVE_PRES_SENS,
CE_SPI_USB,
CE_SPI_PIC,
CE_FLOW_INSP_SENS,
CE_FLOW_EXP_SENS,
CE_SPI_PIC_IC44,
FREE_2Q7,
FREE_2Q8};
#line 1019
enum e_SPI_POWER_TRANSMIT {
SPI_POWER_TRANSMIT_START_FRAME_MSB,
SPI_POWER_TRANSMIT_START_FRAME_LSB,
SPI_POWER_TRANSMIT_VENTIL_AUTHORIZATION,
SPI_POWER_TRANSMIT_MAINTENANCE_MODE,
SPI_POWER_TRANSMIT_CALIBRATION_MODE,
SPI_POWER_TRANSMIT_CRC,
SPI_POWER_TRANSMIT_END_FRAME,
SPI_POWER_TRANSMIT_EndOfFrame};
#line 1033
enum e_SPI_POWER_RECEIVE {
SPI_POWER_RECEIVE_MSB_START_FRAME,
SPI_POWER_RECEIVE_LSB_START_FRAME,
SPI_POWER_RECEIVE_MSB_V_BAT_U16,
SPI_POWER_RECEIVE_LSB_V_BAT_U16,
SPI_POWER_RECEIVE_MSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_LSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_MSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_STATE_U16,
SPI_POWER_RECEIVE_LSB_POWER_TYPE_U16,
SPI_POWER_RECEIVE_MSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_AVALAIBLE_U16,
SPI_POWER_RECEIVE_LSB_PER_CENT_BAT_U16,
SPI_POWER_RECEIVE_LSB_NO_PRESENCE_BAT_U16,
SPI_POWER_RECEIVE_LSB_BAT_KO_U16,
SPI_POWER_RECEIVE_LSB_CHARGE_KO_U16,
SPI_POWER_RECEIVE_LSB_UNKNOWN_BATTERY_U16,
SPI_POWER_RECEIVE_MSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_BATTERY_END_U16,
SPI_POWER_RECEIVE_LSB_BATTERY_LOW_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_DAY_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_MONTH_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_YEAR_U16,
SPI_POWER_RECEIVE_LSB_BAT_TEMP_OVERFLOW,
SPI_POWER_RECEIVE_LSB_SUPPLY_MEASURE_FAILURE,
SPI_POWER_RECEIVE_LSB_FAILURE_24V_FLAG,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_OUTOFBOUNDS,
SPI_POWER_RECEIVE_LSB_COOLING_FAN_FAILURE_FLAG,
SPI_POWER_RECEIVE_LSB_FIRST_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_SECOND_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_THIRD_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_HOUR_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_SECOND_U16,
SPI_POWER_RECEIVE_LSB_BAT_AGEING_U16,
SPI_POWER_RECEIVE_LSB_BAT_SUPPLIER_U16,
SPI_POWER_RECEIVE_LSB_BAT_TYPICAL_CAPACITY_U16,
SPI_POWER_RECEIVE_CRC,
SPI_POWER_RECEIVE_END_FRAME,
SPI_POWER_RECEIVE_EndOfTable,
SPI_POWER_RECEIVE_BufferSize = 70};
#line 1082
enum e_DRV_SPI_POWER_ERROR {
DRV_SPI_POWER_NO_ERROR,
DRV_SPI_POWER_TIME_OUT_TRANSMIT,
DRV_SPI_POWER_NO_FRAME,
DRV_SPI_POWER_BAD_FRAME};
#line 1093
enum e_MODE_COM {
COM_VOL_A,
COM_PSVT,
COM_PRES_A,
COM_VSIMV,
COM_CPAP,
COM_VOL_C,
COM_PSV,
COM_PRES_C,
COM_VOL_US,
COM_PRES_US,
COM_PSV_US,
COM_VSIMV_US,
COM_PSIMV_US,
COM_CPAP_US,
COM_PSIMV,
End_of_Table_Mode_COM};




enum e_Monit_Buffer_Data_Type {
MONITORAGE,
HORODATAGE};
#line 1122
enum e_FrameUART1 {
DATA_FRAME0,
DATA_FRAME1,
DATA_FRAME2,
SIZE_FRAME_UART1};



enum e_Flash_Read_Status {
REQUEST,
RUNNING,
ENDED};



enum e_Cycling_Mode {
I_T,
I_E};




enum e_Alarm_Tone {
ORIGINAL,
COMPLIANT};
#line 1155
enum e_DIRECT_MONITORING {
MONIT_MSB_PRESSURE,
MONIT_LSB_PRESSURE,
MONIT_MSB_CORRECTED_FLOW_INSP,
MONIT_LSB_CORRECTED_FLOW_INSP,
MONIT_MSB_CORRECTED_FLOW_EXHAL,
MONIT_LSB_CORRECTED_FLOW_EXHAL,
MONIT_CORRECTED_VT_LEAK,
MONIT_SPO2,
MONIT_HR,
MONIT_ALARM_1,
MONIT_ALARM_2,
MONIT_ALARM_3,
MONIT_ALARM_4,
MONIT_ALARM_5,
MONIT_ALARM_6,
MONIT_ALARM_7,
MONIT_ALARM_8,
MONIT_ALARM_9,
MONIT_SYMBOL,
MONIT_VENTIL_MODE,
End_Of_Table_Direct_Monitoring};
#line 1185
enum e_DETAILLED_MONITORING {
DETAILLED_DATA_TYPE,

DETAILLED_DAY,
DETAILLED_VENTIL_STATE = 1,

DETAILLED_MONTH,
DETAILLED_PATIENT_PRESSURE_MSB = 2,

DETAILLED_YEAR,
DETAILLED_PATIENT_PRESSURE_LSB = 3,

DETAILLED_HOUR,
DETAILLED_INSP_FLOW_MSB = 4,

DETAILLED_MINUTE,
DETAILLED_INSP_FLOW_LSB = 5,

DETAILLED_SECOND,
DETAILLED_EXH_FLOW_MSB = 6,

DETAILLED_RESERVED1,
DETAILLED_EXH_FLOW_LSB = 7,

DETAILLED_RESERVED2,
DETAILLED_LEAK = 8,

End_Of_Table_Detailled_Monitoring};
#line 1222
enum e_TREND {
TREND_DAY,
TREND_MONTH,
TREND_YEAR,
TREND_HOUR,
TREND_MINUTE,
TREND_SECOND,
TREND_VENTIL_MODE,
TREND_VENTIL_TYPE,
TREND_MSB_P_MAX,
TREND_LSB_P_MAX,
TREND_MSB_AV_PEP,
TREND_LSB_AV_PEP,
TREND_MSB_LEAKAGE,
TREND_LSB_LEAKAGE,
TREND_MSB_AV_VOLUME,
TREND_LSB_AV_VOLUME,
TREND_IE_RATIO_NUMERATOR,
TREND_IE_RATIO_DENOMINATOR,
TREND_FREQUENCY,
TREND_MSB_INSPIRATED_VOLUME,
TREND_LSB_INSPIRATED_VOLUME,
TREND_MSB_EXHALED_VOLUME,
TREND_LSB_EXHALED_VOLUME,
TREND_HEART_RATE,
TREND_SPO2,
End_Of_Table_Trends};
#line 1257
enum e_EVENT_PARAMETERS {

EVENT_NB_ID,
EVENT_DAY_ID,
EVENT_MON_ID,
EVENT_YEA_ID,
EVENT_HOU_ID,
EVENT_MIN_ID,
EVENT_SCD_ID,
EVENT_CPTMACHHOURMSB_ID,
EVENT_CPTMACHHOURLSB_ID,
EVENT_MODE_ID,
EVENT_TYPE_ID,
EVENT_TRIGECONV_ID,
EVENT_PUNITCONV_ID,
EVENT_CYCL_ID,
EVENT_24VMSB_ID,
EVENT_24VLSB_ID,
EVENT_5VMSB_ID,
EVENT_5VLSB_ID,
EVENT_WTDMSB_ID,
EVENT_WTDLSB_ID,
EVENT_TINTMSB_ID,
EVENT_TINTLSB_ID,
EVENT_VBATMSB_ID,
EVENT_VBATLSB_ID,
EVENT_TBATMSB_ID,
EVENT_TBATLSB_ID,
EVENT_QBATMSB_ID,
EVENT_QBATLSB_ID,
EVENT_MBATMSB_ID,
EVENT_MBATLSB_ID,
EVENT_FIO2_ID,
EVENT_SPO2_ID,
EVENT_FREQCAR_ID,
EVENT_PMAXMSB_ID,
EVENT_PMAXLSB_ID,
EVENT_PEPMSB_ID,
EVENT_PEPLSB_ID,
EVENT_RAPIT_ID,
EVENT_RAPIEMSB_ID,
EVENT_RAPIELSB_ID,
EVENT_FREQ_ID,
EVENT_VTIMSB_ID,
EVENT_VTILSB_ID,
EVENT_VTEMSB_ID,
EVENT_VTELSB_ID,
EVENT_VMMSB_ID,
EVENT_VMLSB_ID,
EVENT_LEAK_ID,
EVENT_TIMSB_ID,
EVENT_TILSB_ID,
EVENT_TEMSB_ID,
EVENT_TELSB_ID,
EVENT_SUPPLY_TYPE,
EVENT_BATLEVEL_ID,
EVENT_SETRELATIVE_PRESSURE_ID,
EVENT_SETBAROMETRIC_COMP_ID,
EVENT_SETSOUND_LEVEL_ID,
EVENT_SETPEDIATRIC_CIRCUIT_ID,
EVENT_SETDISCONNECTION_DELAY_ID,
EVENT_SETAPNEA_ALARM_ID,
EVENT_SETSPO2MIN_ID,
EVENT_SETSPO2MAX_ID,
EVENT_SETFIO2_ID,
EVENT_SETFIO2MIN_ID,
EVENT_SETFIO2MAX_ID,


EVENT_SPECPAR_1_ID,
EVENT_SPECPAR_2_ID,
EVENT_SPECPAR_3_ID,
EVENT_SPECPAR_4_ID,
EVENT_SPECPAR_5_ID,
EVENT_SPECPAR_6_ID,
EVENT_SPECPAR_7_ID,
EVENT_SPECPAR_8_ID,
EVENT_SPECPAR_9_ID,
EVENT_SPECPAR_10_ID,
EVENT_SPECPAR_11_ID,
EVENT_SPECPAR_12_ID,
EVENT_SPECPAR_13_ID,
EVENT_SPECPAR_14_ID,
EVENT_SPECPAR_15_ID,
EVENT_SPECPAR_16_ID,
EVENT_SPECPAR_17_ID,
EVENT_SPECPAR_18_ID,
EVENT_SPECPAR_19_ID,
EVENT_SPECPAR_20_ID,
EVENT_SPECPAR_21_ID,
EVENT_SPECPAR_22_ID,
EVENT_SPECPAR_23_ID,
EVENT_SPECPAR_24_ID,
EVENT_SPECPAR_25_ID,
EVENT_SPECPAR_26_ID,
EVENT_SPECPAR_27_ID,
EVENT_SPECPAR_28_ID,
EVENT_SPECPAR_29_ID,
EVENT_SPECPAR_30_ID,
EVENT_SPECPAR_31_ID,
EVENT_STATE_ID,
EVENT_Last_Event_Parameter = 96,
End_Of_Table_Events};
#line 1369
enum e_Settings {

SETTINGS_COMPATIBILITY,
SETTINGS_MODE,
SETTINGS_CYCLING_MODE_LSB,
SETTINGS_CYCLING_MODE_MSB,
SETTINGS_PRESSURE_UNIT_LSB,
SETTINGS_PRESSURE_UNIT_MSB,
SETTINGS_LOW_SPO2_LSB,
SETTINGS_LOW_SPO2_MSB,
SETTINGS_SPO2_LOW_SELECT_LSB,
SETTINGS_SPO2_LOW_SELECT_MSB,
SETTINGS_HIGH_SPO2_LSB,
SETTINGS_HIGH_SPO2_MSB,
SETTINGS_SPO2_HIGH_SELECT_LSB,
SETTINGS_SPO2_HIGH_SELECT_MSB,
SETTINGS_VOL_CONTROL_LSB,
SETTINGS_VOL_CONTROL_MSB,
SETTINGS_P_CONTROL_LSB,
SETTINGS_P_CONTROL_MSB,
SETTINGS_P_SUPPORT_LSB,
SETTINGS_P_SUPPORT_MSB,
SETTINGS_PEEP_LSB,
SETTINGS_PEEP_MSB,
SETTINGS_PEEP_NO_SELECT_LSB,
SETTINGS_PEEP_NO_SELECT_MSB,
SETTINGS_RISE_TIME_LSB,
SETTINGS_RISE_TIME_MSB,
SETTINGS_RAMP_LSB,
SETTINGS_RAMP_MSB,
SETTINGS_I_T_LSB,
SETTINGS_I_T_MSB,
SETTINGS_IE_NUMERATOR_LSB,
SETTINGS_IE_NUMERATOR_MSB,
SETTINGS_IE_DENOMINATOR_LSB,
SETTINGS_IE_DENOMINATOR_MSB,
SETTINGS_CONTROL_R_LSB,
SETTINGS_CONTROL_R_MSB,
SETTINGS_BACKUP_R_LSB,
SETTINGS_BACKUP_R_MSB,
SETTINGS_BACKUP_R_NO_SELECT_LSB,
SETTINGS_BACKUP_R_NO_SELECT_MSB,
SETTINGS_APNEA_LSB,
SETTINGS_APNEA_MSB,
SETTINGS_AUTO_APNEA_SELECT_LSB,
SETTINGS_AUTO_APNEA_SELECT_MSB,
SETTINGS_INSP_SENS_LSB,
SETTINGS_INSP_SENS_MSB,
SETTINGS_INSP_SENS_NO_SELECT_LSB,
SETTINGS_INSP_SENS_NO_SELECT_MSB,
SETTINGS_EXH_SENS_LSB,
SETTINGS_EXH_SENS_MSB,
SETTINGS_AUTO_EXH_SENS_SELECT_LSB,
SETTINGS_AUTO_EXH_SENS_SELECT_MSB,
SETTINGS_TARGET_VT_LSB,
SETTINGS_TARGET_VT_MSB,
SETTINGS_TARGET_VT_SELECT_LSB,
SETTINGS_TARGET_VT_SELECT_MSB,
SETTINGS_MAX_PRESSURE_LSB,
SETTINGS_MAX_PRESSURE_MSB,
SETTINGS_LOW_VTI_LSB,
SETTINGS_LOW_VTI_MSB,
SETTINGS_LOW_VTI_NO_SELECT_LSB,
SETTINGS_LOW_VTI_NO_SELECT_MSB,
SETTINGS_HIGH_VTI_LSB,
SETTINGS_HIGH_VTI_MSB,
SETTINGS_HIGH_VTI_NO_SELECT_LSB,
SETTINGS_HIGH_VTI_NO_SELECT_MSB,
SETTINGS_LOW_VTE_LSB,
SETTINGS_LOW_VTE_MSB,
SETTINGS_LOW_VTE_NO_SELECT_LSB,
SETTINGS_LOW_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_VTE_LSB,
SETTINGS_HIGH_VTE_MSB,
SETTINGS_HIGH_VTE_NO_SELECT_LSB,
SETTINGS_HIGH_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_PIP_LSB,
SETTINGS_HIGH_PIP_MSB,
SETTINGS_LOW_PIP_LSB,
SETTINGS_LOW_PIP_MSB,
SETTINGS_HIGH_R_LSB,
SETTINGS_HIGH_R_MSB,
SETTINGS_HIGH_R_NO_SELECT_LSB,
SETTINGS_HIGH_R_NO_SELECT_MSB,
SETTINGS_HIGH_LEAK_LSB,
SETTINGS_HIGH_LEAK_MSB,
SETTINGS_HIGH_LEAK_SELECT_LSB,
SETTINGS_HIGH_LEAK_SELECT_MSB,
SETTINGS_TI_MIN_LSB,
SETTINGS_TI_MIN_MSB,
SETTINGS_TI_MIN_AUTO_SELECT_LSB,
SETTINGS_TI_MIN_AUTO_SELECT_MSB,
SETTINGS_TI_MAX_LSB,
SETTINGS_TI_MAX_MSB,
SETTINGS_TI_MAX_AUTO_SELECT_LSB,
SETTINGS_TI_MAX_AUTO_SELECT_MSB,
SETTINGS_DISCONNECTION_DELAY_LSB,
SETTINGS_DISCONNECTION_DELAY_MSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_LSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_MSB,
SETTINGS_SIGH_SELECT_LSB,
SETTINGS_SIGH_SELECT_MSB,
SETTINGS_SIGH_VT_COEF_LSB,
SETTINGS_SIGH_VT_COEF_MSB,
SETTINGS_SIGH_CPT_LSB,
SETTINGS_SIGH_CPT_MSB,
SETTINGS_APNEA_ALARM_ACTIVATION_LSB,
SETTINGS_APNEA_ALARM_ACTIVATION_MSB,
SETTINGS_PEDIATRIC_CIRCUIT_LSB,
SETTINGS_PEDIATRIC_CIRCUIT_MSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_LSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_MSB,
End_Of_Table_Settings};
#line 1492
enum e_USB_SerialNumberAndDate_Frame {

USB_SETTING_SERIAL_NUMBER_1,
USB_SETTING_SERIAL_NUMBER_2,
USB_SETTING_SERIAL_NUMBER_3,
USB_SETTING_SERIAL_NUMBER_4,
USB_SETTING_SERIAL_NUMBER_5,
USB_SETTING_SERIAL_NUMBER_6,
USB_SETTING_SERIAL_NUMBER_7,
USB_SETTING_SERIAL_NUMBER_8,
USB_SETTING_SERIAL_NUMBER_9,
USB_SETTING_SERIAL_NUMBER_10,
USB_SETTING_SERIAL_NUMBER_11,
USB_SETTING_SERIAL_NUMBER_12,

USB_SETTING_DATE_YEAR,
USB_SETTING_DATE_MONTH,
USB_SETTING_DATE_DAY,
USB_SETTING_DATE_HOUR,
USB_SETTING_DATE_MINUTE,
USB_SETTING_DATE_SECOND,
End_of_e_usb_frame_serialNumberAndDate};




enum e_USB_SerialNumber_Frame {

USB_SERIAL_NUMBER_1,
USB_SERIAL_NUMBER_2,
USB_SERIAL_NUMBER_3,
USB_SERIAL_NUMBER_4,
USB_SERIAL_NUMBER_5,
USB_SERIAL_NUMBER_6,
USB_SERIAL_NUMBER_7,
USB_SERIAL_NUMBER_8,
USB_SERIAL_NUMBER_9,
USB_SERIAL_NUMBER_10,
USB_SERIAL_NUMBER_11,
USB_SERIAL_NUMBER_12,
End_of_e_usb_frame_serialNumber};
#line 1538
enum e_USB_Settings_Frame {

USB_SETTINGS_DATA,
USB_SETTINGS_MSB_CRC_FRAME,
USB_SETTINGS_LSB_CRC_FRAME,
End_of_e_usb_frame_setting};




enum e_USB_Transfer_Apply {
Usb_FirstStep,
Usb_ReadCurrentDirectoryNext,
Usb_OpenFile,
Usb_CreateFile,
Usb_ReadFile,
Usb_WriteSerialNumberAndDateAtIndex,
Usb_WriteSerialNumberAndDateAtEndOfFile,
Usb_WriteSerialNumberAtEndOfFile,
Usb_WriteFileAtIndex,
Usb_WriteAtTheEndOfFile,
Usb_UpadateDateAndTime,
Usb_WriteCRC,
Usb_CloseFile,
End_of_e_usb_transfer_apply};
#line 1569
enum e_USB_File_Settings {
FileSettingNext,
FileSettingNotFound,
FileSettingFound,
end_of_e_usb_file_setting};
#line 1579
enum e_USB_File_Type {
SettingsType,
ContinuousRecordingType,
MonitoringTransferType,
TrendsTransferType,
EventsTransferType,
end_of_e_usb_file_type};




enum e_USB_Continuous_Frame {
USB_ID_FRAME,

USB_DATA,
USB_End_Of_Continuous_Frame};




enum e_NAND_FLASH_STATE {
NAND_FREE,
NAND_ERASE,
NAND_MONIT_WRITE,
NAND_MONIT_READ,
NAND_TREND_WRITE,
NAND_TREND_READ};
#line 95 "..\\..\\SRC\\HMI\\HMI_IhmType.hpp"
enum e_TYPE_OF_LED {
LED_ALARM_RED,
LED_ALARM_ORANGE,
LED_VENTIL,
LED_WHITE,
LED_AC,
LED_DC,
LED_BAT};
#line 167
enum EventId {
ProgExhalFlowUsed,
ProgExhalFlowUnused,
ProgInspControlEvent,
ProgInspTrigEvent,
ProgExhEvent,
ProgHideBatEvent,
ProgStartVentilOk,
ProgStartVentilKo,
ProgShowBatEvent,
ProgInibAlarmOK,
ProgInibAlarmNOK,
ProgCancelAlarmOK,
ProgCancelAlarmNOK,
ProgRemoveHighPressureAlarm,
ProgValveMissing,
ProgValveDetected,
ProgBlocExpiMissing,
ProgBlocExpiDetected,
ProgSpo2SensorNoError,
ProgSpo2SensorError,
ProgFio2SensorOK,
ProgFio2SensorNOK,
ProgCheckSupplyNoError,
ProgCheckSupplyError,
ProgUsbKeyDetected,
ProgUsbKeyNotDetected,
ProgUsbErrorCodeReady,
ProgUsbNewModeDetected,
ProgStartMonitoring,
ProgSupplyBusFailure,
ProgSupplyBusOK};
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject;
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject;
#line 33 "..\\..\\SRC\\DATABASE\\Db_PowerSupply.h"
enum e_DB_POWERSUPPLY {
V_BAT_U16,
TEMP_BAT_S16,
BAT_CYCLES_U16,
BAT_STATE_U16,
POWER_TYPE_U16,
JAUGE_MINUTE_U16,
JAUGE_HOUR_DISPLAY_U16,
JAUGE_MINUTE_DISPLAY_U16,
JAUGE_AVALAIBLE_U16,
PER_CENT_BAT_U16,
NO_PRESENCE_BAT_U16,
BAT_KO_U16,
CHARGE_KO_U16,
UNKNOWN_BATTERY_U16,
AMBIENT_TEMP_S16,
BATTERY_END_U16,
BATTERY_LOW_U16,
FIRST_DATE_DAY_U16,
FIRST_DATE_MONTH_U16,
FIRST_DATE_YEAR_U16,
COOLING_FAN_FAILURE_FLAG_U16,
AMBIENT_TEMP_OUTOFBOUNDS_U16,
FAILURE_24V_FLAG_U16,
BAT_TEMP_OUTOFBOUNDS_U16,
SUPPLY_MEASURE_FAILURE_U16,
POWER_SUPPLY_VERSION_NUMBER_0,
POWER_SUPPLY_VERSION_NUMBER_1,
POWER_SUPPLY_VERSION_NUMBER_2,
SUPPLIER_U16,
CAPACITY_U16,
CAPACITY_THEORICAL_U16,
FIRST_DATE_HOUR_U16,
FIRST_DATE_MINUTE_U16,
FIRST_DATE_SECOND_U16,
AGING_U16,
end_of_db_powersupply_table};
#line 47 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
enum ePANIC_MODULE {
PANIC_MODULE_VENTIL,
PANIC_MODULE_ALARM,
PANIC_MODULE_GRAPH,
PANIC_MODULE_EVENT_NODE_VENTIL,
PANIC_MODULE_EVENT_NODE_ALARM,
PANIC_MODULE_EVENT_NODE_MAINT_CALIB,
PANIC_MODULE_FRAME_GRAPH,
PANIC_MODULE_UNKNOWN,
PANIC_MODULE_MAX};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField;
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField;
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox;
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField;
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog;
#line 42 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
enum DataType {
eValue,
eString,
eValueSign};


struct Loupe;
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm;
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label;
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField;
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue;
#line 212 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
struct tInfoNodeForMode;
#line 231
struct tInfo;




enum e_OBJECT {
OBJECT_VENTIL_LOVPIP,
OBJECT_VENTIL_LOVVTI,
OBJECT_VENTIL_LOVVTE,
OBJECT_VENTIL_LOVVM,
OBJECT_VENTIL_LOVR,
OBJECT_VENTIL_LOVFUITE,
OBJECT_VENTIL_LOVFIO2,
OBJECT_VENTIL_LOVSPO2,
OBJECT_VENTIL_LTVIE,
OBJECT_VENTIL_LTVIT,
OBJECT_VENTIL_OBJECT_MAX,
OBJECT_ALARM_LOVPIP = 0,
OBJECT_ALARM_LOVVTI,
OBJECT_ALARM_LOVMAP,
OBJECT_ALARM_LOVPEEP,
OBJECT_ALARM_LTVIE,
OBJECT_ALARM_LOVIT,
OBJECT_ALARM_LOVR,
OBJECT_ALARM_LOVM,
OBJECT_ALARM_OBJECT_MAX,
OBJECT_GRAPH_MOFIO2 = 0,
OBJECT_GRAPH_MOSPO2,
OBJECT_GRAPH_MOPULSE,
OBJECT_GRAPH_MOTI,
OBJECT_GRAPH_MOTE,
OBJECT_GRAPH_MOIE,
OBJECT_GRAPH_MOIT,
OBJECT_GRAPH_MOFR,
OBJECT_GRAPH_MOVM,
OBJECT_GRAPH_MOVTE,
OBJECT_GRAPH_MOVTI,
OBJECT_GRAPH_MOPE,
OBJECT_GRAPH_MOPI,
OBJECT_GRAPH_MOFUITE,
OBJECT_GRAPH_OBJECT_MAX};
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueLock.hpp"
struct LabelTwoValueLock;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueTrig.hpp"
struct LabelTwoValueTrig;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelOneValueTrig.hpp"
struct LabelOneValueTrig;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelAlarme.hpp"
struct LabelAlarme;
#line 34 "..\\..\\SRC\\HMI\\HMI_BarGraph.hpp"
struct BarGraph;
#line 46 "..\\..\\SRC\\HMI\\HMI_MessageList.hpp"
struct __Q2_11MessageList8TMessage;
#line 41
struct MessageList;
#line 37 "..\\..\\SRC\\HMI\\HMI_LabelAlarmeTwoLine.hpp"
struct LabelAlarmeTwoLine;
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject;
#line 53 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.hpp"
struct FrameVentilation;
#line 28 "..\\..\\SRC\\DATABASE\\DB_AlarmStatus.h"
enum e_DB_ALARMS {
Mark_Begin_Alarm,
ALARM_DISCONNECTION_U16,
ALARM_HIGH_PRESSURE_U16,
ALARM_APNEA_U16,
ALARM_HIGH_VTI_U16,
ALARM_LOW_VTI_U16,
ALARM_LOW_VTE_U16,
ALARM_HIGH_RATE_U16,
ALARM_AC_POWER_FAIL_U16,
ALARM_DC_POWER_FAIL_U16,
ALARM_CHECK_SUPPLY_U16,
ALARM_LOW_BATTERY_U16,
ALARM_END_OF_BATTERY_U16,
ALARM_CHECK_BATTERY_U16,
ALARM_NO_BATTERY_U16,
ALARM_CHECK_BUZZER_U16,
ALARM_BUZZER_BATTERY_LOW_U16,
ALARM_BUZZER_BATTERY_CHARGE_FAILURE_U16,
ALARM_RESERVED_18,
ALARM_TECHNICAL_PROBLEM_U16,
ALARM_CHECK_SETTINGS_U16,
ALARM_CHECK_PRESSURE_U16,
ALARM_CHECK_PROXIMAL_U16,
ALARM_PROXI_DISCONNECTION_U16,
ALARM_NO_PROXIMAL_U16,
ALARM_CHECK_VALVE_U16,
ALARM_CHECK_VOLUME_U16,
ALARM_VALVE_LEAKAGE_U16,
ALARM_CHECK_REMOTE_ALARM_U16,
ALARM_UNKNOWN_BATTERY_U16,
ALARM_CHECK_BATTERY_CHARGE_U16,
ALARM_HIGH_VTE_U16,
ALARM_CALIBRATION_FAIL_U16,
ALARM_KEYBOARD_DEFAULT_U16,
ALARM_AMBIENT_TEMP_U16,
ALARM_BAT_TEMP_U16,
ALARM_FAILURE_24V_U16,
ALARM_COOLING_FAN_U16,
ALARM_SUPPLY_MEASURE_U16,
ALARM_TURBINE_OVERHEAT_U16,
ALARM_RESERVED_40,
ALARM_CONTROLLED_CYCLES_U16,
ALARM_OCCLUSION_U16,
ALARM_CPU_REFERENCE_U16,
ALARM_BREATH_TIME_CYCLED_U16,
ALARM_INSP_FLOW_FAILURE_U16,
ALARM_CHECK_VALVE_PRESSURE_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_UTILISER_VALVE_1_U16,
ALARM_UTILISER_VALVE_2_U16,
ALARM_ENLEVER_VALVE_1_U16,
ALARM_ENLEVER_VALVE_2_U16,
ALARM_LEAKAGE_U16,
ALARM_CHECK_FIO2_U16,
ALARM_LOW_FIO2_U16,
ALARM_HIGH_FIO2_U16,
ALARM_NO_FIO2_SENSOR_U16,
ALARM_CALIB_FIO2_U16,
ALARM_CHECK_O2_SUPPLY_U16,
ALARM_MISSING_O2_SUPPLY_U16,
ALARM_CHECK_O2_U16,
ALARM_O2_LEAKAGE_U16,
ALARM_HIGH_SPO2_U16,
ALARM_LOW_SPO2_U16,
ALARM_SPO2_SENSOR_DISCONNECTED_U16,
ALARM_100_PER_CENT_O2_U16,
ALARM_DELAYED_MESSAGE_U16,
ALARM_LEAK_OCCLUSION_U16,
ALARM_VOLUNTARY_STOP_U16,
ALARM_NEEDED_FIO2_CALIB_U16,
ALARM_APNEA_FLAG_U16,
Mark_Displayed_Alarm,
Mark_Begin_Technical_Alarm,
TECH_ALARM_RESERVED_1,
TECH_ALARM_INSP_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_EXHAL_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_VALVE_PRESS_OFFSET_DEFAULT_U16,
TECH_ALARM_INTERNAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_SPEED_DEFAULT_U16,
TECH_ALARM_CLOCK_DEFAULT_U16,
TECH_ALARM_PROXIMAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_VERY_LOW_PROXIMAL_PRESS_U16,
TECH_ALARM_VERY_LOW_INTERNAL_PRESS_U16,
TECH_ALARM_VERY_LOW_VALVE_PRESS_U16,
TECH_ALARM_LOOSE_FLASH_POINTER,
TECH_ALARM_FIO2_OFFSET_DEFAULT,
TECH_ALARM_OFFSET_O2_FLOW,
TECH_ALARM_O2_PRESSURE_OFFSET_DEFAULT,
TECH_ALARM_RESERVED_16,
TECH_ALARM_RESERVED_17,
TECH_ALARM_RESERVED_18,
TECH_ALARM_RESERVED_19,
TECH_ALARM_RESERVED_20,
end_of_alarms_table,
NO_ALARM};
#line 32 "..\\..\\SRC\\DATABASE\\DB_Event.h"
enum e_EVENT_ENUM {

NO_EVENT,
EVENT_START,
EVENT_VENTIL,
EVENT_VOLUNTARY_STOP_VENTIL,
EVENT_MODIF_PEEP,
EVENT_MODIF_BACKUP_R,
EVENT_RESET_PATIENT_COUNTER,
EVENT_MODIF_CONTROL_R,
RESERVED_8,
EVENT_MODIF_VOL_CONTROL,
EVENT_MODIF_RAMP,
EVENT_MODIF_IE,
RESERVED_12,
EVENT_MODIF_STOP_DEVICE,
EVENT_MODIF_INSP_SENS,
EVENT_MODIF_MODE,
EVENT_MODIF_RISE_TIME,
EVENT_MODIF_P_SUPPORT,
EVENT_MODIF_VTC,
EVENT_MODIF_PIMAX,
EVENT_MODIF_IT,
RESERVED_21,
EVENT_MODIF_EXH_SENS,
EVENT_MODIF_APNEA_TIME,
EVENT_MODIF_LOW_PIP,
EVENT_MODIF_HIGH_PIP,
EVENT_MODIF_HIGH_R,
EVENT_MODIF_LOW_VTE,
RESERVED_28,
RESERVED_29,
EVENT_MODIF_LOW_VTI,
EVENT_MODIF_HIGH_VTI,
RESERVED_32,
RESERVED_33,
RESERVED_34,
RESERVED_35,
EVENT_UNVOLUNTARY_STOP_VENTIL,
RESERVED_37,
RESERVED_38,
RESERVED_39,
EVENT_EXH_FLOW_CALIB,
RESERVED_41,
EVENT_MODIF_FIO2,
EVENT_FIO2_CALIB,
EVENT_MODIF_MAX_LEAK,
EVENT_INSP_FLOW_CALIB,
EVENT_O2_FLOW_CALIB,
EVENT_PATIENT_PRESS_CALIB,
RESERVED_48,
EVENT_MODIF_SPO2_MAXI,
EVENT_MODIF_SPO2_MINI,
EVENT_MODIF_TI_MAXI,
EVENT_MODIF_TI_MINI,
EVENT_VALVE_PRESS_CALIB,
EVENT_AC_RETURN,
EVENT_O2_PRESS_CALIB,
EVENT_ALARM_INHIBITION,
EVENT_DC_RETURN,
EVENT_CIRCUIT_CHECK_MENU_ACCESS,
EVENT_MAINTENANCE_MENU_ACCESS,
EVENT_ALARM_CANCELLATION,
EVENT_MODIF_P_CONTROL,
EVENT_MODIF_TI_CONTROL,
RESERVED_63,
RESERVED_64,
EVENT_MODIF_HIGH_VTE,
EVENT_MODIF_TIME,
EVENT_MODIF_DATE,
EVENT_USB_TOO_MANY_KEYS_CONNECTED,
EVENT_USB_KEY_DISCONNECTED_DURING_OPERATION,
EVENT_USB_TRANSFER_ERROR,
EVENT_USB_ERASE_KEY_ERROR,
EVENT_USB_SETTINGS_INCOMPATIBLES,
EVENT_USB_SETTINGS_FILE_ERROR,
EVENT_USB_KEY_FULL,
EVENT_USB_SETTINGS_TRANSFER_FROM_KEY,
EVENT_MODIF_FIO2_MAXI,
EVENT_MODIF_FIO2_MINI,
EVENT_MODIF_DISCONNECTION_DELAY,
EVENT_MODIF_SIGHT_COUNT,
EVENT_MODIF_SIGHT_COEF,
EVENT_FLASH_CHECKSUM_POST_ERROR,
EVENT_RAM_CHECKSUM_POST_ERROR,
EVENT_VOLT_REFERENCE_POST_ERROR,
EVENT_EEPROM_POST_ERROR,
EVENT_POST_VERSION_ERROR,
EVENT_USB_CONTINUOUS_TRANSFER_START,
EVENT_USB_CONTINUOUS_TRANSFER_STOP,
RESERVED_88,
Start_Alarm,
EVENT_AL_HIGH_PRESS,
EVENT_AL_DISCONNECTION,
EVENT_AL_HIGH_RATE,
EVENT_AL_LOW_VTI,
EVENT_AL_HIGH_VTI,
EVENT_AL_LOW_VTE,
EVENT_AL_VALVE_LEAKAGE,
EVENT_AL_APNEA,
EVENT_AL_LOW_FIO2,
EVENT_AL_HIGH_FIO2,
EVENT_AL_CHECK_PRESSURE,
EVENT_AL_CHECK_VALVE,
EVENT_AL_AC_POWER_FAIL,
EVENT_AL_DC_POWER_FAIL,
EVENT_AL_LOW_BATTERY,
EVENT_AL_END_OF_BATTERY,
EVENT_AL_CHECK_BATTERY,
EVENT_AL_HIGH_SPO2,
EVENT_AL_NO_FIO2_SENSOR,
EVENT_AL_LEAKAGE,
EVENT_AL_LEAK_OCCLUSION,
EVENT_AL_LOW_SPO2,
EVENT_AL_NO_BATTERY,
EVENT_AL_NO_PROXI,
EVENT_AL_O2_LEAKAGE,
EVENT_AL_CHECK_VOLUME,
EVENT_AL_CHECK_BUZZER,
EVENT_AL_CHECK_FIO2,
EVENT_AL_CHECK_O2,
EVENT_AL_CHECK_O2_SUPPLY,
EVENT_AL_CHECK_PROXIMAL,
EVENT_AL_CHECK_REMOTE_ALARM,
EVENT_AL_CHECK_SUPPLY,
RESERVED_123,
EVENT_AL_CONNECT_VALVE,
EVENT_AL_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_DISCONNECT_VALVE,
EVENT_AL_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_PROXIMAL_DISCONNECTION,
EVENT_AL_TECHNICAL_PROBLEM,
EVENT_AL_CHECK_VALVE_PRESSURE,
EVENT_AL_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_MISSING_O2_SUPPLY,
EVENT_AL_CONTROLLED_CYCLES,
RESERVED_134,
EVENT_AL_100_PER_CENT_O2,
EVENT_AL_UNKNOWN_BATTERY,
EVENT_AL_CHECK_BATTERY_CHARGE,
RESERVED_138,
RESERVED_139,
RESERVED_140,
RESERVED_141,
EVENT_AL_NEW_VERSION,
EVENT_AL_EEPROM_OUT_OF_RANGE,
EVENT_AL_EEPROM_LOOSING_PARAM,
RESERVED_145,
EVENT_AL_HIGH_VTE,
EVENT_AL_KEYBOARD,
EVENT_AL_CALIBRATION,
EVENT_AL_COOLING_FAN,
EVENT_AL_AMBIENT_TEMP,
EVENT_AL_BAT_TEMP,
EVENT_AL_SUPPLY_MEASURE,
EVENT_AL_FAILURE_24V,
EVENT_AL_TURBINE_OVERHEAT,
EVENT_AL_OCCLUSION,
EVENT_AL_CPU_REFERENCE,
RESERVED_157,
EVENT_AL_BREATH_TIME_CYCLED,
EVENT_AL_INSP_FLOW_FAILURE,
EVENT_AL_LOW_BUZZER_BATTERY,
RESERVED_161,
EVENT_AL_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_NEEDED_FIO2_CALIB,
EVENT_AL_VOLUNTARY_STOP,
RESERVED_165,
RESERVED_166,
RESERVED_167,
End_Event_Alarm,
Start_End_Of_Alarm,
EVENT_AL_END_OF_APNEA,
EVENT_AL_END_OF_CHECK_BATTERY,
EVENT_AL_END_OF_DISCONNECTION,
EVENT_AL_END_OF_CHECK_FIO2,
EVENT_AL_END_OF_CHECK_O2,
EVENT_AL_END_OF_CHECK_O2_SUPPLY,
EVENT_AL_END_OF_CHECK_PRESSURE,
EVENT_AL_END_OF_CHECK_PROXIMAL,
RESERVED_178,
RESERVED_179,
EVENT_AL_END_OF_CHECK_SUPPLY,
EVENT_AL_END_OF_CHECK_VALVE,
EVENT_AL_END_OF_LEAK_OCCLUSION,
EVENT_AL_END_OF_CHECK_VOLUME,
EVENT_AL_END_OF_CONNECT_VALVE,
EVENT_AL_END_OF_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_DISCONNECT_VALVE,
EVENT_AL_END_OF_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_HIGH_FIO2,
EVENT_AL_END_OF_HIGH_PRESSURE,
EVENT_AL_END_OF_HIGH_RATE,
EVENT_AL_END_OF_HIGH_SPO2,
EVENT_AL_END_OF_HIGH_VTI,
EVENT_AL_END_OF_LEAKAGE,
EVENT_AL_END_OF_LOW_FIO2,
EVENT_AL_END_OF_LOW_SPO2,
EVENT_AL_END_OF_LOW_VTE,
EVENT_AL_END_OF_LOW_VTI,
EVENT_AL_END_OF_NO_BATTERY,
EVENT_AL_END_OF_NO_FIO2_SENSOR,
EVENT_AL_END_OF_NO_PROXI,
EVENT_AL_END_OF_O2_LEAKAGE,
EVENT_AL_END_OF_PROXI_DISCONNECTION,
EVENT_AL_END_OF_TECHNICAL_PROBLEM,
EVENT_AL_END_OF_VALVE_LEAKAGE,
EVENT_AL_END_OF_HIGH_VTE,
EVENT_AL_END_KEYBOARD,
EVENT_AL_END_CHECK_VALVE_PRESSURE,
EVENT_AL_END_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_END_MISSING_O2_SUPPLY,
EVENT_AL_END_CONTROLLED_CYCLES,
RESERVED_211,
EVENT_AL_END_OF_100_PER_CENT_O2,
EVENT_AL_END_OF_UNKNOWN_BATTERY,
EVENT_AL_END_OF_CHECK_BATTERY_CHARGE,
RESERVED_215,
RESERVED_216,
RESERVED_217,
RESERVED_218,
EVENT_AL_END_COOLING_FAN,
EVENT_AL_END_AMBIENT_TEMP,
EVENT_AL_END_BAT_TEMP,
EVENT_AL_END_SUPPLY_MEASURE,
EVENT_AL_END_FAILURE_24V,
RESERVED_224,
EVENT_AL_END_OCCLUSION,
EVENT_AL_END_CPU_REFERENCE,
RESERVED_227,
EVENT_AL_END_BREATH_TIME_CYCLED,
EVENT_AL_END_OF_INSP_FLOW_FAILURE,
EVENT_AL_END_LOW_BUZZER_BATTERY,
RESERVED_231,
EVENT_AL_END_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_END_OF_VOLUNTARY_STOP,
RESERVED_234,
RESERVED_235,
End_Alarm,
Start_Anomalies,
RESERVED_238,
EVENT_ALT_INSP_FLOW_OFFSET,
EVENT_ALT_EXH_FLOW_OFFSET,
EVENT_ALT_VALVE_PRESSURE_OFFSET,
EVENT_ALT_INT_PRESS_OFSSET,
EVENT_ALT_SPEED,
EVENT_ALT_CLOCK,
EVENT_ALT_PROXI_PRESS_OFSSET,
EVENT_ALT_VERY_LOW_PROXI_PRESS,
EVENT_ALT_VERY_LOW_INT_PRESS,
EVENT_ALT_VERY_LOW_VALVE_PRESS,
EVENT_ALT_LOOSE_FLASH_POINTER,
EVENT_ALT_FIO2_OFFSET,
EVENT_ALT_O2_FLOW_OFFSET,
EVENT_ALT_O2_PRESSURE_OFFSET,
RESERVED_253,
RESERVED_254,
End_Anomalie};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Control.h"
enum e_DB_CONTROL {
VENTIL_AUTHORIZATION_U16,
CURRENT_MODE_U16,
CHANGE_MODE_U16,
VENTIL_STATE_U16,
SIMV_CYCLES_U16,
CALIB_PATIENT_PRESS_REQ_U16,
CALIB_FLOW_INSP_REQ_U16,
CALIB_FLOW_EXH_REQ_U16,
CALIB_VALVE_PRESS_REQ_U16,
CALIB_FAS_VALVE_REQ_U16,
INHIBITED_BUZZER_U16,
INHIBITION_AUTHORIZATION_U16,
CANCELLED_ALARM_U16,
BUZZER_CMD_U16,
CALIB_ADJUST_CMD_U16,
SETUP_CONTROL_SET_POINT_U16,
SETUP_CONTROL_TYPE_U16,
SUPPLY_AC_DC_BAT_U16,
DISPLAY_BATTERY_U16,
CURRENT_PATIENT_COUNTER_HOUR_U16,
CURRENT_PATIENT_COUNTER_MIN_U16,
CURRENT_MACHINE_COUNTER_HOUR_U16,
CURRENT_MACHINE_COUNTER_MIN_U16,
CONTROL_BUZZER_U16,
VALVE_DETECTED_U16,
AC_SELECTED_U16,
DC_SELECTED_U16,
REMOTE_STATE_U16,
PROXI_DETECTED_U16,
ALARM_DETECTED_U16,
NEW_ALARM_HP_DETECTED_U16,
Start_Limit_Setting,
LIMIT_LOW_PIP_U16,
LIMIT_HIGH_PIP_U16,
LIMIT_PEEP_U16,
LIMIT_VOL_CONTROL_U16,
LIMIT_TI_CONTROL_U16,
LIMIT_CONTROL_R_U16,
LIMIT_PI_U16,
LIMIT_LOW_VTI_U16,
LIMIT_HIGH_VTI_U16,
LIMIT_LOW_VTE_U16,
LIMIT_HIGH_VTE_U16,
LIMIT_P_SUPPORT_U16,
LIMIT_TI_MIN_U16,
LIMIT_TI_MAX_U16,
LIMIT_SPO2_MINI_U16,
LIMIT_SPO2_MAXI_U16,
LIMIT_INSP_SENS_U16,
LIMIT_SIGH_U16,
LIMIT_TARGET_VT_U16,
LIMIT_APNEA_U16,
LIMIT_HIGH_FIO2,
LIMIT_LOW_FIO2,
LIMIT_SPO2,
LIMIT_BACKUP_R_U16,
LIMIT_PMAX_U16,
End_Limit_Setting,
UNCANCEL_CMD_U16,
SUPPLY_BUS_FAILURE_U16,
KEYBOARD_ANOMALIE_U16,
VALIDATION_BIP_U16,
BIP_RUNNING_U16,
MAINTENANCE_MODE_U16,
CALIBRATION_MODE_U16,
TEST_BUZ_CARD_U16,
TEST_BUZ_SEC_U16,
TEST_VOLUME_U16,
CANCEL_ALARM_ASKED,
KEY_EVENT_U16,
BACKLIGHT_OFF_U16,
HIGH_PRESSURE_LED_REMINDER_U16,
RECORD_SETTINGS_USB_U16,
APPLY_SETTINGS_USB_U16,
ERASE_KEY_USB_U16,
RECORD_TIME_TENDANCE_U16,
ERROR_SPO2_SENSOR_DETECTED,
DETECTED_FIO2_SENSOR,
CALIBRATED_FIO2_SENSOR,
CALIB_ADJUST_VANNE_FIO2_CMD,
CALIB_FIO2_REQ_U16,
CALIB_FLOW_O2_REQ_U16,
MEMO_CMD_VANNE_FIO2_TO_CALIB,
CALIB_PRESS_O2_REQ_U16,
FLOW_SAT_FLAG_U16,
HIGH_PRESSURE_DETECTED_U16,
HIGH_PRESSURE_EXHALATION_DETECTED_U16,
HIGH_PRESSURE_FILTER_WINDOW_U16,
FIO2_100_ACTIVE,
LOAD_USB_SETTINGS_U16,
COM_READY_U16,
START_MONITORING_U16,
SIMV_PSV_CYCLE_U16,
BLOC_EXPI_DETECTED_U16,
ADJUSTMENT_IN_PROGRESS_U16,
VALVE_DETECT_IN_PROGRESS_U16,
EXHAL_FLOW_USE_U16,
FLAT_INT_U16,
FLAT_PROXI_U16,
VALVE_O2_CMD_U16,
CPAP_TRIG_I_U16,
CPAP_TRIG_E_U16,
CONTROLER_TYPE_U16,
VTI_DISPLAY_DELAY_U16,
VOLUNTARY_STOP_U16,
SIMV_CONTROLLED_INSP_U16,
END_OF_OPERATION_U16,
CIRCUIT_CHECK_MODE_U16,
end_of_db_control_table};
#line 129 "..\\..\\SRC\\GENERAL\\Structure.h"
enum e_StorageType {
FULL,
MSB,
LSB,
STORAGE_CONSTANT};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Config.h"
enum e_DB_CONFIG {
ADJUST_LANGUAGE_U16,
ADJUST_MODE_U16,
ADJUST_KEYLOCK_U16,
VENTIL_REQ_U16,
OFFSET_INSP_FLOW_1_U16,
OFFSET_INSP_FLOW_2_U16,
OFFSET_INSP_FLOW_3_U16,
OFFSET_INSP_FLOW_4_U16,
OFFSET_INSP_FLOW_5_U16,
OFFSET_INSP_FLOW_6_U16,
OFFSET_INSP_FLOW_7_U16,
OFFSET_INSP_FLOW_8_U16,
OFFSET_EXH_FLOW_1_U16,
OFFSET_EXH_FLOW_2_U16,
OFFSET_EXH_FLOW_3_U16,
OFFSET_EXH_FLOW_4_U16,
OFFSET_EXH_FLOW_5_U16,
OFFSET_EXH_FLOW_6_U16,
OFFSET_EXH_FLOW_7_U16,
OFFSET_EXH_FLOW_8_U16,
OFFSET_O2_FLOW_1,
OFFSET_O2_FLOW_2,
OFFSET_O2_FLOW_3,
OFFSET_O2_FLOW_4,
OFFSET_O2_FLOW_5,
OFFSET_O2_FLOW_6,
OFFSET_O2_FLOW_7,
OFFSET_PATIENT_PRESS_1_U16,
OFFSET_PATIENT_PRESS_2_U16,
OFFSET_PATIENT_PROX_PRESS_1_U16,
OFFSET_PATIENT_PROX_PRESS_2_U16,
OFFSET_PRESS_O2,
I_VALVE_REF_U16,
OFFSET_FAS_VALVE_1_U16,
OFFSET_FAS_VALVE_2_U16,
OFFSET_FAS_VALVE_3_U16,
OFFSET_FAS_VALVE_4_U16,
OFFSET_FAS_VALVE_5_U16,
OFFSET_FAS_VALVE_6_U16,
OFFSET_FAS_VALVE_7_U16,
OFFSET_FAS_VALVE_8_U16,
OFFSET_FAS_VALVE_9_U16,
OFFSET_VALVE_PRESS_U16,
OFFSET_VALVE_PRESS_2_U16,
OFFSET_FIO2,
ADJUST_BRIGHTNESS_U16,
ADJUST_BACKLIGHT_U16,

SAVED_PATIENT_COUNTER_HOUR_U16,

SAVED_PATIENT_COUNTER_MIN_U16,

SAVED_MACHINE_COUNTER_HOUR_U16,

SAVED_MACHINE_COUNTER_MIN_U16,

RETRIEVAL_EVENT_ADRESS_MSB_U16,

RETRIEVAL_EVENT_ADRESS_LSB_U16,

FLASH_MONIT_WRITE_BLOCK_U16,

FLASH_MONIT_WRITE_PAGE_U16,

FLASH_MONIT_WRITE_COLUMN_U16,

FLASH_TREND_WRITE_BLOCK_U16,

FLASH_TREND_WRITE_PAGE_U16,

FLASH_TREND_WRITE_COLUMN_U16,

FLASH_FIRST_PARTITION_FULL_U16,

FLASH_SECOND_PARTITION_FULL_U16,

SPEED_COM_U16,
RAZ_COUNTER_PAT_DATE_U16,
RAZ_COUNTER_PAT_MONTH_U16,
RAZ_COUNTER_PAT_YEAR_U16,
RAZ_COUNTER_PAT_HOUR_U16,
RAZ_COUNTER_PAT_MIN_U16,
BAD_ERASE_U16,
SOUND_LEVEL_SELECT_U16,
PREVIOUS_SOUND_LEVEL_SELECT_U16,
CURVE_DISPLAY_TYPE_MODE_U16,
CURVE_MAX_PRESSURE_U16,
CURVE_MAX_FLOW_U16,
CURVE_MAX_VT_U16,
CURVE_MAX_TIME_U16,
CURVE_DRAW_MODE_U16,
ADJUST_CYCLING_MODE_U16,
ADJUST_KEY_TONE_U16,
ADJUST_WAVEFORM_DISPLAY_U16,
ADJUST_BAROMETRIC_CORRECTOR_U16,
ADJUST_FIO2,
ADJUST_FIO2_SELECT,
ADJUST_LOW_FIO2,
ADJUST_HIGH_FIO2,
ADJUST_LOW_SPO2,
ADJUST_HIGH_SPO2,
SPO2_LOW_SELECT,
SPO2_HIGH_SELECT,
FIO2_LOW_SELECT,
FIO2_HIGH_SELECT,
PRESSURE_UNIT_U16,
TRIGG_E_POSITIVE,
APNEA_ALARM_ACTIVATION,
FLASH_MEMORY_MANUFACTURER,
FLASH_MEMORY_DEVICE,
FLASH_MEMORY_FIVE_ADDRESS_CYCLES,
PARAM_COMPATIBILITY,
IHM_LOCKED_FRAME_ID,
ADJUST_PEDIATRIC_CIRCUIT_U16,
PREVIOUS_MODE_U16,
PRESSURE_SUPPORT_RELATIVE_U16,
PRESSURE_SUPPORT_CHANGED_U16,
VOLUNTARY_STOP_ALARM_ACTIVATION,
SOUND_TYPE_SELECT_U16,
end_of_db_config_table};
#line 28 "..\\..\\SRC\\DATABASE\\DB_Rtc.h"
enum e_DB_RTC {
DB_RTC_SECOND_U16,
DB_RTC_MINUTE_U16,
DB_RTC_HOUR_U16,
DB_RTC_DAY_U16,
DB_RTC_MONTH_U16,
DB_RTC_YEAR_U16,
ADJUST_RTC_REQ_U16,
ADJUST_RTC_SECOND_U16,
ADJUST_RTC_MINUTE_U16,
ADJUST_RTC_HOUR_U16,
ADJUST_RTC_DAY_U16,
ADJUST_RTC_MONTH_U16,
ADJUST_RTC_YEAR_U16,
end_of_db_rtc_table};
#line 37 "..\\..\\SRC\\DATABASE\\DB_Current.h"
enum e_DB_ADJUST_CURRENT {
ADJUST_VOL_CONTROL_U16,
ADJUST_P_CONTROL_U16,
ADJUST_PEEP_U16,
ADJUST_P_SUPPORT_U16,
ADJUST_RAMP_U16,
ADJUST_CONTROL_R_U16,
ADJUST_BACKUP_R_U16,
ADJUST_HIGH_R_U16,
HIGH_R_NO_SELECT_U16,
ADJUST_TI_CONTROL_U16,
ADJUST_INSP_SENS_U16,
INSP_SENS_NO_SELECT_U16,
ADJUST_EXH_SENS_U16,
AUTO_EXH_SENS_SELECT_U16,
ADJUST_APNEA_U16,
AUTO_APNEA_SELECT_U16,
ADJUST_LOW_PIP_U16,
ADJUST_HIGH_PIP_U16,
ADJUST_LOW_VTE_U16,
LOW_VTE_NO_SELECT_U16,
ADJUST_HIGH_VTE_U16,
HIGH_VTE_NO_SELECT_U16,
ADJUST_RISE_TIME_U16,
ADJUST_LOW_VM_U16,
LOW_VM_NO_SELECT_U16,
ADJUST_HIGH_VM_U16,
HIGH_VM_NO_SELECT_U16,
ADJUST_LOW_VTI_U16,
LOW_VTI_NO_SELECT_U16,
ADJUST_HIGH_VTI_U16,
HIGH_VTI_NO_SELECT_U16,
ADJUST_TI_MIN_U16,
TI_MIN_AUTO_SELECT_U16,
ADJUST_TI_MAX_U16,
TI_MAX_AUTO_SELECT_U16,
PI_SET_POINT_U16,
BACKUP_R_NO_SELECT_U16,
P_SUPPORT_NO_SELECT_U16,
CONTROL_R_NO_SELECT_U16,
PEEP_NO_SELECT_U16,
RISE_TIME_U16,
ADJUST_HIGH_LEAK_U16,
HIGH_LEAK_SELECT_U16,
CURRENT_USED_43_U16,
CURRENT_USED_44_U16,
CURRENT_USED_45_U16,
ADJUST_TARGET_VT_U16,
TARGET_VT_SELECT_U16,
ADJUST_MAX_PRESSURE_U16,
ADJUST_EXH_SENS_NEGATIVE_U16,
AUTO_EXH_SENS_NEG_SELECT_U16,
ADJUST_SIGH_SELECT_U16,
ADJUST_SIGH_CPT_U16,
ADJUST_SIGH_VT_COEF_U16,
ADJUST_DISCONNECTION_DELAY_U16,
DISCONNECTION_DELAY_AUTO_U16,
end_of_adjust_table};
#line 35 "..\\..\\SRC\\DATABASE\\DB_Compute.h"
enum e_DB_COMPUTE {
MEASURE_VALVE_PRESSURE_S16,
FILTER_VALVE_PRESSURE_S16,
MEASURE_INTERNAL_PRESSURE_S16,
FILTER_INTERNAL_PRESSURE_S16,
MEASURE_PATIENT_PRESSURE_PROXI_S16,
FILTER_PATIENT_PRESSURE_PROXI_S16,
MEASURE_PATIENT_PRESSURE_S16,
FILTER_PATIENT_PRESSURE_S16,
MEASURE_QINSP_S16,
FILTER_QI_S16,
FILTER_QI_LOW_S16,
MEASURE_QEXH_S16,
FILTER_QE_S16,
COMPUTED_VTE_U16,
COMPUTED_VTE_INSP_U16,
COMPUTED_PIP_U16,
COMPUTED_PEEP_U16,
COMPUTED_FIO2,
MEASURE_FIO2,
MEASURE_IE_NUMERATOR_U16,
MEASURE_IE_DENOMINATOR_U16,
MEASURE_TI_U16,
MEASURE_TI_HMI_U16,
MEASURE_TE_U16,
MEASURE_R_U16,
MEASURE_SPEED_BLOWER_U16,
FILTER_SPEED_BLOWER_S16,
COMPUTED_BATTERY_LEVEL_U16,
MEASURE_SUPPLY_5V_U16,
MEASURE_SUPPLY_24V_U16,
MEASURE_TEST_BUZZER_VOLTAGE_U16,
MEASURE_BUZZER_VOLTAGE_U16,
MEASURE_BATTERY_BUZZER_VOLTAGE_U16,
MEASURE_PFI_VOLTAGE_U16,
COMPUTED_PI_SET_POINT_U16,
COMPUTED_VTI_EXH_S16,
MEASURE_SPO2_U16,
MEASURE_HR_U16,
COMPUTED_LEAK_U16,
COMPUTED_LEAK_HMI_U16,
CURVE_CORRECTED_VT_WOB_U16,
CURVE_CORRECTED_FLOW_S16,
COMPUTED_TEMP_S16,
COMPUTED_VTI_U16,
COMPUTED_USED_44_U16,
COMPUTED_USED_45_U16,
MEASURE_BATTERY_VOLTAGE_U16,
COMPUTED_VMI_U16,
COMPUTED_VME_U16,
AVERAGE_PRESSURE_U16,
MEASURE_ABSOLUTE_PRESSURE_U16,
MEASURE_BLOWER_TEMPERATURE_S16,
COMPUTED_RISE_TIME_U16,
MEASURE_IT_U16,
MEASURE_BATTERY_CAPACITY_U16,
COMPUTED_PULSE_U16,
COMPUTE_CORRECTED_Q,
COMPUTED_TI_CONTROL_U16,
FILTER_QO2_S16,
FILTER_PRESSURE_O2_S16,
MEASURE_PRESSURE_O2_S16,
MEASURE_QO2_S16,
COMPUTED_IE_NUMERATOR_U16,
COMPUTED_IE_DENOMINATOR_U16,
COMPUTE_QEE_S16,
COMPUTED_I_T_U16,
MEAS_ABS_PRESS_MMHG_U16,
COMPUTED_RATE_U16,
BLOWER_COMMAND_U16,
MEASURE_ZERO_VALUE_U16,
COMPUTED_P_VALVE_MAX_U16,
CUMUL_PRESS_INSP_S16,
ESTIMATED_PROXIMAL_PRESSURE_S16,
MEASURE_QINSP_LEAKCORRECTED_S16,
MEASURE_VALVE_CURRENT_U16,
MEAN_INSP_VALVE_CURRENT_U16,
VALVE_COMMAND_INIT_U16,
VALVE_COMMAND_MIN_U16,
VALVE_COMMAND_MAX_U16,
VALVE_COMMAND_COEFF_U16,
VALVE_COMMAND_U16,
LPF_PATIENT_PRESSURE_S16,
COMPUTED_LPF_PIP_U16,
LEAK_TEST_QI_S16,
LEAK_TEST_RESULT_U16,
end_of_db_compute_table}; struct __T51878692 { short d; short i; void (*f)();};
#line 33 "..\\..\\SRC\\GENERAL\\typedef.h"
typedef int e_BOOL;
#line 63
typedef unsigned char UBYTE;
typedef unsigned UWORD16;
#line 104 "..\\..\\SRC\\GENERAL\\enum.h"
typedef enum e_SYMBOL e_SYMBOL;
#line 391
typedef enum e_TYPE_OF_DB_TARGET e_TYPE_OF_DB_TARGET;
#line 417
typedef enum e_MODE_TYPES e_MODE_TYPES;
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject {
#line 45
e_TYPE_OF_DB_TARGET DbTarget;

UWORD16 IdParam; struct __T51878692 *__vptr;};
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject { struct MenuObject __b_MenuObject;
#line 47
struct DisplayObject *Parent;


UWORD16 Line;


UWORD16 Col;


UWORD16 Page;

e_BOOL Visible;

e_BOOL RefreshE;};
#line 57 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
typedef enum ePANIC_MODULE ePANIC_MODULE;
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject { struct DisplayObject __b_DisplayObject;
#line 47
UWORD16 Font;

e_BOOL ReverseVideo;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField { struct FieldObject __b_FieldObject;
#line 41
UWORD16 Value; UWORD16 NbDigit; UWORD16 Divider;

e_BOOL DisplayZero; e_BOOL Float; e_BOOL SignValue;
#line 51
e_BOOL ChildBackgroundEqualParent;

e_BOOL IEDisplay;};
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField { struct FieldObject __b_FieldObject;
#line 41
UBYTE *Text;};
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 Height;


UWORD16 Width;

e_BOOL FloodBlack;
e_BOOL RoundHigh;
e_BOOL RoundLow;};
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField { struct FieldObject __b_FieldObject;
#line 40
e_SYMBOL Symbol;

e_BOOL BarredSymbol;};
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog { struct DisplayObject __b_DisplayObject;
#line 46
struct TextField FLine1;
e_BOOL Line1Centered;

struct TextField FLine2;
e_BOOL Line2Centered;

struct TextField FLine3;
e_BOOL Line3Centered;

struct SymbolField FSymbol;

struct GraphicBox MonitorBox;

UBYTE TextLine[3][33];

e_BOOL Line1Ok; e_BOOL Line2Ok; e_BOOL Line3Ok; e_BOOL SymbolOk;

UWORD16 WBox;};
#line 46 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
typedef enum DataType DataType;

struct Loupe { struct DisplayObject __b_DisplayObject;



struct TextField FValueS;

struct ValueField FValueI;

e_BOOL StringValue;
e_BOOL HaveText;

DataType Dtype;
#line 68
struct MessageDialog Message;

struct GraphicBox MonitorBox;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm { struct Loupe __b_Loupe;};
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label { struct DisplayObject __b_DisplayObject;
#line 44
e_SYMBOL PreviousIcon;

UBYTE **Name;

struct Loupe *LoupeObject;

struct SymbolField FIcon;

struct TextField FLabel;

e_BOOL Centered;};
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject { struct Label __b_Label;
#line 42
UWORD16 ValueTemp;


UWORD16 IdFlagTemp;


UWORD16 ValueFlagTemp;

e_TYPE_OF_DB_TARGET DbIdFlagTemp;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField { struct ValueField __b_ValueField;
#line 41
UBYTE *Text;

e_BOOL IsString;};
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue { struct EditableObject __b_EditableObject;
#line 46
struct TextField FUnit1;
struct TextField FSep;

struct ValueTextField FValue1;

e_BOOL LabelOnly;
e_BOOL ValueIsString;
e_BOOL StopMonitoring;

UBYTE **NameUnit;

UWORD16 Divider;

e_BOOL NbDigitsChanged;
e_BOOL InitNbDigits;

e_BOOL MaxDisplayValueConfigured;
UWORD16 MaxDisplayValue;};
#line 212 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
struct tInfoNodeForMode {
UWORD16 Visible;
UWORD16 Order;};
typedef struct tInfoNodeForMode tInfoNodeForMode;
#line 231
struct tInfo {
struct DisplayObject *pObject;
tInfoNodeForMode InfoByMode[6];};
typedef struct tInfo tInfo;
#line 272
typedef enum e_OBJECT e_OBJECT;
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame { struct DisplayObject __b_DisplayObject;
#line 48
struct LoupeAlarm LoupeA;

struct Loupe *LoupeObject; struct Loupe LoupeV;

e_BOOL MonitorOn;
e_BOOL MessageOn;
e_BOOL ImpactDisplay;

tInfo *InfoTablePtr;
UWORD16 MaxObjects;
UWORD16 SpaceHeight;
UWORD16 SpaceFirstLine;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue { struct LabelOneValue __b_LabelOneValue;
#line 43
struct TextField FUnit2;

struct ValueTextField FValue2;

UBYTE **NameUnit2;

UWORD16 ValueState;
UWORD16 IdParam2;
UWORD16 Divider2;

e_TYPE_OF_DB_TARGET DbTarget2;

e_BOOL ColAdjust;

e_BOOL MaxDisplayValue2Configured;
UWORD16 MaxDisplayValue2;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueLock.hpp"
struct LabelTwoValueLock { struct LabelTwoValue __b_LabelTwoValue;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueTrig.hpp"
struct LabelTwoValueTrig { struct LabelTwoValueLock __b_LabelTwoValueLock;
#line 42
struct SymbolField FTrig;

e_BOOL Trigger;
e_BOOL Float;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelOneValueTrig.hpp"
struct LabelOneValueTrig { struct LabelOneValue __b_LabelOneValue;
#line 42
struct SymbolField FTrig;

e_BOOL Trigger;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelAlarme.hpp"
struct LabelAlarme { struct Label __b_Label;
#line 47
UWORD16 AlarmId;};
#line 34 "..\\..\\SRC\\HMI\\HMI_BarGraph.hpp"
struct BarGraph { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 Position;


UWORD16 Value;


UWORD16 Pep;


UWORD16 Pmax;


UWORD16 firstShow;


UWORD16 IdPep;


UWORD16 IdPmax;


UWORD16 Divider;


UBYTE **NameUnit;

struct TextField TFUnit;};
#line 46 "..\\..\\SRC\\HMI\\HMI_MessageList.hpp"
struct __Q2_11MessageList8TMessage {
UWORD16 Id;
UBYTE Text[3][33];
e_BOOL Used;};

typedef struct __Q2_11MessageList8TMessage __Q2_11MessageList8TMessage;
#line 41
struct MessageList {
#line 54
__Q2_11MessageList8TMessage Messages[15];

UBYTE InListTable[11];};
#line 37 "..\\..\\SRC\\HMI\\HMI_LabelAlarmeTwoLine.hpp"
struct LabelAlarmeTwoLine { struct LabelAlarme __b_LabelAlarme;
#line 44
struct TextField FLine2;

UBYTE TextLine[3][33];

UWORD16 WBox;

struct MessageList AlarmList;};
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject { struct DisplayObject __b_DisplayObject;
#line 44
struct LabelOneValue LOVPercent;

struct LabelTwoValue LTVJauge;

struct SymbolField SFEqual;

e_BOOL JaugeAvailable;
e_BOOL BusFailure;
e_BOOL UnknownBattery;
e_BOOL CheckSupply;
e_BOOL CheckBattery;
e_BOOL ForcedDisplay;

UWORD16 CurrentDisplay;};
#line 53 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.hpp"
struct FrameVentilation { struct VFrame __b_VFrame;
#line 59
struct BarGraph BarVentil;
struct SymbolField SFValve;

struct LabelOneValue LOVPip;
struct LabelOneValue LOVVti;
struct LabelOneValue LOVVte;
struct LabelOneValue LOVVm;
struct LabelOneValue LOVR;
struct LabelOneValue LOVFIO2;
struct LabelOneValue LOVSPO2;
struct LabelOneValue LOVFuite;
struct LabelTwoValueTrig LTVIE;
struct LabelOneValueTrig LOVIT;

struct BatteryObject BOBat;

e_MODE_TYPES Mode;

e_BOOL BatVisible;
e_BOOL ValveVisible;
e_BOOL IsInhibApneaAlarm;
e_BOOL IsInhibAlarm;
e_BOOL IsCancelAlarm;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;
e_BOOL ExhalFlowUsed;

struct MessageDialog Message;

struct LabelAlarmeTwoLine LAlarme;

struct GraphicBox MonitorBox; struct GraphicBox AlarmBox;

struct DisplayObject *RefreshTable[16];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;

struct Label PressConvention;}; extern void *__nw__FUi(unsigned);
#line 65 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
extern void InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(struct MenuObject *const, UWORD16, e_TYPE_OF_DB_TARGET);
#line 73
extern void Lock__10MenuObjectFi(struct MenuObject *const, e_BOOL);
extern void WinFocus__10MenuObjectFv(struct MenuObject *const);
extern void LoseFocus__10MenuObjectFv(struct MenuObject *const);
extern void StartModifMode__10MenuObjectFv(struct MenuObject *const);
extern void StopModifMode__10MenuObjectFv(struct MenuObject *const);
extern void CancelModifMode__10MenuObjectFv(struct MenuObject *const);
extern void IncreaseValue__10MenuObjectFv(struct MenuObject *const);
extern void DecreaseValue__10MenuObjectFv(struct MenuObject *const);
extern void ModifNextValue__10MenuObjectFv(struct MenuObject *const);
#line 83 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
extern void SetLine__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetLine__13DisplayObjectFv(struct DisplayObject *const);

extern void SetCol__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetCol__13DisplayObjectFv(struct DisplayObject *const);


extern UWORD16 GetPage__13DisplayObjectFv(struct DisplayObject *const);

extern UWORD16 GetFullValue__13DisplayObjectFv(struct DisplayObject *const);

extern void SetParent__13DisplayObjectFP13DisplayObject(struct DisplayObject *const, struct DisplayObject *);


extern void Init__13DisplayObjectFUiT1(struct DisplayObject *const, UWORD16, UWORD16);
extern void SetVisible__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void SetForcedVisible__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);



extern e_BOOL IsRefreshObject__13DisplayObjectFv(struct DisplayObject *const);


extern void Refresh__13DisplayObjectFv(struct DisplayObject *const);


extern void Blink__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);


extern void FreezeMonitoringMode__13DisplayObjectFv(struct DisplayObject *const);

extern void FreezeMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void StartMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void StopMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void SetLanguage__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetLanguage__13DisplayObjectFv(struct DisplayObject *const);
extern void SetEndOfInit__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern e_BOOL GetEndOfInit__13DisplayObjectFv(struct DisplayObject *const);

extern UBYTE *GetName__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetStringValue1__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetStringValue2__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetUnit1__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetUnit2__13DisplayObjectFv(struct DisplayObject *const);
#line 83 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
extern void Panic__5ToolsSF13ePANIC_MODULE(ePANIC_MODULE);
#line 65 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
extern struct GraphicBox *__ct__10GraphicBoxFv(struct GraphicBox *const);

extern void Init__10GraphicBoxFUiN31iN25(struct GraphicBox *const, UWORD16, UWORD16, UWORD16, UWORD16, e_BOOL, e_BOOL, e_BOOL);
#line 79
extern UWORD16 GetWidth__10GraphicBoxFv(struct GraphicBox *const);
#line 90
extern void RefreshBoxRound__10GraphicBoxFUi(struct GraphicBox *const, UWORD16);
#line 58 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
extern struct SymbolField *__ct__11SymbolFieldFv(struct SymbolField *const);



extern void Init__11SymbolFieldFUiN21i8e_SYMBOL(struct SymbolField *const, UWORD16, UWORD16, UWORD16, e_BOOL, e_SYMBOL);
#line 71
extern void SetBarredSymbol__11SymbolFieldFi(struct SymbolField *const, e_BOOL);
#line 79 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
extern struct MessageDialog *__ct__13MessageDialogFv(struct MessageDialog *const);

extern void SetMessage__13MessageDialogFPUc8e_SYMBOL(struct MessageDialog *const, UBYTE *, e_SYMBOL);

extern void Init__13MessageDialogFUiN31i(struct MessageDialog *const, UWORD16, UWORD16, UWORD16, UWORD16, e_BOOL);
#line 133
extern void SetWhithBox__13MessageDialogFUi(struct MessageDialog *const, UWORD16);
#line 72 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
extern struct Label *__ct__5LabelFv(struct Label *const);

extern void Init__5LabelF8e_SYMBOLPPUcUiT3(struct Label *const, e_SYMBOL, UBYTE **, UWORD16, UWORD16);
#line 88
extern void SetName__5LabelFPPUc(struct Label *const, UBYTE **);

extern UWORD16 GetPixelSize__5LabelFv(struct Label *const);
#line 96
extern void SetColLabel__5LabelFUi(struct Label *const, UWORD16);



extern void SetFontLabel__5LabelFUi(struct Label *const, UWORD16);
#line 83 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
extern struct LabelOneValue *__ct__13LabelOneValueFv(struct LabelOneValue *const);
#line 91
extern void Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2(struct LabelOneValue *const, e_SYMBOL, UBYTE **, UWORD16, UWORD16, UWORD16, UBYTE **);
#line 107
extern void SetMaxDisplayValue__13LabelOneValueFUi(struct LabelOneValue *const, UWORD16);
#line 118
extern void SetColSep__13LabelOneValueFUi(struct LabelOneValue *const, UWORD16);


extern void SetColValue1__13LabelOneValueFUi(struct LabelOneValue *const, UWORD16);
#line 132
extern void SetFontUnit1__13LabelOneValueFUi(struct LabelOneValue *const, UWORD16);


extern void SetFloatValue1__13LabelOneValueFi(struct LabelOneValue *const, e_BOOL);
#line 144
extern void SetDivider__13LabelOneValueFUi(struct LabelOneValue *const, UWORD16);


extern void SetNameUnit__13LabelOneValueFPPUc(struct LabelOneValue *const, UBYTE **);
#line 75 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
extern struct VFrame *__ct__6VFrameFv(struct VFrame *const);



extern void SetMessageOn__6VFrameFi(struct VFrame *const, e_BOOL);
extern e_BOOL IsMessageOn__6VFrameFv(struct VFrame *const);

extern void SetImpactDisplay__6VFrameFi(struct VFrame *const, e_BOOL);
extern e_BOOL GetImpactDisplay__6VFrameFv(struct VFrame *const);



extern void SetMonitorOn__6VFrameFi(struct VFrame *const, e_BOOL);

extern e_BOOL IsMonitorOn__6VFrameFv(struct VFrame *const);

extern void Show__6VFrameFv(struct VFrame *const);
extern void Hide__6VFrameFv(struct VFrame *const);
extern void ShowLoupe__6VFrameFv(struct VFrame *const);
extern void HideLoupe__6VFrameFv(struct VFrame *const);

extern struct Loupe *GetLoupeObject__6VFrameFv(struct VFrame *const);
#line 102
extern void SetInfoTable__6VFrameFP5tInfoUiN22(struct VFrame *const, tInfo *, UWORD16, UWORD16, UWORD16);
#line 108
extern e_BOOL CheckInfoTable__6VFrameFv(struct VFrame *const);


extern void SwitchDisplayConfigForOneMode__6VFrameF8e_OBJECTT112e_MODE_TYPES(struct VFrame *const, e_OBJECT, e_OBJECT, e_MODE_TYPES);


extern void SwitchDisplayConfigForAllModes__6VFrameF8e_OBJECTT1(struct VFrame *const, e_OBJECT, e_OBJECT);

extern void RebuildFrameTree__6VFrameF12e_MODE_TYPES(struct VFrame *const, e_MODE_TYPES);
extern void ObjectsShow__6VFrameF12e_MODE_TYPES(struct VFrame *const, e_MODE_TYPES);
extern void ObjectsHide__6VFrameF12e_MODE_TYPES(struct VFrame *const, e_MODE_TYPES);
extern void ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(struct VFrame *const, e_MODE_TYPES, e_OBJECT);
extern void ObjectsHide__6VFrameF12e_MODE_TYPES8e_OBJECT(struct VFrame *const, e_MODE_TYPES, e_OBJECT);
extern void ObjectsRefreshEnable__6VFrameFi(struct VFrame *const, e_BOOL);
extern void ObjectsRefreshLanguage__6VFrameF12e_MODE_TYPES(struct VFrame *const, e_MODE_TYPES);
extern void ObjectsStopMonitoringMode__6VFrameFv(struct VFrame *const);
#line 81 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
extern void Init__13LabelTwoValueF8e_SYMBOLPPUcUiN23T2T3T2(struct LabelTwoValue *const, e_SYMBOL, UBYTE **, UWORD16, UWORD16, UWORD16, UBYTE **, UWORD16, UBYTE **);
#line 106
extern void SetMaxDisplayValue2__13LabelTwoValueFUi(struct LabelTwoValue *const, UWORD16);


extern void SetColValue2__13LabelTwoValueFUi(struct LabelTwoValue *const, UWORD16);
#line 58 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueLock.hpp"
extern void InitDbAccess__17LabelTwoValueLockFUi19e_TYPE_OF_DB_TARGETT1T2(struct LabelTwoValueLock *const, UWORD16, e_TYPE_OF_DB_TARGET, UWORD16, e_TYPE_OF_DB_TARGET);
#line 61 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueTrig.hpp"
extern struct LabelTwoValueTrig *__ct__17LabelTwoValueTrigFv(struct LabelTwoValueTrig *const);




extern void SetFloatValues__17LabelTwoValueTrigFi(struct LabelTwoValueTrig *const, e_BOOL);

extern void ShowTrigger__17LabelTwoValueTrigFv(struct LabelTwoValueTrig *const);
extern void HideTrigger__17LabelTwoValueTrigFv(struct LabelTwoValueTrig *const);


extern void SetColTrigger__17LabelTwoValueTrigFUi(struct LabelTwoValueTrig *const, UWORD16);
#line 60 "..\\..\\SRC\\HMI\\HMI_LabelOneValueTrig.hpp"
extern struct LabelOneValueTrig *__ct__17LabelOneValueTrigFv(struct LabelOneValueTrig *const);



extern void ShowTrigger__17LabelOneValueTrigFv(struct LabelOneValueTrig *const);
extern void HideTrigger__17LabelOneValueTrigFv(struct LabelOneValueTrig *const);

extern void SetTrigger__17LabelOneValueTrigFi(struct LabelOneValueTrig *const, e_BOOL);
extern void SetColTrigger__17LabelOneValueTrigFUi(struct LabelOneValueTrig *const, UWORD16);
#line 92 "..\\..\\SRC\\HMI\\HMI_BarGraph.hpp"
extern struct BarGraph *__ct__8BarGraphFv(struct BarGraph *const);

extern void Init__8BarGraphFUiN31PPUc(struct BarGraph *const, UWORD16, UWORD16, UWORD16, UWORD16, UBYTE **);
#line 100
extern void InitDbAccess__8BarGraphFUi19e_TYPE_OF_DB_TARGETN21(struct BarGraph *const, UWORD16, e_TYPE_OF_DB_TARGET, UWORD16, UWORD16);
#line 117
extern void SetDivider__8BarGraphFUi(struct BarGraph *const, UWORD16);


extern void SetNameUnit__8BarGraphFPPUc(struct BarGraph *const, UBYTE **);
#line 66 "..\\..\\SRC\\HMI\\HMI_LabelAlarmeTwoLine.hpp"
extern struct LabelAlarmeTwoLine *__ct__18LabelAlarmeTwoLineFv(struct LabelAlarmeTwoLine *const);




extern void Init__18LabelAlarmeTwoLineF8e_SYMBOLPPUcUiT3(struct LabelAlarmeTwoLine *const, e_SYMBOL, UBYTE **, UWORD16, UWORD16);
#line 78
extern void SetWhithBox__18LabelAlarmeTwoLineFUi(struct LabelAlarmeTwoLine *const, UWORD16);


extern void RemoveAllAlarms__18LabelAlarmeTwoLineFv(struct LabelAlarmeTwoLine *const);
#line 73 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
extern struct BatteryObject *__ct__13BatteryObjectFv(struct BatteryObject *const);

extern void Init__13BatteryObjectFUiT1(struct BatteryObject *const, UWORD16, UWORD16);
#line 527 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.cpp"
extern void InitInfoVentilTable__16FrameVentilationFv(struct FrameVentilation *const);
#line 1510
extern void HideInhibApneaAlarm__16FrameVentilationFv(struct FrameVentilation *const);
#line 1485
extern void ShowInhibApneaAlarm__16FrameVentilationFv(struct FrameVentilation *const);
#line 44
extern struct FrameVentilation *__ct__16FrameVentilationFv(struct FrameVentilation *);
#line 118
extern void init__16FrameVentilationFv(struct FrameVentilation *const);
#line 620
extern void ShowTrigger__16FrameVentilationFv(struct FrameVentilation *const);
#line 643
extern void HideTrigger__16FrameVentilationFv(struct FrameVentilation *const);
#line 1096
extern void StopMonitoringMode__16FrameVentilationFv(struct FrameVentilation *const);
#line 1116
extern void StartMonitoringMode__16FrameVentilationFv(struct FrameVentilation *const);
#line 1133
extern void StartMonitoringMode__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
#line 90
extern struct DisplayObject **GetRefreshTable__16FrameVentilationFv(struct FrameVentilation *const);
#line 871
extern void Show__16FrameVentilationFv(struct FrameVentilation *const);
#line 910
extern void Hide__16FrameVentilationFv(struct FrameVentilation *const);
#line 952
extern void SetMode__16FrameVentilationF12e_MODE_TYPES(struct FrameVentilation *const, e_MODE_TYPES);
#line 666
extern void SetBatVisible__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
#line 60
extern e_BOOL IsBatVisible__16FrameVentilationFv(struct FrameVentilation *const);




extern e_BOOL IsValveVisible__16FrameVentilationFv(struct FrameVentilation *const);
#line 695
extern void ShowBatAndValve__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 726
extern void ShowPressConvention__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 95
extern void SetPressConvention__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 745
extern void DisplayValve__16FrameVentilationFv(struct FrameVentilation *const);
#line 1177
extern void SetInibOk__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
#line 1206
extern void ShowInibOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 1232
extern void SetInhibApneaOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 1258
extern void ShowInhibApneaOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 1284
extern void SetCancelOk__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
#line 1314
extern void ShowCancelOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 1462
extern void SetExhalFlowUsed__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
#line 70
extern e_BOOL IsInhibAlarmVisible__16FrameVentilationFv(struct FrameVentilation *const);




extern e_BOOL IsInhibApneaAlarmVisible__16FrameVentilationFv(struct FrameVentilation *const);




extern e_BOOL IsCancelAlarmVisible__16FrameVentilationFv(struct FrameVentilation *const);
#line 1013
extern void ShowMonitoring__16FrameVentilationFv(struct FrameVentilation *const);
#line 1037
extern void HideMonitoring__16FrameVentilationFv(struct FrameVentilation *const);
#line 1062
extern void ShowMessage__16FrameVentilationFiPUc8e_SYMBOL(struct FrameVentilation *const, e_BOOL, UBYTE *, e_SYMBOL);
#line 932
extern void RefreshLanguage__16FrameVentilationFv(struct FrameVentilation *const);
#line 774
extern void ShowCurrentAlarme__16FrameVentilationFiUi(struct FrameVentilation *const, e_BOOL, UWORD16);
#line 813
extern void HideCurrentAlarme__16FrameVentilationFv(struct FrameVentilation *const);
#line 839
extern void RemoveAlarm__16FrameVentilationFUi(struct FrameVentilation *const, UWORD16);
#line 855
extern void RemoveAllAlarms__16FrameVentilationFv(struct FrameVentilation *const);
#line 85
extern struct DisplayObject *GetAlarmField__16FrameVentilationFv(struct FrameVentilation *const);
#line 1159
extern void EnableMonitZoneRefresh__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 977
extern void SetIESelected__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 1339
extern void SetValve__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
#line 1423
extern void Fio2MonitorEnabled__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 1442
extern void Spo2MonitorEnabled__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
#line 1398
extern void SetPressureUnit__16FrameVentilationFPPUc(struct FrameVentilation *const, UBYTE **);
#line 572
extern void ObjectsStartMonitoringMode__16FrameVentilationFv(struct FrameVentilation *const);
#line 67 "..\\..\\SRC\\HMI\\HMI_DataBaseAccess.hpp"
extern e_BOOL ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);
#line 77 "..\\..\\SRC\\HMI\\HMI_InterfaceCppC.hpp"
extern void DisplayCross__13InterfaceCppCSFUiN51(UWORD16, UWORD16, UWORD16, UWORD16, UWORD16, UWORD16);
#line 117
extern void EraseZone__13InterfaceCppCSFUiN51(UWORD16, UWORD16, UWORD16, UWORD16, UWORD16, UWORD16);
#line 275 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
extern tInfo InfoVentil[11];
extern const tInfo cInfoVentil[11];
#line 42 "..\\..\\SRC\\HMI\\HMI_Message.hpp"
extern const UBYTE *const huge cMSG_Alarm[74][19];
#line 234
extern const UBYTE *const huge cMSG_RelativePressureAbs[19];
extern const UBYTE *const huge cMSG_RelativePressureRel[19];
#line 378
extern const UBYTE *const huge cMSG_IERation[19];
extern const UBYTE *const huge cMSG_ITRation[19];
#line 386
extern const UBYTE *const huge cMSG_FiO2[19];



extern const UBYTE *const huge cMSG_InsuflationPressurePeakMon[19];
extern const UBYTE *const huge cMSG_Vti[19];
extern const UBYTE *const huge cMSG_Vte[19];
extern const UBYTE *const huge cMSG_Vm[19];
extern const UBYTE *const huge cMSG_RateMon[19];


extern const UBYTE *const huge cMSG_FuiteMon[19];

extern const UBYTE *const huge cMSG_SpO2[19];
#line 462
extern const UBYTE *const huge cMSG_PressureUnit[3][19];


extern const UBYTE *const huge cMSG_VolumeUnit[19];
extern const UBYTE *const huge cMSG_VolumeLiterUnit[19];
extern const UBYTE *const huge cMSG_PerCentUnit[19];
extern const UBYTE *const huge cMSG_FlowUnit[19];

extern const UBYTE *const huge cMSG_FrequencyUnit[19];
#line 493
extern const UBYTE *const huge cMSG_NoneUnit[19];

extern const UBYTE *const huge cMSG_Colon[19]; extern struct __T51878692 __vtbl__16FrameVentilation[53]; struct __T51878692 __vtbl__16FrameVentilation[53] = {{((short)0),((short)0),((void (*)())0)},{((short)0),((short)0),((void (*)())Lock__10MenuObjectFi)},{((short)0),((short)0),((void (*)())
#line 495
WinFocus__10MenuObjectFv)},{((short)0),((short)0),((void (*)())LoseFocus__10MenuObjectFv)},{((short)0),((short)0),((void (*)())StartModifMode__10MenuObjectFv)},{((short)0),((short)0),((void (*)())StopModifMode__10MenuObjectFv)},{((short)0),((short)0),((void (*)())CancelModifMode__10MenuObjectFv)},{(
#line 495
(short)0),((short)0),((void (*)())IncreaseValue__10MenuObjectFv)},{((short)0),((short)0),((void (*)())DecreaseValue__10MenuObjectFv)},{((short)0),((short)0),((void (*)())ModifNextValue__10MenuObjectFv)},{((short)0),((short)0),((void (*)())SetLine__13DisplayObjectFUi)},{((short)0),((short)0),((void (
#line 495
*)())SetCol__13DisplayObjectFUi)},{((short)0),((short)0),((void (*)())GetFullValue__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())SetVisible__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())SetForcedVisible__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())
#line 495
Refresh__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())Show__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())Hide__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())Blink__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())RefreshLanguage__16FrameVentilationFv)},{(
#line 495
(short)0),((short)0),((void (*)())StopMonitoringMode__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())FreezeMonitoringMode__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())StartMonitoringMode__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())
#line 495
FreezeMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())StartMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())StopMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())
#line 495
SetLanguage__13DisplayObjectFUi)},{((short)0),((short)0),((void (*)())GetLanguage__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())SetEndOfInit__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())GetEndOfInit__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())
#line 495
GetName__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetStringValue1__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetStringValue2__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetUnit1__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())
#line 495
GetUnit2__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetRefreshTable__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())SetMessageOn__6VFrameFi)},{((short)0),((short)0),((void (*)())IsMessageOn__6VFrameFv)},{((short)0),((short)0),((void (*)())SetImpactDisplay__6VFrameFi)},{((
#line 495
short)0),((short)0),((void (*)())GetImpactDisplay__6VFrameFv)},{((short)0),((short)0),((void (*)())SetMonitorOn__6VFrameFi)},{((short)0),((short)0),((void (*)())IsMonitorOn__6VFrameFv)},{((short)0),((short)0),((void (*)())ShowLoupe__6VFrameFv)},{((short)0),((short)0),((void (*)())
#line 495
HideLoupe__6VFrameFv)},{((short)0),((short)0),((void (*)())GetLoupeObject__6VFrameFv)},{((short)0),((short)0),((void (*)())SetMode__16FrameVentilationF12e_MODE_TYPES)},{((short)0),((short)0),((void (*)())ShowMonitoring__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())
#line 495
HideMonitoring__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())RebuildFrameTree__6VFrameF12e_MODE_TYPES)},{((short)0),((short)0),((void (*)())ObjectsHide__6VFrameF12e_MODE_TYPES)},{((short)0),((short)0),((void (*)())ObjectsHide__6VFrameF12e_MODE_TYPES8e_OBJECT)},{((short)0),((short)0),((
#line 495
void (*)())ObjectsStartMonitoringMode__16FrameVentilationFv)},{((short)0),((short)0),((void (*)())StartMonitoringMode__16FrameVentilationFiT1)}};
#line 527 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.cpp"
void InitInfoVentilTable__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T51991864;
auto UWORD16 i; auto UWORD16 j;


for (i = 0U; (i < 11U); i++)
{
for (j = 0U; (j < 6U); j++)
{
((((tInfoNodeForMode *)(&(InfoVentil[i]).InfoByMode))[j]).Visible) = (((((const tInfoNodeForMode *)((const tInfoNodeForMode ( *)[6])&(cInfoVentil[i]).InfoByMode))[j]).Visible));
((((tInfoNodeForMode *)(&(InfoVentil[i]).InfoByMode))[j]).Order) = (((((const tInfoNodeForMode *)((const tInfoNodeForMode ( *)[6])&(cInfoVentil[i]).InfoByMode))[j]).Order));
}
}

((InfoVentil[OBJECT_VENTIL_LOVPIP]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVPip))));
((InfoVentil[OBJECT_VENTIL_LOVVTI]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVti))));
((InfoVentil[OBJECT_VENTIL_LOVVTE]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVte))));
((InfoVentil[OBJECT_VENTIL_LOVVM]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVm))));
((InfoVentil[OBJECT_VENTIL_LOVR]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVR))));
((InfoVentil[OBJECT_VENTIL_LOVFUITE]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFuite))));
((InfoVentil[OBJECT_VENTIL_LOVFIO2]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFIO2))));
((InfoVentil[OBJECT_VENTIL_LOVSPO2]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVSPO2))));
((InfoVentil[OBJECT_VENTIL_LTVIE]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))))));
((InfoVentil[OBJECT_VENTIL_LTVIT]).pObject) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVIT)))));
((InfoVentil[OBJECT_VENTIL_OBJECT_MAX]).pObject) = ((struct DisplayObject *)0);

SetInfoTable__6VFrameFP5tInfoUiN22(((struct VFrame *)this), InfoVentil, 10U, 151U, 33U);




if (!(CheckInfoTable__6VFrameFv(((struct VFrame *)this)))) {
Panic__5ToolsSF13ePANIC_MODULE(PANIC_MODULE_VENTIL); }

(__T51991864 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T51991864->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T51991864->d)))), ((this->Mode)))); return;
}
#line 1510
void HideInhibApneaAlarm__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52202364;

(__T52202364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T52202364->f)))(((struct SymbolField *)(((char *)(&this->InhibApneaAlarm)) + ((__T52202364->d)))))); return;


}
#line 1485
void ShowInhibApneaAlarm__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52200700;




(__T52200700 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T52200700->f)))(((struct SymbolField *)(((char *)(&this->InhibApneaAlarm)) + ((__T52200700->d))))));


DisplayCross__13InterfaceCppCSFUiN51((GetLine__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))), (GetCol__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))), 17U, 16U, 1U, (GetPage__13DisplayObjectFv(((struct 
#line 1494
DisplayObject *)((struct VFrame *)this))))); return;
#line 1500
}
#line 44
struct FrameVentilation *__ct__16FrameVentilationFv( struct FrameVentilation *this)
{ auto struct __T51878692 *__T51913668;  if ((this != ((struct FrameVentilation *)0)) || ((this = ((struct FrameVentilation *)(__nw__FUi(6496U)))) != ((struct FrameVentilation *)0))) { __ct__6VFrameFv(((struct VFrame *)this)); ((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)
#line 45
))).__vptr) = __vtbl__16FrameVentilation; __ct__8BarGraphFv((&this->BarVentil)); __ct__11SymbolFieldFv((&this->SFValve)); __ct__13LabelOneValueFv((&this->LOVPip)); __ct__13LabelOneValueFv((&this->LOVVti)); __ct__13LabelOneValueFv((&this->LOVVte)); __ct__13LabelOneValueFv((&this->LOVVm)); 
#line 45
__ct__13LabelOneValueFv((&this->LOVR)); __ct__13LabelOneValueFv((&this->LOVFIO2)); __ct__13LabelOneValueFv((&this->LOVSPO2)); __ct__13LabelOneValueFv((&this->LOVFuite)); __ct__17LabelTwoValueTrigFv((&this->LTVIE)); __ct__17LabelOneValueTrigFv((&this->LOVIT)); __ct__13BatteryObjectFv((&this->BOBat)); 
#line 45
__ct__13MessageDialogFv((&this->Message)); __ct__18LabelAlarmeTwoLineFv((&this->LAlarme)); __ct__10GraphicBoxFv((&this->MonitorBox)); __ct__10GraphicBoxFv((&this->AlarmBox)); __ct__11SymbolFieldFv((&this->InhibAlarm)); __ct__11SymbolFieldFv((&this->CancelAlarm)); __ct__11SymbolFieldFv((&this->
#line 45
InhibApneaAlarm)); __ct__5LabelFv((&this->PressConvention));
(this->IESelected) = 1;
(this->ValveDetected) = 1;
(this->BatVisible) = 0;
(this->FiO2Enabled) = 0;
(this->SpO2Enabled) = 0;
(this->IsInhibApneaAlarm) = 1;
(__T51913668 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 38)) , (((void (*)(struct VFrame *const, e_BOOL))((__T51913668->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T51913668->d)))), 0));
(this->ValveVisible) = 0;
(this->Mode) = VOL;
(this->ExhalFlowUsed) = 0; } return this;
}
#line 118
void init__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T51964660;

auto UWORD16 _col;
auto UWORD16 _colLabel = 6U;


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->PressConvention)), ((struct DisplayObject *)((struct VFrame *)this)));



Init__5LabelF8e_SYMBOLPPUcUiT3((&this->PressConvention), NO, ((UBYTE **)cMSG_RelativePressureRel), 17U, 115U);
#line 135
SetFontLabel__5LabelFUi((&this->PressConvention), 1U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->InhibApneaAlarm), 19U, 251U, 0U, 0, ALARM_TRIANGLE_BLACK_DOT);
#line 146
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->InhibAlarm), 19U, 274U, 0U, 0, BELL_BLACK);
#line 154
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->CancelAlarm), 19U, 297U, 0U, 0, ALARM_TRIANGLE_BLACK);
#line 162
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->BarVentil)), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__8BarGraphFUi19e_TYPE_OF_DB_TARGETN21((&this->BarVentil), 81U, COMPUTE, 16U, 82U);




Init__8BarGraphFUiN31PPUc((&this->BarVentil), 38U, 168U, 1U, 0U, ((UBYTE **)cMSG_PressureUnit));
#line 175
SetDivider__8BarGraphFUi((&this->BarVentil), 10U);

SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MonitorBox)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__10GraphicBoxFUiN31iN25((&this->MonitorBox), 33U, 195U, 151U, 123U, 1, 1, 1);
#line 187
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->AlarmBox)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__10GraphicBoxFUiN31iN25((&this->AlarmBox), 184U, 195U, 41U, 123U, 1, 1, 0);
#line 198
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVPip)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVPip))))), 82U, COMPUTE);


Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVPip), NO, ((UBYTE **)cMSG_InsuflationPressurePeakMon), 54U, 195U, 17U, ((UBYTE **)cMSG_PressureUnit));
#line 210
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVPip))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVPip), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVPip), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVPip)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVPip)) + ((__T51964660->d)))), 1));

SetDivider__13LabelOneValueFUi((&this->LOVPip), 10U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVti)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVti))))), 43U, COMPUTE);


Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVVti), NO, ((UBYTE **)cMSG_Vti), 77U, 195U, 1400U, ((UBYTE **)cMSG_VolumeUnit));
#line 233
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVVti))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVVti), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVVti), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVti)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVVti)) + ((__T51964660->d)))), 1));

SetMaxDisplayValue__13LabelOneValueFUi((&this->LOVVti), 9999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVte)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVte))))), 13U, COMPUTE);


Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVVte), NO, ((UBYTE **)cMSG_Vte), 100U, 195U, 1000U, ((UBYTE **)cMSG_VolumeUnit));
#line 256
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVVte))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVVte), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVVte), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVte)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVVte)) + ((__T51964660->d)))), 1));

SetMaxDisplayValue__13LabelOneValueFUi((&this->LOVVte), 9999U);

SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVm)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVm))))), 47U, COMPUTE);


Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVVm), NO, ((UBYTE **)cMSG_Vm), 123U, 195U, 1000U, ((UBYTE **)cMSG_VolumeLiterUnit));
#line 278
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVVm))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVVm), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVVm), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVm)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVVm)) + ((__T51964660->d)))), 1));

SetFloatValue1__13LabelOneValueFi((&this->LOVVm), 1);

SetMaxDisplayValue__13LabelOneValueFUi((&this->LOVVm), 999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVR)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVR))))), 24U, COMPUTE);


Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVR), NO, ((UBYTE **)cMSG_RateMon), 146U, 195U, 10U, ((UBYTE **)cMSG_FrequencyUnit));
#line 303
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVR))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVR), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVR), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVR)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVR)) + ((__T51964660->d)))), 1));

SetMaxDisplayValue__13LabelOneValueFUi((&this->LOVR), 99U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE))))))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__17LabelTwoValueLockFUi19e_TYPE_OF_DB_TARGETT1T2(((struct LabelTwoValueLock *)(&this->LTVIE)), 19U, COMPUTE, 20U, COMPUTE);




Init__13LabelTwoValueF8e_SYMBOLPPUcUiN23T2T3T2(((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE))), NO, ((UBYTE **)cMSG_IERation), 169U, 195U, 1U, ((UBYTE **)cMSG_Colon), 20U, ((UBYTE **)cMSG_NoneUnit));
#line 330
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))))), _colLabel);

SetColSep__13LabelOneValueFUi(((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))), 40U);

SetColValue1__13LabelOneValueFUi(((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))), 48U);

SetColValue2__13LabelTwoValueFUi(((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE))), 82U);

SetFontUnit1__13LabelOneValueFUi(((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))), 4U);

SetFloatValues__17LabelTwoValueTrigFi((&this->LTVIE), 1);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE))))))))).__vptr)) + 38)) , (((void (*)(struct LabelTwoValueTrig *const, e_BOOL))((__T51964660->f)
#line 342
))(((struct LabelTwoValueTrig *)(((char *)(&this->LTVIE)) + ((__T51964660->d)))), 1));

_col = ((GetPixelSize__5LabelFv(((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))))))) + 12U);

SetColTrigger__17LabelTwoValueTrigFUi((&this->LTVIE), _col);

SetMaxDisplayValue__13LabelOneValueFUi(((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))), 99U);
SetMaxDisplayValue2__13LabelTwoValueFUi(((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE))), 1990U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVIT))))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVIT)))))), 53U, COMPUTE);

Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2(((struct LabelOneValue *)(&this->LOVIT)), NO, ((UBYTE **)cMSG_ITRation), 138U, 195U, 1000U, ((UBYTE **)cMSG_PerCentUnit));
#line 362
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVIT)))), _colLabel);

SetColSep__13LabelOneValueFUi(((struct LabelOneValue *)(&this->LOVIT)), 40U);

SetColValue1__13LabelOneValueFUi(((struct LabelOneValue *)(&this->LOVIT)), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVIT))))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValueTrig *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValueTrig *)(((char *)(&this->LOVIT)
#line 368
) + ((__T51964660->d)))), 1));

SetTrigger__17LabelOneValueTrigFi((&this->LOVIT), 1);

_col = ((GetPixelSize__5LabelFv(((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVIT)))))) + 12U);

SetColTrigger__17LabelOneValueTrigFUi((&this->LOVIT), _col);

SetMaxDisplayValue__13LabelOneValueFUi(((struct LabelOneValue *)(&this->LOVIT)), 100U);



SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFIO2)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFIO2))))), 17U, COMPUTE);

Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVFIO2), NO, ((UBYTE **)cMSG_FiO2), 168U, 195U, 21U, ((UBYTE **)cMSG_PerCentUnit));
#line 391
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVFIO2))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVFIO2), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVFIO2), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFIO2)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVFIO2)) + ((__T51964660->d)))), 1));

SetMaxDisplayValue__13LabelOneValueFUi((&this->LOVFIO2), 999U);

SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVSPO2)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVSPO2))))), 36U, COMPUTE);

Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVSPO2), NO, ((UBYTE **)cMSG_SpO2), 168U, 195U, 21U, ((UBYTE **)cMSG_PerCentUnit));
#line 412
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVSPO2))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVSPO2), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVSPO2), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVSPO2)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVSPO2)) + ((__T51964660->d)))), 1));


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFuite)))), ((struct DisplayObject *)((struct VFrame *)this)));

InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFuite))))), 39U, COMPUTE);

Init__13LabelOneValueF8e_SYMBOLPPUcUiN23T2((&this->LOVFuite), NO, ((UBYTE **)cMSG_FuiteMon), 168U, 195U, 1000U, ((UBYTE **)cMSG_FlowUnit));
#line 433
SetColLabel__5LabelFUi(((struct Label *)((struct EditableObject *)(&this->LOVFuite))), _colLabel);

SetColSep__13LabelOneValueFUi((&this->LOVFuite), 40U);

SetColValue1__13LabelOneValueFUi((&this->LOVFuite), 48U);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFuite)))))).__vptr)) + 38)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T51964660->f)))(((struct LabelOneValue *)(((char *)(&this->LOVFuite)) + ((__T51964660->d)))), 1)
#line 439
);

SetMaxDisplayValue__13LabelOneValueFUi((&this->LOVFuite), 200U);

SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->BOBat)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__13BatteryObjectFUiT1((&this->BOBat), 15U, 161U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->SFValve), 15U, 231U, 0U, 0, VALVE_BLACK);
#line 456
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->Message)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__13MessageDialogFUiN31i((&this->Message), 33U, 195U, 151U, 123U, 1);
#line 464
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__18LabelAlarmeTwoLineF8e_SYMBOLPPUcUiT3((&this->LAlarme), NO, ((UBYTE **)cMSG_Alarm), 200U, 202U);




SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 44)) , (((struct Loupe *(*)(struct VFrame *const))((__T51964660->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + 
#line 471
((__T51964660->d)))))))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__13DisplayObjectFUiT1(((struct DisplayObject *)((__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 44)) , (((struct Loupe *(*)(struct VFrame *const))((__T51964660->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T51964660->d)
#line 473
))))))), 32U, 195U);


InitInfoVentilTable__16FrameVentilationFv(this);




(((struct DisplayObject **)(&this->RefreshTable))[0]) = ((struct DisplayObject *)(&this->BarVentil));
(((struct DisplayObject **)(&this->RefreshTable))[1]) = ((struct DisplayObject *)0);


(((struct DisplayObject **)(&this->RefreshTable))[2]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVte))));
(((struct DisplayObject **)(&this->RefreshTable))[3]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVR))));
(((struct DisplayObject **)(&this->RefreshTable))[4]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelTwoValue *)((struct LabelTwoValueLock *)(&this->LTVIE)))))));
(((struct DisplayObject **)(&this->RefreshTable))[5]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFuite))));
(((struct DisplayObject **)(&this->RefreshTable))[6]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVIT)))));
(((struct DisplayObject **)(&this->RefreshTable))[7]) = ((struct DisplayObject *)0);


(((struct DisplayObject **)(&this->RefreshTable))[8]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVPip))));
(((struct DisplayObject **)(&this->RefreshTable))[9]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVti))));
(((struct DisplayObject **)(&this->RefreshTable))[10]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVm))));
(((struct DisplayObject **)(&this->RefreshTable))[11]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFIO2))));
(((struct DisplayObject **)(&this->RefreshTable))[12]) = ((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVSPO2))));
(((struct DisplayObject **)(&this->RefreshTable))[13]) = ((struct DisplayObject *)0);


(((struct DisplayObject **)(&this->RefreshTable))[14]) = ((struct DisplayObject *)(&this->BOBat));
(((struct DisplayObject **)(&this->RefreshTable))[15]) = ((struct DisplayObject *)0);

(__T51964660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 43)) , (((void (*)(struct VFrame *const))((__T51964660->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T51964660->d))))));
#line 510
SetBatVisible__16FrameVentilationFiT1(this, 1, 1);


HideCurrentAlarme__16FrameVentilationFv(this); return;

}
#line 620
void ShowTrigger__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52005200;
if (!((__T52005200 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52005200->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52005200->d))))))))
{
if ((this->IESelected)) {
ShowTrigger__17LabelTwoValueTrigFv((&this->LTVIE)); } else  {

ShowTrigger__17LabelOneValueTrigFv((&this->LOVIT)); }
} return;
}
#line 643
void HideTrigger__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52007540;
if (!((__T52007540 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52007540->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52007540->d))))))))
{
if ((this->IESelected)) {
HideTrigger__17LabelTwoValueTrigFv((&this->LTVIE)); } else  {

HideTrigger__17LabelOneValueTrigFv((&this->LOVIT)); }
} return;
}
#line 1096
void StopMonitoringMode__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52150304;

(__T52150304 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 47)) , (((void (*)(struct FrameVentilation *const))((__T52150304->f)))(((struct FrameVentilation *)(((char *)this) + ((__T52150304->d))))));

ObjectsStopMonitoringMode__6VFrameFv(((struct VFrame *)this)); return;
}
#line 1116
void StartMonitoringMode__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52151744;
(__T52151744 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 52)) , (((void (*)(struct FrameVentilation *const, e_BOOL, e_BOOL))((__T52151744->f)))(((struct FrameVentilation *)(((char *)this) + ((__T52151744->d)))), 0, 0)); return;
}
#line 1133
void StartMonitoringMode__16FrameVentilationFiT1( struct FrameVentilation *const this,  e_BOOL IsFio2Sensor,  e_BOOL IsSpO2Sensor)
{ auto struct __T51878692 *__T52154060;

(__T52154060 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 46)) , (((void (*)(struct FrameVentilation *const))((__T52154060->f)))(((struct FrameVentilation *)(((char *)this) + ((__T52154060->d))))));

if (IsFio2Sensor) {
(this->FiO2Enabled) = 1; }

if (IsSpO2Sensor) {
(this->SpO2Enabled) = 1; }

(__T52154060 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 51)) , (((void (*)(struct FrameVentilation *const))((__T52154060->f)))(((struct FrameVentilation *)(((char *)this) + ((__T52154060->d)))))); return;
}
#line 90
struct DisplayObject **GetRefreshTable__16FrameVentilationFv( struct FrameVentilation *const this)
{
return (struct DisplayObject **)(&this->RefreshTable);
}
#line 871
void Show__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52104468; auto struct __T51878692 *__T52108944;
Show__6VFrameFv(((struct VFrame *)this));

ShowInhibApneaOk__16FrameVentilationFi(this, (IsInhibApneaAlarmVisible__16FrameVentilationFv(this)));

(__T52104468 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T52104468->f)))(((struct SymbolField *)(((char *)(&this->InhibAlarm)) + ((__T52104468->d))))));

(__T52104468 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T52104468->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T52104468->d))))));

(__T52104468 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BarVentil)))).__vptr)) + 16)) , (((void (*)(struct BarGraph *const))((__T52104468->f)))(((struct BarGraph *)(((char *)(&this->BarVentil)) + ((__T52104468->d))))));

ShowBatAndValve__16FrameVentilationFi(this, 1);

ShowPressConvention__16FrameVentilationFi(this, 1);


if ((__T52104468 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52104468->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52104468->d)))))))
{ auto struct __T51878692 *__T52107908;
(__T52107908 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->Message)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T52107908->f)))(((struct MessageDialog *)(((char *)(&this->Message)) + ((__T52107908->d))))));
}

else  {
(__T52108944 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 46)) , (((void (*)(struct FrameVentilation *const))((__T52108944->f)))(((struct FrameVentilation *)(((char *)this) + ((__T52108944->d))))));
} return;
}
#line 910
void Hide__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52111088;
(__T52111088 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BarVentil)))).__vptr)) + 17)) , (((void (*)(struct BarGraph *const))((__T52111088->f)))(((struct BarGraph *)(((char *)(&this->BarVentil)) + ((__T52111088->d))))));
ShowBatAndValve__16FrameVentilationFi(this, 0);
ShowPressConvention__16FrameVentilationFi(this, 0);

(__T52111088 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 49)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T52111088->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52111088->d)))), ((this->Mode))));
Hide__6VFrameFv(((struct VFrame *)this)); return;
}
#line 952
void SetMode__16FrameVentilationF12e_MODE_TYPES( struct FrameVentilation *const this,  e_MODE_TYPES _ModeTmp)
{ auto struct __T51878692 *__T52118928;
if (!((__T52118928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52118928->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52118928->d))))))))
{ auto struct __T51878692 *__T52119852;
(__T52119852 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 49)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T52119852->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52119852->d)))), ((this->Mode))));
}

(this->Mode) = _ModeTmp;
(__T52118928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T52118928->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52118928->d)))), ((this->Mode))));

if (!((__T52118928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52118928->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52118928->d))))))))
{
ObjectsShow__6VFrameF12e_MODE_TYPES(((struct VFrame *)this), ((this->Mode)));
} return;
}
#line 666
void SetBatVisible__16FrameVentilationFiT1( struct FrameVentilation *const this,  e_BOOL _BatVisible,  e_BOOL _ImpactDisplay)
{ auto struct __T51878692 *__T52011108;
(this->BatVisible) = _BatVisible;

if (_ImpactDisplay)
{
if ((this->BatVisible))
{ auto struct __T51878692 *__T52010104;
(__T52010104 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 16)) , (((void (*)(struct BatteryObject *const))((__T52010104->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T52010104->d))))));
}

else  {
(__T52011108 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 17)) , (((void (*)(struct BatteryObject *const))((__T52011108->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T52011108->d))))));
}
} return;
}
#line 60
e_BOOL IsBatVisible__16FrameVentilationFv( struct FrameVentilation *const this)
{
return (e_BOOL)(((this->BatVisible)) == 1);
}

e_BOOL IsValveVisible__16FrameVentilationFv( struct FrameVentilation *const this)
{
return (e_BOOL)(((this->ValveVisible)) == 1);
}
#line 695
void ShowBatAndValve__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Visible)
{ auto struct __T51878692 *__T52014920;
if (_Visible)
{
if (IsBatVisible__16FrameVentilationFv(this))
{ auto struct __T51878692 *__T52013884;
(__T52013884 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 16)) , (((void (*)(struct BatteryObject *const))((__T52013884->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T52013884->d))))));
}
if (IsValveVisible__16FrameVentilationFv(this))
{
DisplayValve__16FrameVentilationFv(this);
}
}

else  {
(__T52014920 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 17)) , (((void (*)(struct BatteryObject *const))((__T52014920->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T52014920->d))))));
(__T52014920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T52014920->f)))(((struct SymbolField *)(((char *)(&this->SFValve)) + ((__T52014920->d))))));
} return;
}
#line 726
void ShowPressConvention__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Visible)
{ auto struct __T51878692 *__T52018748;
if (_Visible) { auto struct __T51878692 *__T52017744;
(__T52017744 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->PressConvention)))).__vptr)) + 16)) , (((void (*)(struct Label *const))((__T52017744->f)))(((struct Label *)(((char *)(&this->PressConvention)) + ((__T52017744->d)))))); } else  {

(__T52018748 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->PressConvention)))).__vptr)) + 17)) , (((void (*)(struct Label *const))((__T52018748->f)))(((struct Label *)(((char *)(&this->PressConvention)) + ((__T52018748->d)))))); } return;
}
#line 95
void SetPressConvention__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Conv)
{
if (_Conv) {
SetName__5LabelFPPUc((&this->PressConvention), ((UBYTE **)cMSG_RelativePressureRel)); } else  {

SetName__5LabelFPPUc((&this->PressConvention), ((UBYTE **)cMSG_RelativePressureAbs)); } return;
}
#line 745
void DisplayValve__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52022748;
auto UWORD16 Val;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 3U, CONFIG);

if ((this->ValveDetected)) {
SetBarredSymbol__11SymbolFieldFi((&this->SFValve), 0); } else  {

SetBarredSymbol__11SymbolFieldFi((&this->SFValve), 1); }

if (Val) { auto struct __T51878692 *__T52021712;
(__T52021712 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T52021712->f)))(((struct SymbolField *)(((char *)(&this->SFValve)) + ((__T52021712->d)))))); } else  {

(__T52022748 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T52022748->f)))(((struct SymbolField *)(((char *)(&this->SFValve)) + ((__T52022748->d)))))); } return;
}
#line 1177
void SetInibOk__16FrameVentilationFiT1( struct FrameVentilation *const this,  e_BOOL _InibOk,  e_BOOL _ImpactDisplay)
{

(this->IsInhibAlarm) = _InibOk;
if (_ImpactDisplay)
{
if (_InibOk)
{
ShowInibOk__16FrameVentilationFi(this, 1);
}

else  {
ShowInibOk__16FrameVentilationFi(this, 0);
}
} return;
}
#line 1206
void ShowInibOk__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Visible)
{ auto struct __T51878692 *__T52160292;
if (_Visible)
{
if (IsInhibAlarmVisible__16FrameVentilationFv(this))
{ auto struct __T51878692 *__T52159256;
(__T52159256 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T52159256->f)))(((struct SymbolField *)(((char *)(&this->InhibAlarm)) + ((__T52159256->d))))));
}
}

else  {
(__T52160292 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T52160292->f)))(((struct SymbolField *)(((char *)(&this->InhibAlarm)) + ((__T52160292->d))))));
} return;
}
#line 1232
void SetInhibApneaOk__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _InhibOk)
{

(this->IsInhibApneaAlarm) = _InhibOk;

if (_InhibOk)
{
ShowInhibApneaAlarm__16FrameVentilationFv(this);
}

else  {
HideInhibApneaAlarm__16FrameVentilationFv(this);
} return;
}
#line 1258
void ShowInhibApneaOk__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Visible)
{
if (_Visible)
{
if (IsInhibApneaAlarmVisible__16FrameVentilationFv(this))
{
ShowInhibApneaAlarm__16FrameVentilationFv(this);
}
}

else  {
HideInhibApneaAlarm__16FrameVentilationFv(this);
} return;
}
#line 1284
void SetCancelOk__16FrameVentilationFiT1( struct FrameVentilation *const this,  e_BOOL _CancelOk,  e_BOOL _ImpactDisplay)
{ auto struct __T51878692 *__T52166156;

(this->IsCancelAlarm) = _CancelOk;

if (_ImpactDisplay)
{
if (_CancelOk)
{ auto struct __T51878692 *__T52165120;
(__T52165120 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T52165120->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T52165120->d))))));
}

else  {
(__T52166156 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T52166156->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T52166156->d))))));
}
} return;
}
#line 1314
void ShowCancelOk__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Visible)
{ auto struct __T51878692 *__T52169532;
if (_Visible)
{
if (IsCancelAlarmVisible__16FrameVentilationFv(this))
{ auto struct __T51878692 *__T52168496;
(__T52168496 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T52168496->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T52168496->d))))));
}
}

else  {
(__T52169532 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T52169532->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T52169532->d))))));
} return;
}
#line 1462
void SetExhalFlowUsed__16FrameVentilationFiT1( struct FrameVentilation *const this,  e_BOOL _Flag,  e_BOOL _ImpactDisplay)
{ auto struct __T51878692 *__T52198332;
_ImpactDisplay = _ImpactDisplay;

(this->ExhalFlowUsed) = _Flag;

if (IsRefreshObject__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVVte))))))
{
if (_Flag) { auto struct __T51878692 *__T52197264;
(__T52197264 = ((((*((struct MenuObject *)(((InfoVentil[OBJECT_VENTIL_LOVVTE]).pObject)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T52197264->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[OBJECT_VENTIL_LOVVTE]).pObject))) + ((__T52197264->d)))))); } else  {

(__T52198332 = ((((*((struct MenuObject *)(((InfoVentil[OBJECT_VENTIL_LOVVTE]).pObject)))).__vptr)) + 20)) , (((void (*)(struct DisplayObject *const))((__T52198332->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[OBJECT_VENTIL_LOVVTE]).pObject))) + ((__T52198332->d)))))); }
} return;
}
#line 70
e_BOOL IsInhibAlarmVisible__16FrameVentilationFv( struct FrameVentilation *const this)
{
return (e_BOOL)(((this->IsInhibAlarm)) == 1);
}

e_BOOL IsInhibApneaAlarmVisible__16FrameVentilationFv( struct FrameVentilation *const this)
{
return (e_BOOL)(((this->IsInhibApneaAlarm)) == 1);
}

e_BOOL IsCancelAlarmVisible__16FrameVentilationFv( struct FrameVentilation *const this)
{
return (e_BOOL)(((this->IsCancelAlarm)) == 1);
}
#line 1013
void ShowMonitoring__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52131960;

EnableMonitZoneRefresh__16FrameVentilationFi(this, 1);

(__T52131960 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 36)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52131960->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52131960->d)))), 0));
(__T52131960 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 40)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52131960->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52131960->d)))), 1));
(__T52131960 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MonitorBox)))).__vptr)) + 16)) , (((void (*)(struct GraphicBox *const))((__T52131960->f)))(((struct GraphicBox *)(((char *)(&this->MonitorBox)) + ((__T52131960->d))))));
(__T52131960 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->AlarmBox)))).__vptr)) + 16)) , (((void (*)(struct GraphicBox *const))((__T52131960->f)))(((struct GraphicBox *)(((char *)(&this->AlarmBox)) + ((__T52131960->d))))));
(__T52131960 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 45)) , (((void (*)(struct FrameVentilation *const, e_MODE_TYPES))((__T52131960->f)))(((struct FrameVentilation *)(((char *)this) + ((__T52131960->d)))), ((this->Mode)))); return;
}
#line 1037
void HideMonitoring__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52137320;

EnableMonitZoneRefresh__16FrameVentilationFi(this, 0);

(__T52137320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 36)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52137320->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52137320->d)))), 1));
(__T52137320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 40)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52137320->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52137320->d)))), 0));

(__T52137320 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 49)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T52137320->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52137320->d)))), ((this->Mode)))); return;
}
#line 1062
void ShowMessage__16FrameVentilationFiPUc8e_SYMBOL( struct FrameVentilation *const this,  e_BOOL _Visible, 
UBYTE *_Message, 
e_SYMBOL _Symbol)
{ auto struct __T51878692 *__T52147112;
if (_Visible)
{ auto struct __T51878692 *__T52142796;
(__T52142796 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->Message)))).__vptr)) + 17)) , (((void (*)(struct MessageDialog *const))((__T52142796->f)))(((struct MessageDialog *)(((char *)(&this->Message)) + ((__T52142796->d))))));
(__T52142796 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 36)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52142796->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52142796->d)))), 1));
(__T52142796 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 40)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52142796->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52142796->d)))), 0));
(__T52142796 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 47)) , (((void (*)(struct FrameVentilation *const))((__T52142796->f)))(((struct FrameVentilation *)(((char *)this) + ((__T52142796->d))))));
SetWhithBox__13MessageDialogFUi((&this->Message), ((GetWidth__10GraphicBoxFv((&this->MonitorBox))) - 5U));
SetMessage__13MessageDialogFPUc8e_SYMBOL((&this->Message), _Message, _Symbol);
(__T52142796 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->Message)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T52142796->f)))(((struct MessageDialog *)(((char *)(&this->Message)) + ((__T52142796->d))))));
}

else  {
(__T52147112 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 36)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52147112->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52147112->d)))), 0));
(__T52147112 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 40)) , (((void (*)(struct VFrame *const, e_BOOL))((__T52147112->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52147112->d)))), 1));
(__T52147112 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->Message)))).__vptr)) + 17)) , (((void (*)(struct MessageDialog *const))((__T52147112->f)))(((struct MessageDialog *)(((char *)(&this->Message)) + ((__T52147112->d))))));
} return;
}
#line 932
void RefreshLanguage__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52114124;
(__T52114124 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BarVentil)))).__vptr)) + 19)) , (((void (*)(struct DisplayObject *const))((__T52114124->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)(&this->BarVentil))) + ((__T52114124->d))))));
(__T52114124 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 19)) , (((void (*)(struct LabelAlarme *const))((__T52114124->f)))(((struct LabelAlarme *)(((char *)((struct LabelAlarme *)(&this->LAlarme))) + ((__T52114124->d)
#line 935
)))));
(__T52114124 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 19)) , (((void (*)(struct BatteryObject *const))((__T52114124->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T52114124->d))))));

ObjectsRefreshLanguage__6VFrameF12e_MODE_TYPES(((struct VFrame *)this), ((this->Mode))); return;
}
#line 774
void ShowCurrentAlarme__16FrameVentilationFiUi( struct FrameVentilation *const this,  e_BOOL _Actif,  UWORD16 _Id)
{ auto struct __T51878692 *__T52029484;
if (_Actif)
{ auto struct __T51878692 *__T52026632;
HideCurrentAlarme__16FrameVentilationFv(this);
SetWhithBox__18LabelAlarmeTwoLineFUi((&this->LAlarme), (GetWidth__10GraphicBoxFv((&this->AlarmBox))));
(__T52026632 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 39)) , (((void (*)(struct LabelAlarmeTwoLine *const, UWORD16))((__T52026632->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52026632->d))
#line 780
)), _Id));

RefreshBoxRound__10GraphicBoxFUi((&this->AlarmBox), ((UWORD16)_Actif));

(__T52026632 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 38)) , (((void (*)(struct LabelAlarmeTwoLine *const, e_BOOL))((__T52026632->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52026632->d)))
#line 784
), 0));

(__T52026632 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 16)) , (((void (*)(struct LabelAlarmeTwoLine *const))((__T52026632->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52026632->d))))));

}

else  {
HideCurrentAlarme__16FrameVentilationFv(this);

RefreshBoxRound__10GraphicBoxFUi((&this->AlarmBox), ((UWORD16)_Actif));

(__T52029484 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 38)) , (((void (*)(struct LabelAlarmeTwoLine *const, e_BOOL))((__T52029484->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52029484->d)))
#line 795
), 1));

(__T52029484 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 16)) , (((void (*)(struct LabelAlarmeTwoLine *const))((__T52029484->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52029484->d))))));
} return;
}
#line 813
void HideCurrentAlarme__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T52032584;

EraseZone__13InterfaceCppCSFUiN51(186U, 197U, 37U, 119U, 0U, (GetPage__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this)))));
#line 823
(__T52032584 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 38)) , (((void (*)(struct LabelAlarmeTwoLine *const, e_BOOL))((__T52032584->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52032584->d)))
#line 823
), 0));

(__T52032584 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 17)) , (((void (*)(struct LabelAlarmeTwoLine *const))((__T52032584->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52032584->d)))))); 
#line 825
return;
}
#line 839
void RemoveAlarm__16FrameVentilationFUi( struct FrameVentilation *const this,  UWORD16 _AlarmId)
{ auto struct __T51878692 *__T52035076;
(__T52035076 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)))))).__vptr)) + 40)) , (((void (*)(struct LabelAlarmeTwoLine *const, UWORD16))((__T52035076->f)))(((struct LabelAlarmeTwoLine *)(((char *)(&this->LAlarme)) + ((__T52035076->d))
#line 841
)), _AlarmId)); return;
}
#line 855
void RemoveAllAlarms__16FrameVentilationFv( struct FrameVentilation *const this)
{
RemoveAllAlarms__18LabelAlarmeTwoLineFv((&this->LAlarme)); return;
}
#line 85
struct DisplayObject *GetAlarmField__16FrameVentilationFv( struct FrameVentilation *const this)
{
return (struct DisplayObject *)((struct Label *)((struct LabelAlarme *)(&this->LAlarme)));
}
#line 1159
void EnableMonitZoneRefresh__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Enable)
{
ObjectsRefreshEnable__6VFrameFi(((struct VFrame *)this), _Enable); return;
}
#line 977
void SetIESelected__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _IESelected)
{ auto struct __T51878692 *__T52126916;
if (((this->IESelected)) != _IESelected)
{ auto struct __T51878692 *__T52125880;
if (!((__T52125880 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52125880->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52125880->d))))))))
{
(__T52126916 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 50)) , (((void (*)(struct VFrame *const, e_MODE_TYPES, e_OBJECT))((__T52126916->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52126916->d)))), ((this->Mode)), 
#line 983
OBJECT_VENTIL_LTVIE));
(__T52126916 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 50)) , (((void (*)(struct VFrame *const, e_MODE_TYPES, e_OBJECT))((__T52126916->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52126916->d)))), ((this->Mode)), 
#line 984
OBJECT_VENTIL_LTVIT));
}


SwitchDisplayConfigForAllModes__6VFrameF8e_OBJECTT1(((struct VFrame *)this), OBJECT_VENTIL_LTVIE, OBJECT_VENTIL_LTVIT);


(__T52125880 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T52125880->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52125880->d)))), ((this->Mode))));

if (!((__T52125880 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52125880->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52125880->d))))))))
{
ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(((struct VFrame *)this), ((this->Mode)), OBJECT_VENTIL_LTVIE);
ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(((struct VFrame *)this), ((this->Mode)), OBJECT_VENTIL_LTVIT);
}
(this->IESelected) = _IESelected;
} return;
}
#line 1339
void SetValve__16FrameVentilationFiT1( struct FrameVentilation *const this,  e_BOOL _ValveDetected,  e_BOOL _ImpactDisplay)
{ auto struct __T51878692 *__T52178140;

auto UWORD16 i;

auto UWORD16 Val;
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 3U, CONFIG);
(this->ValveVisible) = ((e_BOOL)Val);

if (((this->ValveDetected)) != _ValveDetected)
{ auto struct __T51878692 *__T52177104;

if ((((!((__T52177104 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52177104->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52177104->d)))))))) && ((int)((this->Mode)))) && (((int)((this
#line 1351
->Mode))) != 3)) && (((int)((this->Mode))) != 4))



{
(__T52178140 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 50)) , (((void (*)(struct VFrame *const, e_MODE_TYPES, e_OBJECT))((__T52178140->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52178140->d)))), ((this->Mode)), 
#line 1356
OBJECT_VENTIL_LOVFUITE));
(__T52178140 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 50)) , (((void (*)(struct VFrame *const, e_MODE_TYPES, e_OBJECT))((__T52178140->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52178140->d)))), ((this->Mode)), 
#line 1357
OBJECT_VENTIL_LOVVTE));
}


for (i = 0U; (i < 6U); i++)
{
if (((i) && (i != 3U)) && (i != 4U))
{

SwitchDisplayConfigForOneMode__6VFrameF8e_OBJECTT112e_MODE_TYPES(((struct VFrame *)this), OBJECT_VENTIL_LOVFUITE, OBJECT_VENTIL_LOVVTE, ((e_MODE_TYPES)i));
}
}


(__T52177104 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T52177104->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52177104->d)))), ((this->Mode))));

if ((((!((__T52177104 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 37)) , (((e_BOOL (*)(struct VFrame *const))((__T52177104->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52177104->d)))))))) && ((int)((this->Mode)))) && (((int)((this
#line 1373
->Mode))) != 3)) && (((int)((this->Mode))) != 4))



{
ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(((struct VFrame *)this), ((this->Mode)), OBJECT_VENTIL_LOVFUITE);
ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(((struct VFrame *)this), ((this->Mode)), OBJECT_VENTIL_LOVVTE);
}

}
(this->ValveDetected) = _ValveDetected;

if (_ImpactDisplay) {
DisplayValve__16FrameVentilationFv(this); } return;
}
#line 1423
void Fio2MonitorEnabled__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Flag)
{ auto struct __T51878692 *__T52190932;
(this->FiO2Enabled) = _Flag;

if (_Flag) { auto struct __T51878692 *__T52189864;
(__T52189864 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFIO2)))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T52189864->f)))(((struct LabelOneValue *)(((char *)(&this->LOVFIO2)) + ((__T52189864->d)))))); } else  {

(__T52190932 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFIO2)))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T52190932->f)))(((struct LabelOneValue *)(((char *)(&this->LOVFIO2)) + ((__T52190932->d)))))); } return;
}
#line 1442
void Spo2MonitorEnabled__16FrameVentilationFi( struct FrameVentilation *const this,  e_BOOL _Flag)
{ auto struct __T51878692 *__T52194220;
(this->SpO2Enabled) = _Flag;

if (_Flag) { auto struct __T51878692 *__T52193152;
(__T52193152 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVSPO2)))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T52193152->f)))(((struct LabelOneValue *)(((char *)(&this->LOVSPO2)) + ((__T52193152->d)))))); } else  {

(__T52194220 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVSPO2)))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T52194220->f)))(((struct LabelOneValue *)(((char *)(&this->LOVSPO2)) + ((__T52194220->d)))))); } return;
}
#line 1398
void SetPressureUnit__16FrameVentilationFPPUc( struct FrameVentilation *const this,  UBYTE **_PressureUnit)
{ auto struct __T51878692 *__T52184028; auto struct __T51878692 *__T52187612;
if ((__T52184028 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 39)) , (((e_BOOL (*)(struct VFrame *const))((__T52184028->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52184028->d)))))))
{ auto struct __T51878692 *__T52184952;
(__T52184952 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 49)) , (((void (*)(struct VFrame *const, e_MODE_TYPES))((__T52184952->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52184952->d)))), ((this->Mode))));
(__T52184952 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BarVentil)))).__vptr)) + 17)) , (((void (*)(struct BarGraph *const))((__T52184952->f)))(((struct BarGraph *)(((char *)(&this->BarVentil)) + ((__T52184952->d))))));
}
SetNameUnit__13LabelOneValueFPPUc((&this->LOVPip), _PressureUnit);
SetNameUnit__8BarGraphFPPUc((&this->BarVentil), _PressureUnit);
if ((__T52184028 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 39)) , (((e_BOOL (*)(struct VFrame *const))((__T52184028->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T52184028->d)))))))
{
(__T52187612 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BarVentil)))).__vptr)) + 16)) , (((void (*)(struct BarGraph *const))((__T52187612->f)))(((struct BarGraph *)(((char *)(&this->BarVentil)) + ((__T52187612->d))))));
ObjectsShow__6VFrameF12e_MODE_TYPES(((struct VFrame *)this), ((this->Mode)));
} return;
}
#line 572
void ObjectsStartMonitoringMode__16FrameVentilationFv( struct FrameVentilation *const this)
{ auto struct __T51878692 *__T51998908; auto struct __T51878692 *__T51999896; auto struct __T51878692 *__T52000852; auto struct __T51878692 *__T52001840; auto struct __T51878692 *__T52002796;
auto UWORD16 i;
for (i = 0U; (i < 10U); i++)
{
if ((((InfoVentil[i]).pObject)) != ((struct DisplayObject *)0))
{

if (i == 6U)
{
if ((this->FiO2Enabled)) { auto struct __T51878692 *__T51997808;
(__T51997808 = ((((*((struct MenuObject *)(((InfoVentil[i]).pObject)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T51997808->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[i]).pObject))) + ((__T51997808->d)))))); }
} else  {

if (i == 7U)
{
if ((this->SpO2Enabled)) {
(__T51998908 = ((((*((struct MenuObject *)(((InfoVentil[i]).pObject)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T51998908->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[i]).pObject))) + ((__T51998908->d)))))); }
} else  {
if (i == 5U)
{
if ((this->ValveDetected)) {
(__T51999896 = ((((*((struct MenuObject *)(((InfoVentil[i]).pObject)))).__vptr)) + 20)) , (((void (*)(struct DisplayObject *const))((__T51999896->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[i]).pObject))) + ((__T51999896->d)))))); } else  {

(__T52000852 = ((((*((struct MenuObject *)(((InfoVentil[i]).pObject)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T52000852->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[i]).pObject))) + ((__T52000852->d)))))); }
} else  {
if (i == 2U)
{
if ((this->ExhalFlowUsed)) {
(__T52001840 = ((((*((struct MenuObject *)(((InfoVentil[i]).pObject)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T52001840->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[i]).pObject))) + ((__T52001840->d)))))); }
} else  {

(__T52002796 = ((((*((struct MenuObject *)(((InfoVentil[i]).pObject)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T52002796->f)))(((struct DisplayObject *)(((char *)(((InfoVentil[i]).pObject))) + ((__T52002796->d)))))); } } } }
}
} return;
}
