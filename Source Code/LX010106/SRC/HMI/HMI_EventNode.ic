// v_2.45.2, Mon Mar 30 17:40:31 2020
#line 1 "..\\..\\SRC\\HMI\\HMI_EventNode.cpp"
struct __T51135408;
#line 37 "..\\..\\SRC\\GENERAL\\enum.h"
enum e_SYMBOL {
LOGO_LEGENDAIR,
KEY_WHITE,
BAT,
BLACK_SQUARES,
FREE_SQUARE,
KEY,
LOS,
BLACK_LOS,
LESS_OR_MORE,
RAMPE1,
RAMPE2,
RISETIME1,
RISETIME2,
RISETIME3,
RISETIME4,
TRIGGER,
TRIGGERINV,
VENTIL,
LOCKS,
PAUSE,
VALVE_BLACK,
VALVE_WHITE,
CADRE_WHITE_BG,
CADRE_WHITE_HD,
CADRE_BLACK_BG,
CADRE_BLACK_HD,
TRIANGLE_BLACK,
TRIANGLE_WHITE,
FLECHE_GRAPH_HAUT,
FLECHE_GRAPH_DROITE,
CADRE_WHITE_HG,
CADRE_WHITE_BD,
CADRE_BLACK_HG,
CADRE_BLACK_BD,
BAT_INV,
CADRE_BLACK_BGw,
CADRE_BLACK_BDw,
CADRE_BLACK_HGw,
CADRE_BLACK_HDw,
CADRE_WHITE_HGw,
CADRE_WHITE_HDw,
CADRE_WHITE_BDw,
CADRE_WHITE_BGw,
BELL_BLACK,
ALARM_TRIANGLE_BLACK,
EQUAL,
HEART,
CADRE_WHITE_ALARM_HGw,
CADRE_WHITE_ALARM_HDw,
CADRE_WHITE_ALARM_BDw,
CADRE_WHITE_ALARM_BGw,
HEART_INVERSE_VIDEO,
ALARM_TRIANGLE_BLACK_DOT,
RAMPE3,
LOGO_M2,
LOGO_XL2,
LOGO_S2,
LOGO_XL2_US,


CHART_VERSION,
TRADEMARK,
COMPANY,
WHITE_SQUARE,
WHITE_LOCK,
NO};
#line 112
enum e_HMI_LANG {
HMI_LANG_CHINESE,
HMI_LANG_DANISH,
HMI_LANG_GERMAN,
HMI_LANG_ENGLISH,
HMI_LANG_ENGLISH_US,
HMI_LANG_SPANISH,
HMI_LANG_FRENCH,
HMI_LANG_GREEK,
HMI_LANG_ITALIAN,
HMI_LANG_JAPANESE,
HMI_LANG_KOREAN,
HMI_LANG_DUTCH,
HMI_LANG_NORWISH,
HMI_LANG_POLISH,
HMI_LANG_PORTUGUESE,
HMI_LANG_RUSSIAN,
HMI_LANG_FINNISH,
HMI_LANG_SWEDISH,
HMI_LANG_TURKISH};
#line 137
enum e_TI {
TIMIN,
TIMAX,
end_of_e_TI};



enum e_ActiveModeState {
ACTIVATED,

EXHALATION,
INSPIRATION,

PSV_EXHALATION,
PSV_INSPIRATION,
CC_EXHALATION,
CC_INSPIRATION,

SIMV_VSIMV_EXHALATION,
SIMV_CAV_INSPIRATION,
SIMV_PSV_INSPIRATION,
SIMV_CV_EXHALATION,
SIMV_CV_INSPIRATION,
SIMV_VSIMV_EXHALATION_APNEA,
SIMV_CV_INSPIRATION_APNEA,

SIMV_PSIMV_EXHALATION,
SIMV_CAP_INSPIRATION,
SIMV_CP_EXHALATION,
SIMV_CP_INSPIRATION,
SIMV_PSIMV_EXHALATION_APNEA,
SIMV_CP_INSPIRATION_APNEA,

CPAP_EXHALATION,
CPAP_INSPIRATION};




enum e_DB_ALARM_LEVEL_PRIORITY {



TEC,



WP,



VLP,



LP,



MPR,



HP,



VHP,



UA,



IA};




enum e_ALARM_ERROR {
NO_ERR_AL,
ERR_AL_DISCONNECTION,
ERR_AL_HIGH_PRESSURE,
ERR_AL_APNEA,
ERR_AL_HIGH_VTI,
ERR_AL_LOW_VTI,
ERR_AL_LOW_VTE,
ERR_AL_HIGH_VTE,
ERR_AL_HIGH_VM,
ERR_AL_LOW_VM,
ERR_AL_LOW_RATE,
ERR_AL_HIGH_RATE,
ERR_AL_POWER_SUPPLY_LOSS,
ERR_AL_AC_POWER_FAIL,
ERR_AL_DC_POWER_FAIL,
ERR_AL_CHECK_SUPPLY,
ERR_AL_PERIODICAL_SIGNAL,
ERR_AL_LOW_BATTERY,
ERR_AL_END_OF_BATTERY,
ERR_AL_CHECK_BATTERY,
ERR_AL_NO_BATTERY,
ERR_AL_CHECK_BUZZER,
ERR_AL_BUZZER_BATTERY_LOW,
ERR_AL_BUZZER_BATTERY_FAILURE,
ERR_AL_BUZZER_BATTERY_CHARGE_FAILURE,
ERR_AL_TECHNICAL_PROBLEM,
ERR_AL_EEPROM_OUT_OF_RANGE,
ERR_AL_EEPROM_LOOSING_PARAM,
ERR_AL_NEW_VERSION,
ERR_AL_ERROR_VERSION,
ERR_AL_REVERSED_IE,
ERR_AL_CHECK_PRESSURE,
ERR_AL_CHECK_PROXIMAL,
ERR_AL_PROXI_DISCONNECTION,
ERR_AL_NO_PROXIMAL,
ERR_AL_NO_VALVE_DETECTION,
ERR_AL_CHECK_VALVE,
ERR_AL_CHECK_VOLUME,
ERR_AL_VALVE_LEAKAGE,
ERR_AL_CHECK_REMOTE_ALARM,
ERR_AL_UNKNOW_BATTERY,
ERR_AL_CHECK_BATTERY_CHARGE,
ERR_AL_COOLING_FAN,
ERR_AL_AMBIENT_TEMP,
ERR_AL_BAT_TEMP,
ERR_AL_FAILURE_24V,
ERR_AL_SUPPLY_MEASURE,
ERR_AL_TURBINE_OVERHEAT,
ERR_AL_OCCLUSION,
ERR_AL_CPU_REFERENCE,
ERR_AL_CONTROLLED_CYCLES,
ERR_AL_CHECK_VALVE_PRESSURE,
ERR_AL_CHECK_PIPE,
ERR_AL_LEAKAGE,
ERR_AL_CHECK_FIO2,
ERR_AL_LOW_FIO2,
ERR_AL_HIGH_FIO2,
ERR_AL_NO_FIO2_SENSOR,
ERR_AL_CHECK_O2_SUPPLY,
ERR_AL_MISSING_O2_SUPPLY,
ERR_AL_CHECK_O2,
ERR_AL_O2_LEAKAGE,
ERR_AL_BREATH_TIME_CYCLED,
ERR_AL_INSP_FLOW_FAILURE,
ERR_AL_LEAK_OCCLUSION,
ERR_AL_VOLUNTARY_STOP,
ERR_AL_NEEDED_FIO2_CALIB,
end_of_error_alarm_table};




enum e_DB_ALARMS_STATE {
ALARM_FALSE,
ALARM_DETECTED,
ALARM_TRUE,
ALARM_DISPLAYED,
ALARM_CANCELED,
end_of_alarms_state_table};




enum e_DB_ALARMS_INDICATION_STATE {
ALARM_FALSE_STATE,
ALARM_DETECTED_STATE,
ALARM_INHIBITED_STATE,
end_of_alarms_indication_state_table};
#line 311
enum e_DB_VERSION {
VERSION_NUMBER_0,
VERSION_NUMBER_1,
VERSION_NUMBER_2,
VERSION_NUMBER_3,
SERIAL_NUMBER_1,
SERIAL_NUMBER_2,
SERIAL_NUMBER_3,
SERIAL_NUMBER_4,
SERIAL_NUMBER_5,
SERIAL_NUMBER_6,
end_of_db_version_table};




enum e_DB_Trend {
DB_TREND_VENTIL_HOUR,
DB_TREND_VENTIL_MIN,
DB_TREND_AVG_VTI,
DB_TREND_AVG_VTE,
DB_TREND_AVG_VM,
DB_TREND_AVG_FR,
DB_TREND_LEAK_MODE,
DB_TREND_AVG_LEAK,
DB_TREND_AVG_PI,
DB_TREND_IA,
DB_TREND_APNEA,
DB_TREND_PERCENT_CONTROLLED,
DB_TREND_PERCENT_TRIGGERED,
DB_TREND_SAVE_RTC_DAY,
DB_TREND_SAVE_RTC_MONTH,
DB_TREND_SAVE_RTC_YEAR,
DB_TREND_SAVE_PC_HOUR,
DB_TREND_SAVE_PC_MIN,
DB_TREND_NB_APNEA,
DB_TREND_APNEA_TIME,
DB_TREND_NB_CYCLE_COUNTER_MSB,
DB_TREND_NB_CYCLE_COUNTER_LSB,
DB_TREND_NB_CYCLE_TRIGERRED_MSB,
DB_TREND_NB_CYCLE_TRIGERRED_LSB,
DB_TREND_NB_CYCLE_CONTROLLED_MSB,
DB_TREND_NB_CYCLE_CONTROLLED_LSB,
DB_TREND_VENTIL_REPORT_UPD,
DB_TREND_IHM_VENTIL_HOUR,
DB_TREND_IHM_VENTIL_MIN,
DB_TREND_IHM_AVG_VTI,
DB_TREND_IHM_AVG_VTE,
DB_TREND_IHM_AVG_VM,
DB_TREND_IHM_AVG_FR,
DB_TREND_IHM_LEAK_MODE,
DB_TREND_IHM_AVG_LEAK,
DB_TREND_IHM_AVG_PI,
DB_TREND_IHM_IA,
DB_TREND_IHM_APNEA,
DB_TREND_IHM_PERCENT_CONTROLLED,
DB_TREND_IHM_PERCENT_TRIGGERED,
DB_TREND_IHM_SAVE_RTC_DAY,
DB_TREND_IHM_SAVE_RTC_MONTH,
DB_TREND_IHM_SAVE_RTC_YEAR,
end_of_db_trend_table};




enum e_TYPE_OF_DB_TARGET {
ADJUST,
CONTROL,
COMPUTE,
VERSION,
CONFIG,
RTC,
ALARMS,
POWER_SUPPLY,
KEYBOARD,
USB,
TREND,
CURRENT,
REVISION,
end_of_type_of_db_target};




enum e_DATA_OPERATION {
READ,
WRITE,
DECREASE,
INCREASE,
MIN,
MAX,
STEP,
READ_INFO,
WRITE_INFO};




enum e_MODE_TYPES {
VOL,
PRES,
PSVT,
VSIMV,
PSIMV,
CPAP,
nb_of_mode};



enum e_TRIGGER_LEVELS {
TRIGGER_LEVEL_OFF,
TRIGGER_LEVEL_0P,
TRIGGER_LEVEL_1P,
TRIGGER_LEVEL_2,
TRIGGER_LEVEL_3,
TRIGGER_LEVEL_4,
TRIGGER_LEVEL_5,
nb_of_trigger_levels};



enum e_TEST_STATES {
TEST_STATE_NOT_RUN,
TEST_STATE_RUNNING,
TEST_STATE_ABORTED,
TEST_STATE_PASS,
TEST_STATE_FAIL,
nb_of_test_states};




enum e_VEN_SIMVCycle {
CAV_Cycle,
CV_Cycle,
PSV_Cycle,
CAP_Cycle,
CP_Cycle};




enum e_SupplyInfo {
NONE,
AC,
DC,
BATTERY};




enum e_RTC_OPERATION {
NO_REQUEST,
ADJUST_DATE,
ADJUST_HOUR};




enum e_BadEraseState {
ERASE_OK,
BAD_TOTAL_ERASE};




enum e_RampType {
RAMP_DECELERATED,
RAMP_RECTANGLE,
RAMP_SINUS,
nb_of_ramps};
#line 487
enum e_VEN_ControllerType {
NO_CONTROL,
CONTROL_SPEED,
CONTROL_PRESSURE,
CONTROL_PRESSURE_VALVE,
CONTROL_PRESSURE_MAINT,
CONTROL_FLOW,
CONTROL_FLOW_EXH,
CONTROL_FLOW_O2,
CONTROL_FLOW_O2_MANUEL,
CONTROL_PRESSURE_O2};



enum e_VEN_Controller_Phase {
VEN_EXH_PLAT,
VEN_INSP_RISE,
VEN_INSP_PLAT,
VEN_EXH_FALL};




enum e_CalibrationCommand {
NO_CALIB,
SEGMENT_1,
SEGMENT_2,
SEGMENT_3,
SEGMENT_4,
SEGMENT_5,
SEGMENT_6,
SEGMENT_7,
SEGMENT_8,
TEST_LIMITES_REQUEST,
TEST_LIMITES_OK,
TEST_LIMITES_FALSE,
AUTOCALIB_SEG_1,
AUTOCALIB_SEG_2,
AUTOCALIB_SEG_3,
AUTOCALIB_SEG_4,
AUTOCALIB_SEG_5,
AUTOCALIB_SEG_6,
AUTOCALIB_SEG_7,
AUTOCALIB_SEG_8,
END_AUTOCALIB};




enum e_CalibrationType {
SYS_PATIENT_PRESS_CALIB,
SYS_VALVE_PRESS_CALIB,
SYS_INSP_FLOW_CALIB,
SYS_EXH_FLOW_CALIB,
SYS_EXH_FLOW_VERIF,
SYS_FIO2_CALIB,
SYS_O2_FLOW_CALIB,
SYS_O2_PRESSURE_CALIB,
end_of_sys_calib};
#line 552
enum e_VentilState {
VEN_EXHALATION = 251,
VEN_INSPIRATION_CONTROLED,
VEN_INSPIRATION_TRIGGERED,
VEN_VENTIL_DISABLE};



enum e_InspDetectType {
CONTROLLED,
TRIGGERED,
NO_INSP};




enum e_SYS_KeyboardInput {
KEY_NO_KEYBOARD,
KEY_CODE_MONIT_AND_DOWN,
KEY_CODE_MONIT_AND_UP,
KEY_CODE_UP_AND_DOWN,
Mark_Begin_Simple_Touch,
KEY_CODE_UP,
KEY_CODE_DOWN,
KEY_CODE_VALID,
KEY_CODE_MONIT,
KEY_CODE_STARTSTOPVENTIL,
KEY_CODE_100_O2,
KEY_CODE_NAVIG,
Number_of_key};
#line 587
enum e_TIM_TABLE_ID {
KEY_LONGPUSH_KEY_NO_KEYBOARD,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_UP,
KEY_LONGPUSH_KEY_CODE_UP_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_UP,
KEY_LONGPUSH_KEY_CODE_DOWN,
KEY_LONGPUSH_KEY_CODE_VALID,
KEY_LONGPUSH_KEY_CODE_MONIT,
KEY_LONGPUSH_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_longpush_decnt,
KEY_AUTOREPEAT_KEY_NO_KEYBOARD,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_UP,
KEY_AUTOREPEAT_KEY_CODE_UP_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_UP,
KEY_AUTOREPEAT_KEY_CODE_DOWN,
KEY_AUTOREPEAT_KEY_CODE_VALID,
KEY_AUTOREPEAT_KEY_CODE_MONIT,
KEY_AUTOREPEAT_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_autorepeat_decnt,
KEY_ANO_KEYB,
KEY_DELAY_BETWEEN_LONG_AUTOREPEAT,
KEY_DOUBLE_PULSE_TIME_OUT,
KEY_CONFIRM_VENT_STOP_TIMER,
VEN_TI_COUNT,
VEN_TE_COUNT,
VEN_SIMV_PERIOD_COUNT,
VEN_CONTROLLED_CYCLE_PERIOD_COUNT,
VEN_TIME_CALIB_FIO2,
VEN_VALVE_TIM,
VEN_VENTILATION_BIP,
VEN_END_COUNT0,
VEN_END_COUNT1,
VEN_END_COUNT2,
VEN_END_COUNT3,
VEN_END_COUNT4,
VEN_END_COUNT5,
SYS_TIME_OUT_SPEED,
SYS_1MINPAT,
SYS_TIME_OUT_CALIB,
SYS_TIME_AUTO_CALIB,
SYS_TIME_FAS_VALVE_CALIB,
SYS_TIME_SUPPLY_CHANGE,
SYS_TIME_DETECT_FIO2,
SYS_TIME_BACKLIGHT,
SYS_PRESSURE_CHOICE,
SYS_PRESSURE_CHOICE_INT,
SYS_PROXIMAL_TO_INTERNAL_SWITCH,
SYS_CHECK_PRESSURE,
SYS_CHECK_PROXIMAL,
SYS_VALVE_TIM,
SEC_PRESSURE_CHOICE,
SEC_LOW_PRESS,
SEC_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_DETECT,
SEC_CPAP_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_ALARM,
SEC_FLAG_HIGH_PRESSURE,
SEC_APNEA,
SEC_CHECK_PRESSURE,
SEC_CHECK_PROXIMAL,
SEC_NO_BATTERY_TIM,
SEC_CHECK_FIO2_TIM,
SEC_KEYBOARD_TIM,
SEC_SPEED_BLOW_TIM,
SEC_START_BIP_SOUND,
SEC_STOP_BIP_SOUND,
SEC_LOW_FIO2_TIM,
SEC_CPU_REFERENCE_FAILURE_TIM,
SEC_FLOW,
SEC_TIME_WAIT_STARTING,
SEC_HIGH_FIO2_TIM,
SEC_BAT_LOW_LEVEL,
SEC_HIGH_SPO2_TIM,
SEC_LOW_SPO2_TIM,
SEC_BAT_VERY_LOW_LEVEL,
SEC_BUZ_READ,
SEC_BATTERY_FAILURE_CO_BUZ,
SEC_DETECTION_BATTERY_FAILURE_CO_BUZ,
SEC_FAIL_AC_TIM,
SEC_FAIL_DC_TIM,
SEC_VALVE_CST,
SEC_PROXI_CST,
SEC_INT_CST,
SEC_CHECK_VALVE,
SEC_VALVE_PRESS,
SEC_INHIB_CHECK_FIO2,
SEC_INHIB_LOW_FIO2,
SEC_INHIB_HIGH_FIO2,
SEC_INHIB_CHECK_REMOTE,
SEC_CANCEL_HIGH_PRESSURE,
SEC_CHECK_SUPPLY,
SEC_PPC_APNEA,
SEC_PROX_DISC,
SEC_RAZ_CHECK_BAT,
SEC_CHECK_PRESS,
SEC_CHECK_PRESS2,
SEC_CHECK_PROXI,
SEC_CHECK_REMOTE,
SEC_BAT_P_S_TIM,
SEC_INHIB_BUZZER,
SEC_LOW_PRIORITY_BURST,
SEC_MEDIUM_PRIORITY_BURST,
SEC_HIGH_PRIORITY_BURST,
SEC_BUZZER_PULSE,
SEC_BUZZER_SILENCE,
SEC_BUZZER_SOUND_MAX,
SET_VALIDATION_BIP,
SEC_NO_PROXIMAL,
SET_HISTO_BIP,
SEC_BLOWER_OVERHEAT,
ACT_MIN_FLOW,
ACT_STOP_ADAPTATION,
WAIT_USB_BUSY,
USB_CONNECT_DISCONNECT_KEY,
USB_WAIT_READ_FIFO,
SPI_FRAME_TIME,
SPI_WAIT_DISPLAY_BATTERY_GAUGE,
TIM_COM_RECORDING_MONIT,
TIM_USB_RECORDING_MONIT,
SEC_CHECK_VALVE_PRESSURE,
SEC_LEAKAGE,
SEC_CHECK_O2_SUPPLY,
SEC_O2_LEAKAGE,
SEC_100_FIO2_TIM,
INT_MEASURE_BUZZER,
SEC_CANCEL_BATTERY_FAILURE_CO_BUZ,
ACT_BOOST_FREQ,
SEC_LEAK_OCCLUSION,
SEC_CPU_REF_FAILURE,
SEC_APNEA_FLAG,
SEC_OCCLUSION_TIMER,
end_of_table_cnt_decnt};



enum e_TIM_MINUTE_TABLE_ID {
TimerWelcomeEvent,
TimerHideLoupe,
TimerBlinkEvent,
TimeOutModifEvent,
TimerQuitHistoAlarme,
TimerQuitPreferences,
TimerQuitGraphConfig,
TimerRefresh,
TimerStopModifMode,
TimerAutoCalibTest,
TimerRefreshAlarm,
TimerSwapAlarm,
TimerTriggerOk,
TimerSpyPraram,
TimerHideAlarmMessage,
TimerHideStopVentMess,
TimerAddToBlinkEvent,
TimerWaitCalibVerif,
TimerHistoAlarmSeek,
TimerHistoAnoSeek,
TimerWaitCalibQExp,
TimerWaitCalibFiO2,
TimerUsbMessage,
TimerUsbProcessing,
Timer100PrCentO2,
TimerVenRecordingApnea,
TimerUsbRecordingDetailledHorodatage,
TimerUsbCommandTooLong,
TimerQuitVentilReport,
SEC_PERIODICAL_BIP,
TimerEndLongDownKey,
TimerEndLongUpKey,
TimerDoubleAlarm,
SEC_BATTERY_FAILURE_CHARGE_BUZ_READ,
SEC_LOW_BATTERY_BUZ_READ,
SEC_BATTERY_FAILURE_CC_BUZ,
TimerLeakTest,
end_of_minute_ihm_table_decnt,
end_of_minute_table_cnt_decnt};



enum e_TYPE_USE_TIMER {
COUNT,
DECOUNT};




enum e_DRV_RTC_ACCESS_STATE {
FREE_RTC,
READ_RTC,
WRITE_RTC,
ERROR_RTC};




enum e_DRV_RTC_REGISTER {
RTC_SECOND,
RTC_MINUTE,
RTC_HOUR,
RTC_DAY,
RTC_DATE,
RTC_MONTH,
RTC_YEAR,
RTC_SEC_ALARM1,
RTC_MIN_ALARM1,
RTC_HOURS_ALARM1,
RTC_DAY_ALARM1,
RTC_SEC_ALARM2,
RTC_MIN_ALARM2,
RTC_HOURS_ALARM2,
RTC_DAY_ALARM2,
RTC_CONTROL,
RTC_STATUS,
RTC_CHARGER,
RTC_BEGIN_RAM};



enum e_DRV_RTC_ERROR {
DRV_RTC_NO_ERROR,
DRV_RTC_TIME_OUT_TRANSMIT};



enum e_EEP_ACCESS_STATE {
READ_EEP,
WRITE_EEP,
FREE_EEP,
ERROR_EEP};



enum e_DRV_EVENT_STATE {
DRV_EVENT_FREE,
DRV_EVENT_ERASE,
DRV_EVENT_WRITE};
#line 829
enum e_DRV_EEP_WRITE_ERROR {
DRV_EEP_NO_ERROR,
DRV_EEP_TIME_OUT_WRITE,
DRV_EEP_TIME_OUT_TRANSMIT};



enum e_STATE_OF_DRIVE_EEP {
DRV_EEP_WRITE_PENDING,
DRV_EEP_FREE};
#line 844
enum e_DRV_DISPLAY_FUNCTION {
DRV_INIT,
DRV_LOAD_TABLE,
DRV_BRITHNESSAJUST,
DRV_NEGATIVE_CAR,
DRV_DISPLAY_PAGE,
DRV_STRING,
DRV_NUMBER,
DRV_SYMBOL,
DRV_PIXEL,
DRV_LINE,
DRV_BOX,
DRV_ERASE_ZONE,
DRV_ERASE_PAGE,
DRV_BACKLIHGHTADJUST};




enum e_TYPE_SOUND {
NO_SOUND,
BIP_SHORT_SOUND,
BIP_LONG_SOUND,
BIP_VERY_LONG_SOUND,
START_BIP_SOUND,
STOP_BIP_SOUND,
BATTERY_SOUND,
VERY_SLOW_SOUND,
SLOW_SOUND,
FAST_SOUND,
USB_CONNECT,
USB_DISCONNECT,
CONTINU_SOUND};




enum e_TYPE_TEST_BUZ {
NO_BUZ,
BUZ};




enum e_TYPE_BACKLIGHT_LEVEL {
SWITCH_OFF,
WEAK,
SWITCH_ON};




enum e_NUMBER_BUZ {
BUZ_CARD,
BUZ_SEC,
BUZ_ALL,
BUZ_VOLUME};




enum e_TYPE_BLINK {
NO_LED,
BLINK_LED,
CONTINU_LED};




enum e_VALIDATION_BIP {
NO_BIP,
BIP_SHORT,
BIP_LONG,
BIP_VERY_LONG,
BIP_START_VENTIL,
BIP_STOP_VENTIL,
BURST,
BIP_USB_CONNECT,
BIP_USB_DISCONNECT,
BIP_SHORT_VALID,
BIP_BATTERY_PERIODICAL};




enum e_VALIDATION_BIP_TYPE {
NO_CLOC_BIP,
CLOC,
BIP,
BIP_AND_CLOC};



enum e_SPI_ACCESS {
SPI_EEPROM,
SPI_RTC,
SPI_POWER};



enum e_SIMV {
PIM,
VIM,
PSV,
end_of_e_SIMV};




enum e_SIMV_PS_End {
PS_FLOW_END,
PS_HIGH_PRESS_END,
PS_TIMED_END,
end_of_e_SIMV_PS_End};




enum e_Month {
Month_start,
JANUARY,
FEBRUARY,
MARSH,
APRIL,
MAY,
JUNE,
JULY,
AUGUST,
SEPTEMBER,
OCTOBER,
NOVEMBER,
DECEMBER};



enum e_DataBaseType {
DB_RTC,
DB_CURRENT,
DB_CONFIG,
DB_CONTROL,
DB_COMPUTE,
DB_POWERSUPPLY,
DB_NULL};
#line 992
enum e_OUTPUT_NAME {
OUT_LED_VENTIL,
OUT_LED_O2,
FREE_1Q3,
CE_EEP,
CE_RTC1,
CE_RTC2,
CE_INT_PRES_SENS,
CE_PROX_PRES_SENS,
CE_VALVE_PRES_SENS,
CE_SPI_USB,
CE_SPI_PIC,
CE_FLOW_INSP_SENS,
CE_FLOW_EXP_SENS,
CE_SPI_PIC_IC44,
FREE_2Q7,
FREE_2Q8};
#line 1019
enum e_SPI_POWER_TRANSMIT {
SPI_POWER_TRANSMIT_START_FRAME_MSB,
SPI_POWER_TRANSMIT_START_FRAME_LSB,
SPI_POWER_TRANSMIT_VENTIL_AUTHORIZATION,
SPI_POWER_TRANSMIT_MAINTENANCE_MODE,
SPI_POWER_TRANSMIT_CALIBRATION_MODE,
SPI_POWER_TRANSMIT_CRC,
SPI_POWER_TRANSMIT_END_FRAME,
SPI_POWER_TRANSMIT_EndOfFrame};
#line 1033
enum e_SPI_POWER_RECEIVE {
SPI_POWER_RECEIVE_MSB_START_FRAME,
SPI_POWER_RECEIVE_LSB_START_FRAME,
SPI_POWER_RECEIVE_MSB_V_BAT_U16,
SPI_POWER_RECEIVE_LSB_V_BAT_U16,
SPI_POWER_RECEIVE_MSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_LSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_MSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_STATE_U16,
SPI_POWER_RECEIVE_LSB_POWER_TYPE_U16,
SPI_POWER_RECEIVE_MSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_AVALAIBLE_U16,
SPI_POWER_RECEIVE_LSB_PER_CENT_BAT_U16,
SPI_POWER_RECEIVE_LSB_NO_PRESENCE_BAT_U16,
SPI_POWER_RECEIVE_LSB_BAT_KO_U16,
SPI_POWER_RECEIVE_LSB_CHARGE_KO_U16,
SPI_POWER_RECEIVE_LSB_UNKNOWN_BATTERY_U16,
SPI_POWER_RECEIVE_MSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_BATTERY_END_U16,
SPI_POWER_RECEIVE_LSB_BATTERY_LOW_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_DAY_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_MONTH_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_YEAR_U16,
SPI_POWER_RECEIVE_LSB_BAT_TEMP_OVERFLOW,
SPI_POWER_RECEIVE_LSB_SUPPLY_MEASURE_FAILURE,
SPI_POWER_RECEIVE_LSB_FAILURE_24V_FLAG,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_OUTOFBOUNDS,
SPI_POWER_RECEIVE_LSB_COOLING_FAN_FAILURE_FLAG,
SPI_POWER_RECEIVE_LSB_FIRST_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_SECOND_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_THIRD_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_HOUR_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_SECOND_U16,
SPI_POWER_RECEIVE_LSB_BAT_AGEING_U16,
SPI_POWER_RECEIVE_LSB_BAT_SUPPLIER_U16,
SPI_POWER_RECEIVE_LSB_BAT_TYPICAL_CAPACITY_U16,
SPI_POWER_RECEIVE_CRC,
SPI_POWER_RECEIVE_END_FRAME,
SPI_POWER_RECEIVE_EndOfTable,
SPI_POWER_RECEIVE_BufferSize = 70};
#line 1082
enum e_DRV_SPI_POWER_ERROR {
DRV_SPI_POWER_NO_ERROR,
DRV_SPI_POWER_TIME_OUT_TRANSMIT,
DRV_SPI_POWER_NO_FRAME,
DRV_SPI_POWER_BAD_FRAME};
#line 1093
enum e_MODE_COM {
COM_VOL_A,
COM_PSVT,
COM_PRES_A,
COM_VSIMV,
COM_CPAP,
COM_VOL_C,
COM_PSV,
COM_PRES_C,
COM_VOL_US,
COM_PRES_US,
COM_PSV_US,
COM_VSIMV_US,
COM_PSIMV_US,
COM_CPAP_US,
COM_PSIMV,
End_of_Table_Mode_COM};




enum e_Monit_Buffer_Data_Type {
MONITORAGE,
HORODATAGE};
#line 1122
enum e_FrameUART1 {
DATA_FRAME0,
DATA_FRAME1,
DATA_FRAME2,
SIZE_FRAME_UART1};



enum e_Flash_Read_Status {
REQUEST,
RUNNING,
ENDED};



enum e_Cycling_Mode {
I_T,
I_E};




enum e_Alarm_Tone {
ORIGINAL,
COMPLIANT};
#line 1155
enum e_DIRECT_MONITORING {
MONIT_MSB_PRESSURE,
MONIT_LSB_PRESSURE,
MONIT_MSB_CORRECTED_FLOW_INSP,
MONIT_LSB_CORRECTED_FLOW_INSP,
MONIT_MSB_CORRECTED_FLOW_EXHAL,
MONIT_LSB_CORRECTED_FLOW_EXHAL,
MONIT_CORRECTED_VT_LEAK,
MONIT_SPO2,
MONIT_HR,
MONIT_ALARM_1,
MONIT_ALARM_2,
MONIT_ALARM_3,
MONIT_ALARM_4,
MONIT_ALARM_5,
MONIT_ALARM_6,
MONIT_ALARM_7,
MONIT_ALARM_8,
MONIT_ALARM_9,
MONIT_SYMBOL,
MONIT_VENTIL_MODE,
End_Of_Table_Direct_Monitoring};
#line 1185
enum e_DETAILLED_MONITORING {
DETAILLED_DATA_TYPE,

DETAILLED_DAY,
DETAILLED_VENTIL_STATE = 1,

DETAILLED_MONTH,
DETAILLED_PATIENT_PRESSURE_MSB = 2,

DETAILLED_YEAR,
DETAILLED_PATIENT_PRESSURE_LSB = 3,

DETAILLED_HOUR,
DETAILLED_INSP_FLOW_MSB = 4,

DETAILLED_MINUTE,
DETAILLED_INSP_FLOW_LSB = 5,

DETAILLED_SECOND,
DETAILLED_EXH_FLOW_MSB = 6,

DETAILLED_RESERVED1,
DETAILLED_EXH_FLOW_LSB = 7,

DETAILLED_RESERVED2,
DETAILLED_LEAK = 8,

End_Of_Table_Detailled_Monitoring};
#line 1222
enum e_TREND {
TREND_DAY,
TREND_MONTH,
TREND_YEAR,
TREND_HOUR,
TREND_MINUTE,
TREND_SECOND,
TREND_VENTIL_MODE,
TREND_VENTIL_TYPE,
TREND_MSB_P_MAX,
TREND_LSB_P_MAX,
TREND_MSB_AV_PEP,
TREND_LSB_AV_PEP,
TREND_MSB_LEAKAGE,
TREND_LSB_LEAKAGE,
TREND_MSB_AV_VOLUME,
TREND_LSB_AV_VOLUME,
TREND_IE_RATIO_NUMERATOR,
TREND_IE_RATIO_DENOMINATOR,
TREND_FREQUENCY,
TREND_MSB_INSPIRATED_VOLUME,
TREND_LSB_INSPIRATED_VOLUME,
TREND_MSB_EXHALED_VOLUME,
TREND_LSB_EXHALED_VOLUME,
TREND_HEART_RATE,
TREND_SPO2,
End_Of_Table_Trends};
#line 1257
enum e_EVENT_PARAMETERS {

EVENT_NB_ID,
EVENT_DAY_ID,
EVENT_MON_ID,
EVENT_YEA_ID,
EVENT_HOU_ID,
EVENT_MIN_ID,
EVENT_SCD_ID,
EVENT_CPTMACHHOURMSB_ID,
EVENT_CPTMACHHOURLSB_ID,
EVENT_MODE_ID,
EVENT_TYPE_ID,
EVENT_TRIGECONV_ID,
EVENT_PUNITCONV_ID,
EVENT_CYCL_ID,
EVENT_24VMSB_ID,
EVENT_24VLSB_ID,
EVENT_5VMSB_ID,
EVENT_5VLSB_ID,
EVENT_WTDMSB_ID,
EVENT_WTDLSB_ID,
EVENT_TINTMSB_ID,
EVENT_TINTLSB_ID,
EVENT_VBATMSB_ID,
EVENT_VBATLSB_ID,
EVENT_TBATMSB_ID,
EVENT_TBATLSB_ID,
EVENT_QBATMSB_ID,
EVENT_QBATLSB_ID,
EVENT_MBATMSB_ID,
EVENT_MBATLSB_ID,
EVENT_FIO2_ID,
EVENT_SPO2_ID,
EVENT_FREQCAR_ID,
EVENT_PMAXMSB_ID,
EVENT_PMAXLSB_ID,
EVENT_PEPMSB_ID,
EVENT_PEPLSB_ID,
EVENT_RAPIT_ID,
EVENT_RAPIEMSB_ID,
EVENT_RAPIELSB_ID,
EVENT_FREQ_ID,
EVENT_VTIMSB_ID,
EVENT_VTILSB_ID,
EVENT_VTEMSB_ID,
EVENT_VTELSB_ID,
EVENT_VMMSB_ID,
EVENT_VMLSB_ID,
EVENT_LEAK_ID,
EVENT_TIMSB_ID,
EVENT_TILSB_ID,
EVENT_TEMSB_ID,
EVENT_TELSB_ID,
EVENT_SUPPLY_TYPE,
EVENT_BATLEVEL_ID,
EVENT_SETRELATIVE_PRESSURE_ID,
EVENT_SETBAROMETRIC_COMP_ID,
EVENT_SETSOUND_LEVEL_ID,
EVENT_SETPEDIATRIC_CIRCUIT_ID,
EVENT_SETDISCONNECTION_DELAY_ID,
EVENT_SETAPNEA_ALARM_ID,
EVENT_SETSPO2MIN_ID,
EVENT_SETSPO2MAX_ID,
EVENT_SETFIO2_ID,
EVENT_SETFIO2MIN_ID,
EVENT_SETFIO2MAX_ID,


EVENT_SPECPAR_1_ID,
EVENT_SPECPAR_2_ID,
EVENT_SPECPAR_3_ID,
EVENT_SPECPAR_4_ID,
EVENT_SPECPAR_5_ID,
EVENT_SPECPAR_6_ID,
EVENT_SPECPAR_7_ID,
EVENT_SPECPAR_8_ID,
EVENT_SPECPAR_9_ID,
EVENT_SPECPAR_10_ID,
EVENT_SPECPAR_11_ID,
EVENT_SPECPAR_12_ID,
EVENT_SPECPAR_13_ID,
EVENT_SPECPAR_14_ID,
EVENT_SPECPAR_15_ID,
EVENT_SPECPAR_16_ID,
EVENT_SPECPAR_17_ID,
EVENT_SPECPAR_18_ID,
EVENT_SPECPAR_19_ID,
EVENT_SPECPAR_20_ID,
EVENT_SPECPAR_21_ID,
EVENT_SPECPAR_22_ID,
EVENT_SPECPAR_23_ID,
EVENT_SPECPAR_24_ID,
EVENT_SPECPAR_25_ID,
EVENT_SPECPAR_26_ID,
EVENT_SPECPAR_27_ID,
EVENT_SPECPAR_28_ID,
EVENT_SPECPAR_29_ID,
EVENT_SPECPAR_30_ID,
EVENT_SPECPAR_31_ID,
EVENT_STATE_ID,
EVENT_Last_Event_Parameter = 96,
End_Of_Table_Events};
#line 1369
enum e_Settings {

SETTINGS_COMPATIBILITY,
SETTINGS_MODE,
SETTINGS_CYCLING_MODE_LSB,
SETTINGS_CYCLING_MODE_MSB,
SETTINGS_PRESSURE_UNIT_LSB,
SETTINGS_PRESSURE_UNIT_MSB,
SETTINGS_LOW_SPO2_LSB,
SETTINGS_LOW_SPO2_MSB,
SETTINGS_SPO2_LOW_SELECT_LSB,
SETTINGS_SPO2_LOW_SELECT_MSB,
SETTINGS_HIGH_SPO2_LSB,
SETTINGS_HIGH_SPO2_MSB,
SETTINGS_SPO2_HIGH_SELECT_LSB,
SETTINGS_SPO2_HIGH_SELECT_MSB,
SETTINGS_VOL_CONTROL_LSB,
SETTINGS_VOL_CONTROL_MSB,
SETTINGS_P_CONTROL_LSB,
SETTINGS_P_CONTROL_MSB,
SETTINGS_P_SUPPORT_LSB,
SETTINGS_P_SUPPORT_MSB,
SETTINGS_PEEP_LSB,
SETTINGS_PEEP_MSB,
SETTINGS_PEEP_NO_SELECT_LSB,
SETTINGS_PEEP_NO_SELECT_MSB,
SETTINGS_RISE_TIME_LSB,
SETTINGS_RISE_TIME_MSB,
SETTINGS_RAMP_LSB,
SETTINGS_RAMP_MSB,
SETTINGS_I_T_LSB,
SETTINGS_I_T_MSB,
SETTINGS_IE_NUMERATOR_LSB,
SETTINGS_IE_NUMERATOR_MSB,
SETTINGS_IE_DENOMINATOR_LSB,
SETTINGS_IE_DENOMINATOR_MSB,
SETTINGS_CONTROL_R_LSB,
SETTINGS_CONTROL_R_MSB,
SETTINGS_BACKUP_R_LSB,
SETTINGS_BACKUP_R_MSB,
SETTINGS_BACKUP_R_NO_SELECT_LSB,
SETTINGS_BACKUP_R_NO_SELECT_MSB,
SETTINGS_APNEA_LSB,
SETTINGS_APNEA_MSB,
SETTINGS_AUTO_APNEA_SELECT_LSB,
SETTINGS_AUTO_APNEA_SELECT_MSB,
SETTINGS_INSP_SENS_LSB,
SETTINGS_INSP_SENS_MSB,
SETTINGS_INSP_SENS_NO_SELECT_LSB,
SETTINGS_INSP_SENS_NO_SELECT_MSB,
SETTINGS_EXH_SENS_LSB,
SETTINGS_EXH_SENS_MSB,
SETTINGS_AUTO_EXH_SENS_SELECT_LSB,
SETTINGS_AUTO_EXH_SENS_SELECT_MSB,
SETTINGS_TARGET_VT_LSB,
SETTINGS_TARGET_VT_MSB,
SETTINGS_TARGET_VT_SELECT_LSB,
SETTINGS_TARGET_VT_SELECT_MSB,
SETTINGS_MAX_PRESSURE_LSB,
SETTINGS_MAX_PRESSURE_MSB,
SETTINGS_LOW_VTI_LSB,
SETTINGS_LOW_VTI_MSB,
SETTINGS_LOW_VTI_NO_SELECT_LSB,
SETTINGS_LOW_VTI_NO_SELECT_MSB,
SETTINGS_HIGH_VTI_LSB,
SETTINGS_HIGH_VTI_MSB,
SETTINGS_HIGH_VTI_NO_SELECT_LSB,
SETTINGS_HIGH_VTI_NO_SELECT_MSB,
SETTINGS_LOW_VTE_LSB,
SETTINGS_LOW_VTE_MSB,
SETTINGS_LOW_VTE_NO_SELECT_LSB,
SETTINGS_LOW_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_VTE_LSB,
SETTINGS_HIGH_VTE_MSB,
SETTINGS_HIGH_VTE_NO_SELECT_LSB,
SETTINGS_HIGH_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_PIP_LSB,
SETTINGS_HIGH_PIP_MSB,
SETTINGS_LOW_PIP_LSB,
SETTINGS_LOW_PIP_MSB,
SETTINGS_HIGH_R_LSB,
SETTINGS_HIGH_R_MSB,
SETTINGS_HIGH_R_NO_SELECT_LSB,
SETTINGS_HIGH_R_NO_SELECT_MSB,
SETTINGS_HIGH_LEAK_LSB,
SETTINGS_HIGH_LEAK_MSB,
SETTINGS_HIGH_LEAK_SELECT_LSB,
SETTINGS_HIGH_LEAK_SELECT_MSB,
SETTINGS_TI_MIN_LSB,
SETTINGS_TI_MIN_MSB,
SETTINGS_TI_MIN_AUTO_SELECT_LSB,
SETTINGS_TI_MIN_AUTO_SELECT_MSB,
SETTINGS_TI_MAX_LSB,
SETTINGS_TI_MAX_MSB,
SETTINGS_TI_MAX_AUTO_SELECT_LSB,
SETTINGS_TI_MAX_AUTO_SELECT_MSB,
SETTINGS_DISCONNECTION_DELAY_LSB,
SETTINGS_DISCONNECTION_DELAY_MSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_LSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_MSB,
SETTINGS_SIGH_SELECT_LSB,
SETTINGS_SIGH_SELECT_MSB,
SETTINGS_SIGH_VT_COEF_LSB,
SETTINGS_SIGH_VT_COEF_MSB,
SETTINGS_SIGH_CPT_LSB,
SETTINGS_SIGH_CPT_MSB,
SETTINGS_APNEA_ALARM_ACTIVATION_LSB,
SETTINGS_APNEA_ALARM_ACTIVATION_MSB,
SETTINGS_PEDIATRIC_CIRCUIT_LSB,
SETTINGS_PEDIATRIC_CIRCUIT_MSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_LSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_MSB,
End_Of_Table_Settings};
#line 1492
enum e_USB_SerialNumberAndDate_Frame {

USB_SETTING_SERIAL_NUMBER_1,
USB_SETTING_SERIAL_NUMBER_2,
USB_SETTING_SERIAL_NUMBER_3,
USB_SETTING_SERIAL_NUMBER_4,
USB_SETTING_SERIAL_NUMBER_5,
USB_SETTING_SERIAL_NUMBER_6,
USB_SETTING_SERIAL_NUMBER_7,
USB_SETTING_SERIAL_NUMBER_8,
USB_SETTING_SERIAL_NUMBER_9,
USB_SETTING_SERIAL_NUMBER_10,
USB_SETTING_SERIAL_NUMBER_11,
USB_SETTING_SERIAL_NUMBER_12,

USB_SETTING_DATE_YEAR,
USB_SETTING_DATE_MONTH,
USB_SETTING_DATE_DAY,
USB_SETTING_DATE_HOUR,
USB_SETTING_DATE_MINUTE,
USB_SETTING_DATE_SECOND,
End_of_e_usb_frame_serialNumberAndDate};




enum e_USB_SerialNumber_Frame {

USB_SERIAL_NUMBER_1,
USB_SERIAL_NUMBER_2,
USB_SERIAL_NUMBER_3,
USB_SERIAL_NUMBER_4,
USB_SERIAL_NUMBER_5,
USB_SERIAL_NUMBER_6,
USB_SERIAL_NUMBER_7,
USB_SERIAL_NUMBER_8,
USB_SERIAL_NUMBER_9,
USB_SERIAL_NUMBER_10,
USB_SERIAL_NUMBER_11,
USB_SERIAL_NUMBER_12,
End_of_e_usb_frame_serialNumber};
#line 1538
enum e_USB_Settings_Frame {

USB_SETTINGS_DATA,
USB_SETTINGS_MSB_CRC_FRAME,
USB_SETTINGS_LSB_CRC_FRAME,
End_of_e_usb_frame_setting};




enum e_USB_Transfer_Apply {
Usb_FirstStep,
Usb_ReadCurrentDirectoryNext,
Usb_OpenFile,
Usb_CreateFile,
Usb_ReadFile,
Usb_WriteSerialNumberAndDateAtIndex,
Usb_WriteSerialNumberAndDateAtEndOfFile,
Usb_WriteSerialNumberAtEndOfFile,
Usb_WriteFileAtIndex,
Usb_WriteAtTheEndOfFile,
Usb_UpadateDateAndTime,
Usb_WriteCRC,
Usb_CloseFile,
End_of_e_usb_transfer_apply};
#line 1569
enum e_USB_File_Settings {
FileSettingNext,
FileSettingNotFound,
FileSettingFound,
end_of_e_usb_file_setting};
#line 1579
enum e_USB_File_Type {
SettingsType,
ContinuousRecordingType,
MonitoringTransferType,
TrendsTransferType,
EventsTransferType,
end_of_e_usb_file_type};




enum e_USB_Continuous_Frame {
USB_ID_FRAME,

USB_DATA,
USB_End_Of_Continuous_Frame};




enum e_NAND_FLASH_STATE {
NAND_FREE,
NAND_ERASE,
NAND_MONIT_WRITE,
NAND_MONIT_READ,
NAND_TREND_WRITE,
NAND_TREND_READ};
#line 95 "..\\..\\SRC\\HMI\\HMI_IhmType.hpp"
enum e_TYPE_OF_LED {
LED_ALARM_RED,
LED_ALARM_ORANGE,
LED_VENTIL,
LED_WHITE,
LED_AC,
LED_DC,
LED_BAT};



struct AlarmEvent;
#line 167
enum EventId {
ProgExhalFlowUsed,
ProgExhalFlowUnused,
ProgInspControlEvent,
ProgInspTrigEvent,
ProgExhEvent,
ProgHideBatEvent,
ProgStartVentilOk,
ProgStartVentilKo,
ProgShowBatEvent,
ProgInibAlarmOK,
ProgInibAlarmNOK,
ProgCancelAlarmOK,
ProgCancelAlarmNOK,
ProgRemoveHighPressureAlarm,
ProgValveMissing,
ProgValveDetected,
ProgBlocExpiMissing,
ProgBlocExpiDetected,
ProgSpo2SensorNoError,
ProgSpo2SensorError,
ProgFio2SensorOK,
ProgFio2SensorNOK,
ProgCheckSupplyNoError,
ProgCheckSupplyError,
ProgUsbKeyDetected,
ProgUsbKeyNotDetected,
ProgUsbErrorCodeReady,
ProgUsbNewModeDetected,
ProgStartMonitoring,
ProgSupplyBusFailure,
ProgSupplyBusOK};
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject;
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject;
#line 33 "..\\..\\SRC\\DATABASE\\Db_PowerSupply.h"
enum e_DB_POWERSUPPLY {
V_BAT_U16,
TEMP_BAT_S16,
BAT_CYCLES_U16,
BAT_STATE_U16,
POWER_TYPE_U16,
JAUGE_MINUTE_U16,
JAUGE_HOUR_DISPLAY_U16,
JAUGE_MINUTE_DISPLAY_U16,
JAUGE_AVALAIBLE_U16,
PER_CENT_BAT_U16,
NO_PRESENCE_BAT_U16,
BAT_KO_U16,
CHARGE_KO_U16,
UNKNOWN_BATTERY_U16,
AMBIENT_TEMP_S16,
BATTERY_END_U16,
BATTERY_LOW_U16,
FIRST_DATE_DAY_U16,
FIRST_DATE_MONTH_U16,
FIRST_DATE_YEAR_U16,
COOLING_FAN_FAILURE_FLAG_U16,
AMBIENT_TEMP_OUTOFBOUNDS_U16,
FAILURE_24V_FLAG_U16,
BAT_TEMP_OUTOFBOUNDS_U16,
SUPPLY_MEASURE_FAILURE_U16,
POWER_SUPPLY_VERSION_NUMBER_0,
POWER_SUPPLY_VERSION_NUMBER_1,
POWER_SUPPLY_VERSION_NUMBER_2,
SUPPLIER_U16,
CAPACITY_U16,
CAPACITY_THEORICAL_U16,
FIRST_DATE_HOUR_U16,
FIRST_DATE_MINUTE_U16,
FIRST_DATE_SECOND_U16,
AGING_U16,
end_of_db_powersupply_table};
#line 47 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
enum ePANIC_MODULE {
PANIC_MODULE_VENTIL,
PANIC_MODULE_ALARM,
PANIC_MODULE_GRAPH,
PANIC_MODULE_EVENT_NODE_VENTIL,
PANIC_MODULE_EVENT_NODE_ALARM,
PANIC_MODULE_EVENT_NODE_MAINT_CALIB,
PANIC_MODULE_FRAME_GRAPH,
PANIC_MODULE_UNKNOWN,
PANIC_MODULE_MAX};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField;
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField;
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox;
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField;
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog;
#line 42 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
enum DataType {
eValue,
eString,
eValueSign};


struct Loupe;
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label;
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField;
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSign.hpp"
struct LabelOneValueSign;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDbRT.hpp"
struct LabelOneValueDbRT;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignDefault.hpp"
struct LabelOneValueSignDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignFlag.hpp"
struct LabelOneValueSignFlag;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDefault.hpp"
struct LabelOneValueDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueThreeDefault.hpp"
struct LabelOneValueThreeDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFourDefault.hpp"
struct LabelOneValueFourDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFlag.hpp"
struct LabelOneValueFlag;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelOneValueTrig.hpp"
struct LabelOneValueTrig;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelProgressBar.hpp"
struct LabelProgressBar;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueLock.hpp"
struct LabelTwoValueLock;
#line 42 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValue.hpp"
struct LabelTabOneValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueDefault.hpp"
struct LabelTabOneValueDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueFlag.hpp"
struct LabelTabOneValueFlag;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValue.hpp"
struct LabelTabTwoValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueTwoLabels.hpp"
struct LabelTabTwoValueTwoLabels;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueDefault.hpp"
struct LabelTabTwoValueDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueFlag.hpp"
struct LabelTabTwoValueFlag;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelValueString.hpp"
struct LabelValueString;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelStringTwoItems.hpp"
struct LabelStringTwoItems;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelStringNItems.hpp"
struct LabelStringNItems;
#line 33 "..\\..\\SRC\\HMI\\HMI_LabelLanguage.hpp"
struct LabelLanguage;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelMode.hpp"
struct LabelMode;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelSymbol.hpp"
struct LabelSymbol;
#line 35 "..\\..\\SRC\\HMI\\HMI_Rampe.hpp"
struct Rampe;
#line 34 "..\\..\\SRC\\HMI\\HMI_RiseTime.hpp"
struct RiseTime;
#line 34 "..\\..\\SRC\\HMI\\HMI_AutoCalibValue.hpp"
struct AutoCalibValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibValue.hpp"
struct ManualCalibValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibTwoValue.hpp"
struct ManualCalibTwoValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_VDate.hpp"
enum e_VDATE_FORMAT {
VDATE_EUR_FORMAT,
VDATE_US_FORMAT};
#line 43
struct VDate;
#line 34 "..\\..\\SRC\\HMI\\HMI_VTime.hpp"
enum e_VTIME_FORMAT {
VTIME_24H_FORMAT,
VTIME_12H_FORMAT};
#line 47
enum __Q2_5VTime8e_PERIOD { AM__5VTime, PM__5VTime};
#line 42
struct VTime;
#line 40 "..\\..\\SRC\\HMI\\HMI_BlinkTable.hpp"
struct BlinkTable;
#line 36 "..\\..\\SRC\\HMI\\HMI_RefreshTable.hpp"
struct RefreshTable;
#line 41 "..\\..\\SRC\\HMI\\HMI_ParameterSpy.hpp"
struct ParameterSpy;
#line 39 "..\\..\\SRC\\HMI\\HMI_VTimer.hpp"
struct VTimer;
#line 46 "..\\..\\SRC\\HMI\\HMI_AlarmTable.hpp"
struct AlarmTable;
#line 36 "..\\..\\SRC\\HMI\\HMI_AlarmManager.hpp"
enum eAMANAGER_DOUBLE { AMANAGER_DOUBLE_ACTIVE,
AMANAGER_DOUBLE_INACTIVE};




struct AlarmManager;
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm;
#line 45 "..\\..\\SRC\\HMI\\HMI_MonitoringObject.hpp"
struct MonitoringObject;
#line 231 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
struct tInfo;




enum e_OBJECT {
OBJECT_VENTIL_LOVPIP,
OBJECT_VENTIL_LOVVTI,
OBJECT_VENTIL_LOVVTE,
OBJECT_VENTIL_LOVVM,
OBJECT_VENTIL_LOVR,
OBJECT_VENTIL_LOVFUITE,
OBJECT_VENTIL_LOVFIO2,
OBJECT_VENTIL_LOVSPO2,
OBJECT_VENTIL_LTVIE,
OBJECT_VENTIL_LTVIT,
OBJECT_VENTIL_OBJECT_MAX,
OBJECT_ALARM_LOVPIP = 0,
OBJECT_ALARM_LOVVTI,
OBJECT_ALARM_LOVMAP,
OBJECT_ALARM_LOVPEEP,
OBJECT_ALARM_LTVIE,
OBJECT_ALARM_LOVIT,
OBJECT_ALARM_LOVR,
OBJECT_ALARM_LOVM,
OBJECT_ALARM_OBJECT_MAX,
OBJECT_GRAPH_MOFIO2 = 0,
OBJECT_GRAPH_MOSPO2,
OBJECT_GRAPH_MOPULSE,
OBJECT_GRAPH_MOTI,
OBJECT_GRAPH_MOTE,
OBJECT_GRAPH_MOIE,
OBJECT_GRAPH_MOIT,
OBJECT_GRAPH_MOFR,
OBJECT_GRAPH_MOVM,
OBJECT_GRAPH_MOVTE,
OBJECT_GRAPH_MOVTI,
OBJECT_GRAPH_MOPE,
OBJECT_GRAPH_MOPI,
OBJECT_GRAPH_MOFUITE,
OBJECT_GRAPH_OBJECT_MAX};
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelVersion.hpp"
struct LabelVersion;
#line 41 "..\\..\\SRC\\HMI\\HMI_FrameWelcome.hpp"
struct FrameWelcome;
#line 35 "..\\..\\SRC\\HMI\\HMI_FrameConfiguration.hpp"
struct FrameConfiguration;
#line 35 "..\\..\\SRC\\HMI\\HMI_FramePreference.hpp"
struct FramePreference;
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameCircuitCheck.hpp"
struct FrameCircuitCheck;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelSerial.hpp"
struct LabelSerial;
#line 42 "..\\..\\SRC\\HMI\\HMI_FrameMaintenance.hpp"
struct FrameMaintenance;
#line 34 "..\\..\\SRC\\HMI\\HMI_FrameHistoAno.hpp"
enum e_ANO_DATE_FORMAT {
ANO_EUR_FORMAT,
ANO_US_FORMAT};


enum e_ANO_TIME_FORMAT {
ANO_24H_FORMAT,
ANO_12H_FORMAT};


struct FrameHistoAno;
#line 36 "..\\..\\SRC\\HMI\\HMI_FrameVoltControl.hpp"
struct FrameVoltControl;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueTrig.hpp"
struct LabelTwoValueTrig;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelAlarme.hpp"
struct LabelAlarme;
#line 34 "..\\..\\SRC\\HMI\\HMI_BarGraph.hpp"
struct BarGraph;
#line 46 "..\\..\\SRC\\HMI\\HMI_MessageList.hpp"
struct __Q2_11MessageList8TMessage;
#line 41
struct MessageList;
#line 37 "..\\..\\SRC\\HMI\\HMI_LabelAlarmeTwoLine.hpp"
struct LabelAlarmeTwoLine;
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject;
#line 53 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.hpp"
struct FrameVentilation;
#line 51 "..\\..\\SRC\\HMI\\HMI_GraphicTable.hpp"
struct tGraphTableConfig;
#line 59
struct GraphicTable;
#line 55 "..\\..\\SRC\\HMI\\HMI_FrameAlarme.hpp"
enum e_ALARM_DATE_FORMAT {
ALARM_EUR_FORMAT,
ALARM_US_FORMAT};


enum e_ALARM_TIME_FORMAT {
ALARM_24H_FORMAT,
ALARM_12H_FORMAT};



struct FrameAlarme;
#line 37 "..\\..\\SRC\\HMI\\HMI_FrameHistoAlarme.hpp"
struct FrameHistoAlarme;
#line 36 "..\\..\\SRC\\HMI\\HMI_MonitoringObjectTwoValue.hpp"
struct MonitoringObjectTwoValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphTitle.hpp"
struct GraphTitle;
#line 39 "..\\..\\SRC\\HMI\\HMI_DataBaseLink.hpp"
struct DataBaseLink;
#line 36 "..\\..\\SRC\\HMI\\HMI_Scale.hpp"
enum TOrientation { eHOR, eVERT};

enum TSide { eTOP, eBOTTOM};



struct Scale;
#line 39 "..\\..\\SRC\\HMI\\HMI_VPoint.hpp"
struct VPoint;
#line 39 "..\\..\\SRC\\HMI\\HMI_Pen.hpp"
struct Pen;
#line 38 "..\\..\\SRC\\HMI\\HMI_CurveData.hpp"
struct CurveData;
#line 41 "..\\..\\SRC\\HMI\\HMI_Graph.hpp"
enum TKind {
eLINE,
eBAR};
#line 49
struct Graph;
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphControl.hpp"
struct GraphControl;
#line 34 "..\\..\\SRC\\HMI\\HMI_PerformanceGraphControl.hpp"
struct PerformanceGraphControl;
#line 35 "..\\..\\SRC\\HMI\\HMI_WobGraphControl.hpp"
struct WobGraphControl;
#line 65 "..\\..\\SRC\\HMI\\HMI_FrameGraph.hpp"
struct FrameGraph;
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameGraphConfig.hpp"
struct FrameGraphConfig;
#line 40 "..\\..\\SRC\\HMI\\HMI_FrameBatteryMenu.hpp"
struct FrameBatteryMenu;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueCentered.hpp"
struct LabelTwoValueCentered;
#line 45 "..\\..\\SRC\\HMI\\HMI_FrameUSB.hpp"
struct FrameUSB;
#line 36 "..\\..\\SRC\\HMI\\HMI_TendanceTable.hpp"
struct TendanceTable;
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameTendance.hpp"
struct FrameTendance;
#line 42 "..\\..\\SRC\\HMI\\HMI_MessageDelayed.hpp"
struct __Q2_14MessageDelayed11FifoMessage;
#line 38
struct MessageDelayed;
#line 34 "..\\..\\SRC\\DATABASE\\DB_Config.h"
enum e_DB_CONFIG {
ADJUST_LANGUAGE_U16,
ADJUST_MODE_U16,
ADJUST_KEYLOCK_U16,
VENTIL_REQ_U16,
OFFSET_INSP_FLOW_1_U16,
OFFSET_INSP_FLOW_2_U16,
OFFSET_INSP_FLOW_3_U16,
OFFSET_INSP_FLOW_4_U16,
OFFSET_INSP_FLOW_5_U16,
OFFSET_INSP_FLOW_6_U16,
OFFSET_INSP_FLOW_7_U16,
OFFSET_INSP_FLOW_8_U16,
OFFSET_EXH_FLOW_1_U16,
OFFSET_EXH_FLOW_2_U16,
OFFSET_EXH_FLOW_3_U16,
OFFSET_EXH_FLOW_4_U16,
OFFSET_EXH_FLOW_5_U16,
OFFSET_EXH_FLOW_6_U16,
OFFSET_EXH_FLOW_7_U16,
OFFSET_EXH_FLOW_8_U16,
OFFSET_O2_FLOW_1,
OFFSET_O2_FLOW_2,
OFFSET_O2_FLOW_3,
OFFSET_O2_FLOW_4,
OFFSET_O2_FLOW_5,
OFFSET_O2_FLOW_6,
OFFSET_O2_FLOW_7,
OFFSET_PATIENT_PRESS_1_U16,
OFFSET_PATIENT_PRESS_2_U16,
OFFSET_PATIENT_PROX_PRESS_1_U16,
OFFSET_PATIENT_PROX_PRESS_2_U16,
OFFSET_PRESS_O2,
I_VALVE_REF_U16,
OFFSET_FAS_VALVE_1_U16,
OFFSET_FAS_VALVE_2_U16,
OFFSET_FAS_VALVE_3_U16,
OFFSET_FAS_VALVE_4_U16,
OFFSET_FAS_VALVE_5_U16,
OFFSET_FAS_VALVE_6_U16,
OFFSET_FAS_VALVE_7_U16,
OFFSET_FAS_VALVE_8_U16,
OFFSET_FAS_VALVE_9_U16,
OFFSET_VALVE_PRESS_U16,
OFFSET_VALVE_PRESS_2_U16,
OFFSET_FIO2,
ADJUST_BRIGHTNESS_U16,
ADJUST_BACKLIGHT_U16,

SAVED_PATIENT_COUNTER_HOUR_U16,

SAVED_PATIENT_COUNTER_MIN_U16,

SAVED_MACHINE_COUNTER_HOUR_U16,

SAVED_MACHINE_COUNTER_MIN_U16,

RETRIEVAL_EVENT_ADRESS_MSB_U16,

RETRIEVAL_EVENT_ADRESS_LSB_U16,

FLASH_MONIT_WRITE_BLOCK_U16,

FLASH_MONIT_WRITE_PAGE_U16,

FLASH_MONIT_WRITE_COLUMN_U16,

FLASH_TREND_WRITE_BLOCK_U16,

FLASH_TREND_WRITE_PAGE_U16,

FLASH_TREND_WRITE_COLUMN_U16,

FLASH_FIRST_PARTITION_FULL_U16,

FLASH_SECOND_PARTITION_FULL_U16,

SPEED_COM_U16,
RAZ_COUNTER_PAT_DATE_U16,
RAZ_COUNTER_PAT_MONTH_U16,
RAZ_COUNTER_PAT_YEAR_U16,
RAZ_COUNTER_PAT_HOUR_U16,
RAZ_COUNTER_PAT_MIN_U16,
BAD_ERASE_U16,
SOUND_LEVEL_SELECT_U16,
PREVIOUS_SOUND_LEVEL_SELECT_U16,
CURVE_DISPLAY_TYPE_MODE_U16,
CURVE_MAX_PRESSURE_U16,
CURVE_MAX_FLOW_U16,
CURVE_MAX_VT_U16,
CURVE_MAX_TIME_U16,
CURVE_DRAW_MODE_U16,
ADJUST_CYCLING_MODE_U16,
ADJUST_KEY_TONE_U16,
ADJUST_WAVEFORM_DISPLAY_U16,
ADJUST_BAROMETRIC_CORRECTOR_U16,
ADJUST_FIO2,
ADJUST_FIO2_SELECT,
ADJUST_LOW_FIO2,
ADJUST_HIGH_FIO2,
ADJUST_LOW_SPO2,
ADJUST_HIGH_SPO2,
SPO2_LOW_SELECT,
SPO2_HIGH_SELECT,
FIO2_LOW_SELECT,
FIO2_HIGH_SELECT,
PRESSURE_UNIT_U16,
TRIGG_E_POSITIVE,
APNEA_ALARM_ACTIVATION,
FLASH_MEMORY_MANUFACTURER,
FLASH_MEMORY_DEVICE,
FLASH_MEMORY_FIVE_ADDRESS_CYCLES,
PARAM_COMPATIBILITY,
IHM_LOCKED_FRAME_ID,
ADJUST_PEDIATRIC_CIRCUIT_U16,
PREVIOUS_MODE_U16,
PRESSURE_SUPPORT_RELATIVE_U16,
PRESSURE_SUPPORT_CHANGED_U16,
VOLUNTARY_STOP_ALARM_ACTIVATION,
SOUND_TYPE_SELECT_U16,
end_of_db_config_table};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Control.h"
enum e_DB_CONTROL {
VENTIL_AUTHORIZATION_U16,
CURRENT_MODE_U16,
CHANGE_MODE_U16,
VENTIL_STATE_U16,
SIMV_CYCLES_U16,
CALIB_PATIENT_PRESS_REQ_U16,
CALIB_FLOW_INSP_REQ_U16,
CALIB_FLOW_EXH_REQ_U16,
CALIB_VALVE_PRESS_REQ_U16,
CALIB_FAS_VALVE_REQ_U16,
INHIBITED_BUZZER_U16,
INHIBITION_AUTHORIZATION_U16,
CANCELLED_ALARM_U16,
BUZZER_CMD_U16,
CALIB_ADJUST_CMD_U16,
SETUP_CONTROL_SET_POINT_U16,
SETUP_CONTROL_TYPE_U16,
SUPPLY_AC_DC_BAT_U16,
DISPLAY_BATTERY_U16,
CURRENT_PATIENT_COUNTER_HOUR_U16,
CURRENT_PATIENT_COUNTER_MIN_U16,
CURRENT_MACHINE_COUNTER_HOUR_U16,
CURRENT_MACHINE_COUNTER_MIN_U16,
CONTROL_BUZZER_U16,
VALVE_DETECTED_U16,
AC_SELECTED_U16,
DC_SELECTED_U16,
REMOTE_STATE_U16,
PROXI_DETECTED_U16,
ALARM_DETECTED_U16,
NEW_ALARM_HP_DETECTED_U16,
Start_Limit_Setting,
LIMIT_LOW_PIP_U16,
LIMIT_HIGH_PIP_U16,
LIMIT_PEEP_U16,
LIMIT_VOL_CONTROL_U16,
LIMIT_TI_CONTROL_U16,
LIMIT_CONTROL_R_U16,
LIMIT_PI_U16,
LIMIT_LOW_VTI_U16,
LIMIT_HIGH_VTI_U16,
LIMIT_LOW_VTE_U16,
LIMIT_HIGH_VTE_U16,
LIMIT_P_SUPPORT_U16,
LIMIT_TI_MIN_U16,
LIMIT_TI_MAX_U16,
LIMIT_SPO2_MINI_U16,
LIMIT_SPO2_MAXI_U16,
LIMIT_INSP_SENS_U16,
LIMIT_SIGH_U16,
LIMIT_TARGET_VT_U16,
LIMIT_APNEA_U16,
LIMIT_HIGH_FIO2,
LIMIT_LOW_FIO2,
LIMIT_SPO2,
LIMIT_BACKUP_R_U16,
LIMIT_PMAX_U16,
End_Limit_Setting,
UNCANCEL_CMD_U16,
SUPPLY_BUS_FAILURE_U16,
KEYBOARD_ANOMALIE_U16,
VALIDATION_BIP_U16,
BIP_RUNNING_U16,
MAINTENANCE_MODE_U16,
CALIBRATION_MODE_U16,
TEST_BUZ_CARD_U16,
TEST_BUZ_SEC_U16,
TEST_VOLUME_U16,
CANCEL_ALARM_ASKED,
KEY_EVENT_U16,
BACKLIGHT_OFF_U16,
HIGH_PRESSURE_LED_REMINDER_U16,
RECORD_SETTINGS_USB_U16,
APPLY_SETTINGS_USB_U16,
ERASE_KEY_USB_U16,
RECORD_TIME_TENDANCE_U16,
ERROR_SPO2_SENSOR_DETECTED,
DETECTED_FIO2_SENSOR,
CALIBRATED_FIO2_SENSOR,
CALIB_ADJUST_VANNE_FIO2_CMD,
CALIB_FIO2_REQ_U16,
CALIB_FLOW_O2_REQ_U16,
MEMO_CMD_VANNE_FIO2_TO_CALIB,
CALIB_PRESS_O2_REQ_U16,
FLOW_SAT_FLAG_U16,
HIGH_PRESSURE_DETECTED_U16,
HIGH_PRESSURE_EXHALATION_DETECTED_U16,
HIGH_PRESSURE_FILTER_WINDOW_U16,
FIO2_100_ACTIVE,
LOAD_USB_SETTINGS_U16,
COM_READY_U16,
START_MONITORING_U16,
SIMV_PSV_CYCLE_U16,
BLOC_EXPI_DETECTED_U16,
ADJUSTMENT_IN_PROGRESS_U16,
VALVE_DETECT_IN_PROGRESS_U16,
EXHAL_FLOW_USE_U16,
FLAT_INT_U16,
FLAT_PROXI_U16,
VALVE_O2_CMD_U16,
CPAP_TRIG_I_U16,
CPAP_TRIG_E_U16,
CONTROLER_TYPE_U16,
VTI_DISPLAY_DELAY_U16,
VOLUNTARY_STOP_U16,
SIMV_CONTROLLED_INSP_U16,
END_OF_OPERATION_U16,
CIRCUIT_CHECK_MODE_U16,
end_of_db_control_table};
#line 28 "..\\..\\SRC\\DATABASE\\DB_Rtc.h"
enum e_DB_RTC {
DB_RTC_SECOND_U16,
DB_RTC_MINUTE_U16,
DB_RTC_HOUR_U16,
DB_RTC_DAY_U16,
DB_RTC_MONTH_U16,
DB_RTC_YEAR_U16,
ADJUST_RTC_REQ_U16,
ADJUST_RTC_SECOND_U16,
ADJUST_RTC_MINUTE_U16,
ADJUST_RTC_HOUR_U16,
ADJUST_RTC_DAY_U16,
ADJUST_RTC_MONTH_U16,
ADJUST_RTC_YEAR_U16,
end_of_db_rtc_table};
#line 37 "..\\..\\SRC\\DATABASE\\DB_Current.h"
enum e_DB_ADJUST_CURRENT {
ADJUST_VOL_CONTROL_U16,
ADJUST_P_CONTROL_U16,
ADJUST_PEEP_U16,
ADJUST_P_SUPPORT_U16,
ADJUST_RAMP_U16,
ADJUST_CONTROL_R_U16,
ADJUST_BACKUP_R_U16,
ADJUST_HIGH_R_U16,
HIGH_R_NO_SELECT_U16,
ADJUST_TI_CONTROL_U16,
ADJUST_INSP_SENS_U16,
INSP_SENS_NO_SELECT_U16,
ADJUST_EXH_SENS_U16,
AUTO_EXH_SENS_SELECT_U16,
ADJUST_APNEA_U16,
AUTO_APNEA_SELECT_U16,
ADJUST_LOW_PIP_U16,
ADJUST_HIGH_PIP_U16,
ADJUST_LOW_VTE_U16,
LOW_VTE_NO_SELECT_U16,
ADJUST_HIGH_VTE_U16,
HIGH_VTE_NO_SELECT_U16,
ADJUST_RISE_TIME_U16,
ADJUST_LOW_VM_U16,
LOW_VM_NO_SELECT_U16,
ADJUST_HIGH_VM_U16,
HIGH_VM_NO_SELECT_U16,
ADJUST_LOW_VTI_U16,
LOW_VTI_NO_SELECT_U16,
ADJUST_HIGH_VTI_U16,
HIGH_VTI_NO_SELECT_U16,
ADJUST_TI_MIN_U16,
TI_MIN_AUTO_SELECT_U16,
ADJUST_TI_MAX_U16,
TI_MAX_AUTO_SELECT_U16,
PI_SET_POINT_U16,
BACKUP_R_NO_SELECT_U16,
P_SUPPORT_NO_SELECT_U16,
CONTROL_R_NO_SELECT_U16,
PEEP_NO_SELECT_U16,
RISE_TIME_U16,
ADJUST_HIGH_LEAK_U16,
HIGH_LEAK_SELECT_U16,
CURRENT_USED_43_U16,
CURRENT_USED_44_U16,
CURRENT_USED_45_U16,
ADJUST_TARGET_VT_U16,
TARGET_VT_SELECT_U16,
ADJUST_MAX_PRESSURE_U16,
ADJUST_EXH_SENS_NEGATIVE_U16,
AUTO_EXH_SENS_NEG_SELECT_U16,
ADJUST_SIGH_SELECT_U16,
ADJUST_SIGH_CPT_U16,
ADJUST_SIGH_VT_COEF_U16,
ADJUST_DISCONNECTION_DELAY_U16,
DISCONNECTION_DELAY_AUTO_U16,
end_of_adjust_table};
#line 33 "..\\..\\SRC\\DATABASE\\DB_Usb.h"
enum e_DB_USB {
USB_ERASE_KEY_U16,
USB_TRANSFER_APPLY_U16,
USB_CONTINUOUS_RECORDING_U16,
USB_MONITOR_TRANSFER_U16,
USB_MONITOR_TRANSFER_SELECT_U16,
USB_TREND_TRANSFER_U16,
USB_TREND_TRANSFER_SELECT_U16,
USB_EVENTS_TRANSFER_U16,
USB_KEY1_DETECTED_AFTER_POWER_ON_U16,
USB_KEY2_DETECTED_AFTER_POWER_ON_U16,
USB_ERROR_CODE_READY_U16,
USB_ERROR_CODE_U16,
USB_ERROR_CODE_READY_IHM_U16,
USB_ERROR_CODE_IHM_U16,
USB_PROGRESS_HOURS_U16,
USB_PROGRESS_MINUTES_U16,
USB_COMMAND_SENT_U16,
USB_STOP_COMMAND_SENT_U16,
USB_MSNB_ONE_DETECTED_U16,
USB_MSNB_TWO_DETECTED_U16,
USB_NEW_KEY_CONNECTED_U16,
USB_MSB_FREE_SPACE_KEY_ONE,
USB_LSB_FREE_SPACE_KEY_ONE,
USB_MSB_FREE_SPACE_KEY_TWO,
USB_LSB_FREE_SPACE_KEY_TWO,
USB_NEW_MODE_DETECTED,
USB_NEW_MODE,
end_of_db_usb_table};
#line 130 "..\\..\\SRC\\HMI\\HMI_Controller.hpp"
enum __Q2_10Controller5WayId {
eGoUp__10Controller, eGoDown__10Controller, eGoValid__10Controller, eGoLongValid__10Controller, eGoMonitor__10Controller};



enum __Q2_10Controller11LegendState {
eOnStart__10Controller, eOnWait__10Controller, eStartVentil__10Controller, eStopVentil__10Controller};



enum __Q2_10Controller11eSTEP_LEVEL {
eSTEP_LEVEL_LOW__10Controller, eSTEP_LEVEL_HIGH__10Controller};
#line 118
struct Controller;
#line 40 "..\\..\\SRC\\HMI\\HMI_MenuControlNode.hpp"
struct MenuControlNode;
#line 36 "..\\..\\SRC\\HMI\\HMI_GlobalEventNode.hpp"
enum IndexNode {

NodeVentil, NodeModifVentil, NodeVt, NodeModifVt, NodePi, NodeModifPi, NodePi2, NodeModifPi2,
NodePControl, NodeModifPControl, NodePSupport, NodeModifPSupport, NodeFVaci, NodeModifFVaci, NodePe, NodeModifPe, NodePente,
NodeModifPente, NodeRampe, NodeModifRampe, NodeFrMini, NodeModifFrMini, NodeInspTime, NodeModifInspTime,
NodeTriggerI, NodeModifTriggerI, NodeSoupirSelect, NodeModifSoupirSelect, NodeSoupirVtCoeff, NodeModifSoupirVtCoeff,
NodeSoupirCpt, NodeModifSoupirCpt, NodeTriggerE, NodeModifTriggerE, NodeFsecu, NodeModifFsecu, NodeFiO2,
NodeModifFiO2, NodeApnee, NodeModifApnee, NodeVtCible, NodeModifVtCible, NodePiMax, NodeModifPiMax,
NodeTriggerEsigned, NodeModifTriggerEsigned, NodePreference, NodeModeChange,
NodeModifModeChange, NodeGhost,


NodeAlarm, NodeModifAlarm, NodeAlPi, NodeAlPiMin, NodeAlPiMax, NodeAlVti, NodeAlVtiMin,
NodeAlVtiMax, NodeAlVte, NodeAlVteMin, NodeAlVteMax, NodeAlCalibVte, NodeAlCalibVte2, NodeAlFuite,
NodeAlFuiteMax, NodeAlFiO2, NodeAlFiO2Min, NodeAlFiO2Max, NodeAlCalibFiO2, NodeAlCalibFiO2_2, NodeAlFr, NodeAlFrMax, NodeAlSpO2,
NodeAlSpO2Min, NodeAlSpO2Max, NodeAlTi, NodeAlTiMin, NodeAlTiMax,
NodeAlHisto, NodeAlModeChange, NodeModifAlModeChange, NodeAlGhost,


NodeHistAlBack, NodeHistAlCancelled,


NodeConfLang,
NodeModifConfLang,
NodeConfDate,
NodeConfMonth,
NodeConfDay,
NodeConfYear,
NodeConfTime,
NodeConfHour,
NodeConfMinute,
NodeConfSecond,
NodePrefVoluntaryStopAlarm,
NodeModifPrefVoluntaryStopAlarm,
NodeConfPressureUnit,
NodeModifConfPressureUnit,
NodeConfAlarmTone,
NodeModifConfAlarmTone,
NodeConfPatientCount,
NodeModifConfPatientCount,
NodeConfPatientReset,
NodeModifConfPatientReset,
NodeConfMaint,
NodeConfResetDefaultSetting,
NodeModifConfResetDefaultSetting,
NodeConfMachineHour,
NodeConfNextPage,



NodeConfModeCycl,
NodeModifConfModeCycl,
NodeConfRelativePress,
NodeModifConfRelativePress,

NodeConfConvTrigE,
NodeModifConfConvTrigE,
NodeConfig1BackToConfig,


NodeTestCircuitLeak,


NodePrefScreenSave, NodeModifPrefScreenSave, NodePrefBrightness, NodeModifPrefBrightness, NodePrefSoundLevel, NodeModifPrefSoundLevel, NodePrefKeyTone,
NodeModifPrefKeyTone, NodePrefApneaAlarm, NodeModifPrefApneaAlarm, NodePrefDisconnectionAlarm, NodeModifPrefDisconnectionAlarm,




NodePrefWaveDisplay,
NodeModifPrefWaveDisplay,


NodePrefPediatricCircuit,
NodeModifPrefPediatricCircuit,
NodePrefTrend,
NodePrefBackVentil,


NodeMaintHistAno, NodeMaintVoltCtrl, NodeMaintSensorCal,
NodeMaintGhostStart,
NodeMaintPatientPressure, NodeMaintPatientPressure1, NodeMaintPatientPressure2, NodeMaintPatientPressure3,
NoteMaintValvePressure, NoteMaintValvePressure1, NoteMaintValvePressure2, NoteMaintValvePressure3,
NodeMaintFlowIns, NodeMaintFlowIns1, NodeMaintFlowIns2, NodeMaintFlowIns3, NodeMaintFlowIns4, NodeMaintFlowIns5, NodeMaintFlowIns6, NodeMaintFlowIns7, NodeMaintFlowIns8, NodeMaintFlowIns9,
NodeMaintFlowExp, NodeMaintFlowExp1, NodeMaintFlowExp2, NodeMaintFlowExp3, NodeMaintFlowExp4, NodeMaintFlowExp5, NodeMaintFlowExp6, NodeMaintFlowExp7, NodeMaintFlowExp8, NodeMaintFlowExp9,
NodeMaintFiO2Concent, NodeMaintFiO2Concent1, NodeMaintFiO2Concent2,
NodeMaintFlowO2, NodeMaintFlowO2_1, NodeMaintFlowO2_2, NodeMaintFlowO2_3, NodeMaintFlowO2_4, NodeMaintFlowO2_5, NodeMaintFlowO2_6, NodeMaintFlowO2_7, NodeMaintFlowO2_8, NodeMaintFlowO2_9,
NodeMaintPressO2, NodeMaintPressO2_1, NodeMaintPressO2_2,
NodeMaintGhostEnd,
NodeMaintPwmBlower, NodeModifMaintPwmBlower, NodeMaintBackToConfig,


NodeHistAnoBackMaint,


NodeSupplyBuzVolt, NodeSupplyBackUpBuz, NodeSupplyBatteryMenu, NodeSupplyAltCompens, NodeModifSupplyAltCompens, NodeSupplyBackToMaint,


NodeGraphGhost,


NodeCfgGraphVisu, NodeModifCfgGraphVisu, NodeCfgGraphPMax, NodeModifCfgGraphPMax, NodeCfgGraphQMax, NodeModifCfgGraphQMax, NodeCfgGraphVtMax,
NodeModifCfgGraphVtMax, NodeCfgGraphTMax, NodeModifCfgGraphTMax, NodeCfgGraphRepresent, NodeModifCfgGraphRepresent, NodeCfgGraphBackPref,


NodeBatteryBackToMaint,


NodeUsbGhost,
NodeUsbContRecord, NodeModifUsbContRecord,
NodeUsbTransferTrend, NodeModifUsbTransferTrend,
NodeUsbEraseKey, NodeModifUsbEraseKey,




NodeUsbTransferMonit, NodeModifUsbTransferMonit,




NodeUsbStop,

NodeTrendBack,


NodeGhostEnd,


NodeFree,


NB_NODE};
#line 40 "..\\..\\SRC\\HMI\\HMI_EventNode.hpp"
struct EventNode; struct __T51135408 { short d; short i; void (*f)();}; typedef char bool;
#line 33 "..\\..\\SRC\\GENERAL\\typedef.h"
typedef int e_BOOL;
#line 63
typedef unsigned char UBYTE;
typedef unsigned UWORD16;
typedef unsigned long UWORD32;

typedef signed int SWORD16;
typedef signed long SWORD32;
#line 104 "..\\..\\SRC\\GENERAL\\enum.h"
typedef enum e_SYMBOL e_SYMBOL;
#line 391
typedef enum e_TYPE_OF_DB_TARGET e_TYPE_OF_DB_TARGET;
#line 417
typedef enum e_MODE_TYPES e_MODE_TYPES;
#line 557
typedef enum e_VentilState e_VentilState;
#line 106 "..\\..\\SRC\\HMI\\HMI_IhmType.hpp"
struct AlarmEvent {
UWORD16 id;
UWORD16 action;
e_BOOL logtolast;
UWORD16 day;
UWORD16 month;
UWORD16 year;
UWORD16 hour;
UWORD16 min;};
typedef struct AlarmEvent AlarmEvent;
#line 199
typedef enum EventId EventId;
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject {
#line 45
e_TYPE_OF_DB_TARGET DbTarget;

UWORD16 IdParam; struct __T51135408 *__vptr;};
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject { struct MenuObject __b_MenuObject;
#line 47
struct DisplayObject *Parent;


UWORD16 Line;


UWORD16 Col;


UWORD16 Page;

e_BOOL Visible;

e_BOOL RefreshE;};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject { struct DisplayObject __b_DisplayObject;
#line 47
UWORD16 Font;

e_BOOL ReverseVideo;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField { struct FieldObject __b_FieldObject;
#line 41
UWORD16 Value; UWORD16 NbDigit; UWORD16 Divider;

e_BOOL DisplayZero; e_BOOL Float; e_BOOL SignValue;
#line 51
e_BOOL ChildBackgroundEqualParent;

e_BOOL IEDisplay;};
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField { struct FieldObject __b_FieldObject;
#line 41
UBYTE *Text;};
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 Height;


UWORD16 Width;

e_BOOL FloodBlack;
e_BOOL RoundHigh;
e_BOOL RoundLow;};
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField { struct FieldObject __b_FieldObject;
#line 40
e_SYMBOL Symbol;

e_BOOL BarredSymbol;};
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog { struct DisplayObject __b_DisplayObject;
#line 46
struct TextField FLine1;
e_BOOL Line1Centered;

struct TextField FLine2;
e_BOOL Line2Centered;

struct TextField FLine3;
e_BOOL Line3Centered;

struct SymbolField FSymbol;

struct GraphicBox MonitorBox;

UBYTE TextLine[3][33];

e_BOOL Line1Ok; e_BOOL Line2Ok; e_BOOL Line3Ok; e_BOOL SymbolOk;

UWORD16 WBox;};
#line 46 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
typedef enum DataType DataType;

struct Loupe { struct DisplayObject __b_DisplayObject;



struct TextField FValueS;

struct ValueField FValueI;

e_BOOL StringValue;
e_BOOL HaveText;

DataType Dtype;
#line 68
struct MessageDialog Message;

struct GraphicBox MonitorBox;};
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label { struct DisplayObject __b_DisplayObject;
#line 44
e_SYMBOL PreviousIcon;

UBYTE **Name;

struct Loupe *LoupeObject;

struct SymbolField FIcon;

struct TextField FLabel;

e_BOOL Centered;};
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject { struct Label __b_Label;
#line 42
UWORD16 ValueTemp;


UWORD16 IdFlagTemp;


UWORD16 ValueFlagTemp;

e_TYPE_OF_DB_TARGET DbIdFlagTemp;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField { struct ValueField __b_ValueField;
#line 41
UBYTE *Text;

e_BOOL IsString;};
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue { struct EditableObject __b_EditableObject;
#line 46
struct TextField FUnit1;
struct TextField FSep;

struct ValueTextField FValue1;

e_BOOL LabelOnly;
e_BOOL ValueIsString;
e_BOOL StopMonitoring;

UBYTE **NameUnit;

UWORD16 Divider;

e_BOOL NbDigitsChanged;
e_BOOL InitNbDigits;

e_BOOL MaxDisplayValueConfigured;
UWORD16 MaxDisplayValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSign.hpp"
struct LabelOneValueSign { struct LabelOneValue __b_LabelOneValue;




struct TextField FSign;
UWORD16 CachedSignSize;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDbRT.hpp"
struct LabelOneValueDbRT { struct LabelOneValue __b_LabelOneValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignDefault.hpp"
struct LabelOneValueSignDefault { struct LabelOneValueSign __b_LabelOneValueSign;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignFlag.hpp"
struct LabelOneValueSignFlag { struct LabelOneValueSignDefault __b_LabelOneValueSignDefault;
#line 41
UWORD16 IdFlag;

e_TYPE_OF_DB_TARGET DbIdFlag;
e_BOOL FlagForDefault;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDefault.hpp"
struct LabelOneValueDefault { struct LabelOneValue __b_LabelOneValue;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueThreeDefault.hpp"
struct LabelOneValueThreeDefault { struct LabelOneValueDefault __b_LabelOneValueDefault;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;

UWORD16 DefaultValue1;

UBYTE **NameDefaultValue1;

UWORD16 DefaultValue2;

UBYTE **NameDefaultValue2;

UWORD16 DisplayValue; UWORD16 DisplayValue1; UWORD16 DisplayValue2;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFourDefault.hpp"
struct LabelOneValueFourDefault { struct LabelOneValueDefault __b_LabelOneValueDefault;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;

UWORD16 DefaultValue1;

UBYTE **NameDefaultValue1;

UWORD16 DefaultValue2;

UBYTE **NameDefaultValue2;

UWORD16 DefaultValue3;

UBYTE **NameDefaultValue3;

UWORD16 DisplayValue;

UWORD16 DisplayValue1;

UWORD16 DisplayValue2;

UWORD16 DisplayValue3;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFlag.hpp"
struct LabelOneValueFlag { struct LabelOneValueDefault __b_LabelOneValueDefault;
#line 41
UWORD16 IdFlag;

e_TYPE_OF_DB_TARGET DbIdFlag;

e_BOOL FlagForDefault;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelOneValueTrig.hpp"
struct LabelOneValueTrig { struct LabelOneValue __b_LabelOneValue;
#line 42
struct SymbolField FTrig;

e_BOOL Trigger;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelProgressBar.hpp"
struct LabelProgressBar { struct EditableObject __b_EditableObject;
#line 43
struct TextField FSep;

UBYTE **NameUnit;

UWORD16 PixelValue;
UWORD16 RealValue;
UWORD16 ColValue;
UWORD16 LowLimit;
UWORD16 LimitDelta;

e_BOOL BipRequest;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue { struct LabelOneValue __b_LabelOneValue;
#line 43
struct TextField FUnit2;

struct ValueTextField FValue2;

UBYTE **NameUnit2;

UWORD16 ValueState;
UWORD16 IdParam2;
UWORD16 Divider2;

e_TYPE_OF_DB_TARGET DbTarget2;

e_BOOL ColAdjust;

e_BOOL MaxDisplayValue2Configured;
UWORD16 MaxDisplayValue2;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueLock.hpp"
struct LabelTwoValueLock { struct LabelTwoValue __b_LabelTwoValue;};
#line 42 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValue.hpp"
struct LabelTabOneValue { struct EditableObject __b_EditableObject;
#line 49
struct TextField TFNoValue;

struct ValueTextField FValue1;
struct ValueTextField FValueRefresh;

UWORD16 ValueTemp;
UWORD16 IdParamMonitor;
UWORD16 Divider;

e_BOOL Value1IsString;
e_BOOL StopMonitoring;
e_BOOL Value1IsMaxi;

e_TYPE_OF_DB_TARGET DbTargetMonitor;

e_BOOL MaxDisplayValueConfigured;
UWORD16 MaxDisplayValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueDefault.hpp"
struct LabelTabOneValueDefault { struct LabelTabOneValue __b_LabelTabOneValue;
#line 41
UWORD16 DefaultValue1;

UBYTE **NameDefaultValue1;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueFlag.hpp"
struct LabelTabOneValueFlag { struct LabelTabOneValueDefault __b_LabelTabOneValueDefault;
#line 41
UWORD16 IdFlag1;

e_TYPE_OF_DB_TARGET DbIdFlag1;
e_BOOL FlagForDefault1;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValue.hpp"
struct LabelTabTwoValue { struct LabelTabOneValue __b_LabelTabOneValue;
#line 43
struct ValueTextField FValue2;

UBYTE **NameUnit;

UWORD16 ValueState;
UWORD16 IdParam2;

e_BOOL Value2IsString;

e_TYPE_OF_DB_TARGET DbTarget2;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueTwoLabels.hpp"
struct LabelTabTwoValueTwoLabels { struct LabelTabTwoValue __b_LabelTabTwoValue;
#line 42
struct Label FLabel2;

UWORD16 ColOffset;
UWORD16 LineOffset;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueDefault.hpp"
struct LabelTabTwoValueDefault { struct LabelTabTwoValue __b_LabelTabTwoValue;
#line 41
UWORD16 DefaultValue1;
UWORD16 DefaultValue2;

UBYTE **NameDefaultValue1;
UBYTE **NameDefaultValue2;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueFlag.hpp"
struct LabelTabTwoValueFlag { struct LabelTabTwoValueDefault __b_LabelTabTwoValueDefault;
#line 41
UWORD16 IdFlag1;

e_TYPE_OF_DB_TARGET DbIdFlag1;

e_BOOL FlagForDefault1;

UWORD16 IdFlag2;

e_TYPE_OF_DB_TARGET DbIdFlag2;

e_BOOL FlagForDefault2;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelValueString.hpp"
struct LabelValueString { struct EditableObject __b_EditableObject;
#line 41
struct TextField FValue1;

struct TextField FSep;

UWORD16 IntValue1;

e_BOOL ColAdjust;

e_BOOL StopMonitoring;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelStringTwoItems.hpp"
struct LabelStringTwoItems { struct LabelValueString __b_LabelValueString;
#line 40
UBYTE **Item1Name;
UBYTE **Item2Name;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelStringNItems.hpp"
struct LabelStringNItems { struct LabelValueString __b_LabelValueString;
#line 41
UBYTE **ItemNames[10];

UWORD16 Size;

UWORD16 CurrentRank;};
#line 33 "..\\..\\SRC\\HMI\\HMI_LabelLanguage.hpp"
struct LabelLanguage { struct LabelValueString __b_LabelValueString;
#line 39
UBYTE **ValueName;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelMode.hpp"
struct LabelMode { struct Label __b_Label;
#line 42
struct TextField FNominalMode;
struct TextField FModifMode;
struct TextField FStateModifMode;
struct TextField FActifMode;
struct TextField FStateActifMode;
struct TextField FSep;

UBYTE **NameMode;
UBYTE **NameMode2;
UBYTE **NameMode3;
UBYTE **ActifName;
UBYTE **NoActifName;

e_MODE_TYPES ActifMode;
e_MODE_TYPES ModifMode;

e_BOOL NominalMode;
e_BOOL NameMode2Display;
e_BOOL InModification;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelSymbol.hpp"
struct LabelSymbol { struct EditableObject __b_EditableObject;
#line 43
struct SymbolField FSymbol;

struct TextField FTextUnderSymbol;

e_BOOL UsedTextUnderSymbol;

struct TextField FSep;};
#line 35 "..\\..\\SRC\\HMI\\HMI_Rampe.hpp"
struct Rampe { struct LabelSymbol __b_LabelSymbol;};
#line 34 "..\\..\\SRC\\HMI\\HMI_RiseTime.hpp"
struct RiseTime { struct LabelSymbol __b_LabelSymbol;};
#line 34 "..\\..\\SRC\\HMI\\HMI_AutoCalibValue.hpp"
struct AutoCalibValue { struct LabelOneValue __b_LabelOneValue;
#line 41
e_TYPE_OF_DB_TARGET BdCalibParam;


UWORD16 IdCalibParam;


UWORD16 NbSegment;


UWORD16 CurrentSegment;

const UWORD16 *SegmentList;
const e_BOOL *FloatList;};
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibValue.hpp"
struct ManualCalibValue { struct AutoCalibValue __b_AutoCalibValue;
#line 44
UWORD16 IdBlow;
UWORD16 IdMesBlow;

e_TYPE_OF_DB_TARGET BdBlow;
e_TYPE_OF_DB_TARGET BdMesBlow;

e_BOOL FirstModifOnCalibPoint; e_BOOL firstRequest;};
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibTwoValue.hpp"
struct ManualCalibTwoValue { struct ManualCalibValue __b_ManualCalibValue;
#line 44
struct LabelOneValue Value2;};
#line 37 "..\\..\\SRC\\HMI\\HMI_VDate.hpp"
typedef enum e_VDATE_FORMAT e_VDATE_FORMAT;
#line 43
struct VDate { struct EditableObject __b_EditableObject;
#line 51
struct TextField FSep;
struct TextField FMonth;

struct ValueField FDay;
struct ValueField FYears;

UBYTE **NameMonth;

UWORD16 Month;
UWORD16 ValueState;

UWORD16 IdParam2;
UWORD16 IdParam3;
UWORD16 IdParamReg1;
UWORD16 IdParamReg2;
UWORD16 IdParamReg3;

UWORD16 ColBackup;

e_TYPE_OF_DB_TARGET IdDbParamReg;

e_VDATE_FORMAT VDateFormat;

e_BOOL StopMonitoring;};
#line 37 "..\\..\\SRC\\HMI\\HMI_VTime.hpp"
typedef enum e_VTIME_FORMAT e_VTIME_FORMAT;
#line 47
typedef enum __Q2_5VTime8e_PERIOD __Q2_5VTime8e_PERIOD;
#line 42
struct VTime { struct EditableObject __b_EditableObject;
#line 50
e_BOOL SecVisible;

__Q2_5VTime8e_PERIOD Suffixe;

e_BOOL ForcedSuffixUpdate;


struct TextField FSep;

struct TextField FSepHours;

struct TextField FSepMin;

struct TextField FSuffixe;


struct ValueField FHours;

struct ValueField FMin;

struct ValueField FSec;


UWORD16 ValueState;


UWORD16 IdParam2;

UWORD16 IdParam3;

UWORD16 IdParamReg1;

UWORD16 IdParamReg2;

UWORD16 IdParamReg3;

e_VTIME_FORMAT VTimeFormat;

e_BOOL StopMonitoring;};
#line 40 "..\\..\\SRC\\HMI\\HMI_BlinkTable.hpp"
struct BlinkTable {
#line 46
struct DisplayObject *Table[5];

e_BOOL BlinkState;};
#line 36 "..\\..\\SRC\\HMI\\HMI_RefreshTable.hpp"
struct RefreshTable {
#line 43
struct DisplayObject **TableRefresh[2];

UWORD16 IndexEndAlway0;
UWORD16 IndexEndInsp0;
UWORD16 IndexEndExp0;
UWORD16 IndexEndXAlway0;
UWORD16 IndexEndAlway1;
UWORD16 IndexEndInsp1;
UWORD16 IndexEndExp1;
UWORD16 IndexEndXAlway1;};
#line 41 "..\\..\\SRC\\HMI\\HMI_ParameterSpy.hpp"
struct ParameterSpy {
#line 50
UWORD16 TableId[31];


e_TYPE_OF_DB_TARGET TableBd[31];


UWORD16 TableValue[31];


EventId TableEvent[31];


e_BOOL TableEventOk[31];};
#line 39 "..\\..\\SRC\\HMI\\HMI_VTimer.hpp"
struct VTimer {char __dummy;};
#line 46 "..\\..\\SRC\\HMI\\HMI_AlarmTable.hpp"
struct AlarmTable {
#line 52
AlarmEvent TableAlarm[30];


UWORD16 CurrentIndex;


UWORD16 NbAlarm;


UWORD16 MaxAction;

AlarmEvent LastAlarm;};
#line 37 "..\\..\\SRC\\HMI\\HMI_AlarmManager.hpp"
typedef enum eAMANAGER_DOUBLE eAMANAGER_DOUBLE;




struct AlarmManager {
#line 50
UWORD16 RefreshActif;
eAMANAGER_DOUBLE DoubleAlarm;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm { struct Loupe __b_Loupe;};
#line 45 "..\\..\\SRC\\HMI\\HMI_MonitoringObject.hpp"
struct MonitoringObject { struct DisplayObject __b_DisplayObject;
#line 52
UBYTE **Name;

UBYTE **Unit;


UWORD16 DivisionFactorOfValue;

e_BOOL Trigger;

e_BOOL ReverseVideo;

e_BOOL CenteredDisplay;

e_BOOL IconIsPrefered;

e_BOOL ValueReady;

e_BOOL StopMonitoring;

e_BOOL TextHeaderOn;

e_BOOL FloatDisplayOn;

e_BOOL MaxDisplayValueConfigured;

UWORD16 MaxDisplayValue;

e_BOOL SignedValue;
#line 90
e_SYMBOL Icon; e_SYMBOL IconInverseVideo;

struct SymbolField FIcon;

struct SymbolField FTrig;

struct TextField TFTitle;

struct TextField TFUnit;

struct ValueTextField VTFValue;};
#line 234 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
typedef struct tInfo tInfo;
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame { struct DisplayObject __b_DisplayObject;
#line 48
struct LoupeAlarm LoupeA;

struct Loupe *LoupeObject; struct Loupe LoupeV;

e_BOOL MonitorOn;
e_BOOL MessageOn;
e_BOOL ImpactDisplay;

tInfo *InfoTablePtr;
UWORD16 MaxObjects;
UWORD16 SpaceHeight;
UWORD16 SpaceFirstLine;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelVersion.hpp"
struct LabelVersion { struct LabelValueString __b_LabelValueString;




e_TYPE_OF_DB_TARGET DbTarget;};
#line 41 "..\\..\\SRC\\HMI\\HMI_FrameWelcome.hpp"
struct FrameWelcome { struct VFrame __b_VFrame;
#line 49
struct Label LWelcome;
struct Label LCopyRight;

struct VDate Date1;

struct VTime Time1;

struct SymbolField SFLogo; struct SymbolField SFLogo2; struct SymbolField SFLogo3;

struct SymbolField SFCompanyName;

struct LabelOneValue LOVMachine;

struct LabelTwoValue LTVPatient;

struct LabelVersion LVSVersion; struct LabelVersion LVSSupplyVersionSoft;

struct DisplayObject *RefreshTable[6];};
#line 35 "..\\..\\SRC\\HMI\\HMI_FrameConfiguration.hpp"
struct FrameConfiguration { struct VFrame __b_VFrame;
#line 43
struct Label LConfiguration;};
#line 35 "..\\..\\SRC\\HMI\\HMI_FramePreference.hpp"
struct FramePreference { struct VFrame __b_VFrame;
#line 43
struct Label LPreferences;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelSerial.hpp"
struct LabelSerial { struct LabelValueString __b_LabelValueString;};
#line 42 "..\\..\\SRC\\HMI\\HMI_FrameMaintenance.hpp"
struct FrameMaintenance { struct VFrame __b_VFrame;
#line 54
struct Label LMaintenance;

struct LabelSerial LVSSerieNumber;

struct TextField TFSup;

struct LabelVersion LVSVersionSoft;
struct LabelVersion LVSSupplyVersionSoft;

struct LabelOneValue LOVSpeed;

struct DisplayObject *RefreshTable[5];};
#line 37 "..\\..\\SRC\\HMI\\HMI_FrameHistoAno.hpp"
typedef enum e_ANO_DATE_FORMAT e_ANO_DATE_FORMAT;




typedef enum e_ANO_TIME_FORMAT e_ANO_TIME_FORMAT;

struct FrameHistoAno { struct VFrame __b_VFrame;
#line 52
struct Label LHistoAno;

e_ANO_DATE_FORMAT AlarmDateFormat;
e_ANO_TIME_FORMAT AlarmTimeFormat;};
#line 36 "..\\..\\SRC\\HMI\\HMI_FrameVoltControl.hpp"
struct FrameVoltControl { struct VFrame __b_VFrame;
#line 44
struct Label LVoltCtrl;

struct LabelOneValue LOVAlim24V;
struct LabelOneValue LOVWatchDog;
struct LabelOneValue LOVAbsPress;
struct LabelOneValue LOVIntTemp;
struct LabelOneValue LOVTemp;
struct LabelOneValue LOVTempBat;
struct LabelOneValue LOVBlowTemp;
struct SymbolField Bat;

struct DisplayObject *RefreshTable[11];};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueTrig.hpp"
struct LabelTwoValueTrig { struct LabelTwoValueLock __b_LabelTwoValueLock;
#line 42
struct SymbolField FTrig;

e_BOOL Trigger;
e_BOOL Float;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelAlarme.hpp"
struct LabelAlarme { struct Label __b_Label;
#line 47
UWORD16 AlarmId;};
#line 34 "..\\..\\SRC\\HMI\\HMI_BarGraph.hpp"
struct BarGraph { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 Position;


UWORD16 Value;


UWORD16 Pep;


UWORD16 Pmax;


UWORD16 firstShow;


UWORD16 IdPep;


UWORD16 IdPmax;


UWORD16 Divider;


UBYTE **NameUnit;

struct TextField TFUnit;};
#line 46 "..\\..\\SRC\\HMI\\HMI_MessageList.hpp"
struct __Q2_11MessageList8TMessage {
UWORD16 Id;
UBYTE Text[3][33];
e_BOOL Used;};

typedef struct __Q2_11MessageList8TMessage __Q2_11MessageList8TMessage;
#line 41
struct MessageList {
#line 54
__Q2_11MessageList8TMessage Messages[15];

UBYTE InListTable[11];};
#line 37 "..\\..\\SRC\\HMI\\HMI_LabelAlarmeTwoLine.hpp"
struct LabelAlarmeTwoLine { struct LabelAlarme __b_LabelAlarme;
#line 44
struct TextField FLine2;

UBYTE TextLine[3][33];

UWORD16 WBox;

struct MessageList AlarmList;};
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject { struct DisplayObject __b_DisplayObject;
#line 44
struct LabelOneValue LOVPercent;

struct LabelTwoValue LTVJauge;

struct SymbolField SFEqual;

e_BOOL JaugeAvailable;
e_BOOL BusFailure;
e_BOOL UnknownBattery;
e_BOOL CheckSupply;
e_BOOL CheckBattery;
e_BOOL ForcedDisplay;

UWORD16 CurrentDisplay;};
#line 53 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.hpp"
struct FrameVentilation { struct VFrame __b_VFrame;
#line 59
struct BarGraph BarVentil;
struct SymbolField SFValve;

struct LabelOneValue LOVPip;
struct LabelOneValue LOVVti;
struct LabelOneValue LOVVte;
struct LabelOneValue LOVVm;
struct LabelOneValue LOVR;
struct LabelOneValue LOVFIO2;
struct LabelOneValue LOVSPO2;
struct LabelOneValue LOVFuite;
struct LabelTwoValueTrig LTVIE;
struct LabelOneValueTrig LOVIT;

struct BatteryObject BOBat;

e_MODE_TYPES Mode;

e_BOOL BatVisible;
e_BOOL ValveVisible;
e_BOOL IsInhibApneaAlarm;
e_BOOL IsInhibAlarm;
e_BOOL IsCancelAlarm;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;
e_BOOL ExhalFlowUsed;

struct MessageDialog Message;

struct LabelAlarmeTwoLine LAlarme;

struct GraphicBox MonitorBox; struct GraphicBox AlarmBox;

struct DisplayObject *RefreshTable[16];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;

struct Label PressConvention;};
#line 51 "..\\..\\SRC\\HMI\\HMI_GraphicTable.hpp"
struct tGraphTableConfig {
e_BOOL CellConfig[10][6];
e_BOOL ColConfig[6];
e_BOOL LineConfig[10];};

typedef struct tGraphTableConfig tGraphTableConfig;


struct GraphicTable { struct DisplayObject __b_DisplayObject;
#line 68
UWORD16 Width;

UWORD16 Height;


UWORD16 LineNb;

UWORD16 FirstLineHeight;

UWORD16 OtherLineHeight;

UWORD32 BoldLines;


UWORD16 ColNb;

UWORD16 FirstColWidth;

UWORD16 OtherColWidth;

UBYTE **ColTitle[6];



tGraphTableConfig GraphTableConfig;};
#line 58 "..\\..\\SRC\\HMI\\HMI_FrameAlarme.hpp"
typedef enum e_ALARM_DATE_FORMAT e_ALARM_DATE_FORMAT;




typedef enum e_ALARM_TIME_FORMAT e_ALARM_TIME_FORMAT;


struct FrameAlarme { struct VFrame __b_VFrame;
#line 75
struct BatteryObject BOBat;
struct SymbolField SFValve;

struct GraphicBox MonitorBox;
struct GraphicBox AlarmBox;

struct LabelAlarmeTwoLine LAlarme;

struct TextField LastAlarmDate;

struct GraphicTable GTable;

struct LabelOneValue LOVPip;

struct LabelOneValue LOVMap;

struct LabelOneValue LOVVti;

struct LabelOneValue LOVPeep;

struct LabelOneValue LOVR;

struct LabelOneValue LOVM;

struct LabelOneValueTrig LOVIT;

struct LabelTwoValueTrig LTVIE;

e_MODE_TYPES Mode;

e_BOOL BatVisible;
e_BOOL ValveVisible;
e_BOOL IsInhibApneaAlarm;
e_BOOL IsInhibAlarm;
e_BOOL IsCancelAlarm;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;

e_BOOL MutexAlarm;

struct MessageDialog Message;

struct DisplayObject *RefreshTable[13];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;

e_ALARM_DATE_FORMAT AlarmDateFormat;

e_ALARM_TIME_FORMAT AlarmTimeFormat;};
#line 37 "..\\..\\SRC\\HMI\\HMI_FrameHistoAlarme.hpp"
struct FrameHistoAlarme { struct VFrame __b_VFrame;
#line 44
struct Label LHistoAlarm;

e_ALARM_DATE_FORMAT AlarmDateFormat;
e_ALARM_TIME_FORMAT AlarmTimeFormat;};
#line 36 "..\\..\\SRC\\HMI\\HMI_MonitoringObjectTwoValue.hpp"
struct MonitoringObjectTwoValue { struct MonitoringObject __b_MonitoringObject;
#line 43
struct ValueTextField VTFValue2;

struct TextField TFSep;

UWORD16 IdParam2;

UWORD16 Value2;

e_TYPE_OF_DB_TARGET DbTarget2;

e_BOOL FloatDisplayOn2;

e_BOOL MaxDisplayValue2Configured;

UWORD16 MaxDisplayValue2;};
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphTitle.hpp"
struct GraphTitle { struct DisplayObject __b_DisplayObject;
#line 42
struct TextField TFMode;

UBYTE **NameMode1;
UBYTE **NameMode2;

e_BOOL NameMode2Display;};
#line 39 "..\\..\\SRC\\HMI\\HMI_DataBaseLink.hpp"
struct DataBaseLink {
#line 46
UWORD16 IdParam;

e_TYPE_OF_DB_TARGET DbTarget;};
#line 36 "..\\..\\SRC\\HMI\\HMI_Scale.hpp"
typedef enum TOrientation TOrientation;

typedef enum TSide TSide;



struct Scale { struct FieldObject __b_FieldObject;
#line 48
TOrientation Orientation;

SWORD32 Width; SWORD32 Heigth; SWORD32 MajorTickSpacing; SWORD32 ZeroPos; SWORD32 FirstX;

SWORD32 Min; SWORD32 Max;

SWORD32 Pas;

e_BOOL TickVisible;
e_BOOL DoubleTick;
e_BOOL NumberVisible;
e_BOOL AutoScale;
e_BOOL Symetric;
e_BOOL FirstRefresh;

TSide NumberSide;

struct DataBaseLink DBMax;};
#line 39 "..\\..\\SRC\\HMI\\HMI_VPoint.hpp"
struct VPoint {
#line 46
SWORD16 X;

SWORD16 Y;};
#line 39 "..\\..\\SRC\\HMI\\HMI_Pen.hpp"
struct Pen {
#line 50
UWORD16 LocalCounter;


e_BOOL Dotted;


e_BOOL DottedState;};
#line 38 "..\\..\\SRC\\HMI\\HMI_CurveData.hpp"
struct CurveData {
#line 44
struct VPoint CurrentPoint;

struct VPoint PreviousPoint;

struct Scale *Ex;

struct Scale *Ey;

struct Pen LocalPen;

struct DataBaseLink DBx;

struct DataBaseLink DBy;


SWORD16 MaxX;


SWORD16 MaxY;


SWORD16 MinX;


SWORD16 MinY;

e_BOOL JustReset;
e_BOOL OutOfLimitDis;
e_BOOL CurveStart;};
#line 49 "..\\..\\SRC\\HMI\\HMI_Graph.hpp"
struct Graph { struct GraphicBox __b_GraphicBox;




struct Scale ScaleX; struct Scale ScaleY;



struct CurveData *CurveTable[1];

struct GraphControl *GControl;

struct TextField LabelX; struct TextField LabelY; struct TextField LabelOOL;

e_BOOL Freezed; e_BOOL OutOfLimit;

UWORD16 CurveNumber;

UBYTE **TUnit1;
UBYTE **TUnit2;
UBYTE **TOutOfLimit;};
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphControl.hpp"
struct GraphControl {
#line 41
struct Graph *GraphTarget; struct __T51135408 *__vptr;};
#line 34 "..\\..\\SRC\\HMI\\HMI_PerformanceGraphControl.hpp"
struct PerformanceGraphControl { struct GraphControl __b_GraphControl;
#line 40
UWORD16 RefreshTime;

UWORD16 CurrentTime;};
#line 35 "..\\..\\SRC\\HMI\\HMI_WobGraphControl.hpp"
struct WobGraphControl { struct GraphControl __b_GraphControl;
#line 42
e_VentilState VentilState;};
#line 65 "..\\..\\SRC\\HMI\\HMI_FrameGraph.hpp"
struct FrameGraph { struct VFrame __b_VFrame;
#line 73
struct BatteryObject BOBat;
struct SymbolField SFValve;

struct SymbolField SFPause;

struct Label LGraph;

struct GraphTitle GTMode;

struct Graph GSmallFlow;
struct Graph GSmallPressure;
struct Graph GSmallFlowV;
struct Graph GSmallPressureV;


struct PerformanceGraphControl PGCSmallFlow;
struct PerformanceGraphControl PGCSmallPressure;

struct CurveData CDFlow;
struct CurveData CDPressure;
struct CurveData CDFlowV;
struct CurveData CDPressureV;

struct WobGraphControl WGCSmallFlowV;
struct WobGraphControl WGCSmallPressureV;

struct MonitoringObject MoSpO2;
struct MonitoringObject MoFiO2;
struct MonitoringObject MoRate;
struct MonitoringObjectTwoValue MoTVIE;
struct MonitoringObject MoIT;
struct MonitoringObject MoVmi;
struct MonitoringObject MoFuite;
struct MonitoringObject MoVti;
struct MonitoringObject MoVte;
struct MonitoringObject MoPe;
struct MonitoringObject MoPip;
struct MonitoringObject MoPulse;
struct MonitoringObject MoTi;
struct MonitoringObject MoTe;

e_MODE_TYPES Mode;
e_MODE_TYPES PreviousMode;

e_BOOL ModeChange;

e_BOOL TriggerOn;
e_BOOL Freezed;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;
e_BOOL ExhalFlowUsed;

e_BOOL BlocExpiDetected;

e_BOOL FirstInitOk;

struct DisplayObject *RefreshTable[23];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;};
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameGraphConfig.hpp"
struct FrameGraphConfig { struct VFrame __b_VFrame;
#line 46
struct Label LGraphConfig;};
#line 40 "..\\..\\SRC\\HMI\\HMI_FrameBatteryMenu.hpp"
struct FrameBatteryMenu { struct VFrame __b_VFrame;
#line 48
struct Label LInternalBatteryMenu;

struct LabelOneValue LOVBatteryVoltage;
struct LabelOneValue LOVBatteryTemperature;
struct LabelOneValue LOVCyclesDone;
struct LabelOneValue LOVTheoreticalCapacity;
struct LabelOneValue LOVAgeing;
struct LabelOneValue LOVUnknownBat;
struct Label LNoBat;

struct LabelStringNItems LVSSupplier;

struct VDate VDDate;
struct VTime VTTime;

e_BOOL ForcedStoppedMonitoring;

struct DisplayObject *RefreshTable[6];};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueCentered.hpp"
struct LabelTwoValueCentered { struct LabelTwoValue __b_LabelTwoValue;};
#line 45 "..\\..\\SRC\\HMI\\HMI_FrameUSB.hpp"
struct FrameUSB { struct VFrame __b_VFrame;
#line 53
struct Label LUsb;

struct LabelSerial LVSSerieNumber;

struct MessageDialog Message;

UBYTE MessageString[60];


struct LabelTwoValueCentered LOVRemainingTime;

struct Label LWait;

struct DisplayObject *RefreshTable[5];
#line 72
UBYTE MessageStorage[100];};
#line 36 "..\\..\\SRC\\HMI\\HMI_TendanceTable.hpp"
struct TendanceTable { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 FirstDisplayLine;
UWORD16 FirstDisplayCol;

UWORD16 NbOfLines;
UWORD16 NbOfCols;

UWORD16 Height;
UWORD16 Width;
UWORD16 LineHeight;

UWORD16 OddColWidth;
UWORD16 EvenColWidth;};
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameTendance.hpp"
struct FrameTendance { struct VFrame __b_VFrame;
#line 46
struct Label LTendance; struct Label TableTitle;

struct TendanceTable GTable;




struct LabelOneValue LTVVt; struct LabelOneValue LTVVte; struct LabelOneValue LTVLeak; struct LabelOneValue LTVVm; struct LabelOneValue LTVFr;
struct LabelOneValue LTVPi; struct LabelOneValue LTVSpo2; struct LabelOneValue LTVFc;

struct LabelOneValue LOVSpont; struct LabelOneValue LOVContr; struct LabelOneValue LTVIA; struct LabelOneValue LTVTApnea;

struct LabelTwoValue LOVVentMoy;

struct VDate Date;

struct LabelOneValue LOVMachine;

struct LabelTwoValue LTVPatient;};
#line 42 "..\\..\\SRC\\HMI\\HMI_MessageDelayed.hpp"
struct __Q2_14MessageDelayed11FifoMessage {
UBYTE *Body;
UWORD32 Delay;};
typedef struct __Q2_14MessageDelayed11FifoMessage __Q2_14MessageDelayed11FifoMessage;
#line 38
struct MessageDelayed {
#line 49
e_BOOL Configured;

UWORD32 TimerLoad;

UWORD16 TimerId;

struct VTimer *TimerPtr;

struct MessageDialog *MessDiagPtr;

__Q2_14MessageDelayed11FifoMessage MessageFifo[6];

UWORD16 ReadIndex;

UWORD16 WriteIndex;};
#line 137 "..\\..\\SRC\\HMI\\HMI_Controller.hpp"
typedef enum __Q2_10Controller11LegendState __Q2_10Controller11LegendState;




typedef enum __Q2_10Controller11eSTEP_LEVEL __Q2_10Controller11eSTEP_LEVEL;
#line 581
typedef struct __T51135408 __Q2_10Controller11PController;
#line 118
struct Controller {
#line 146
struct MenuControlNode *CurrentNode;

struct MenuControlNode *UsbProcessingNode;
e_BOOL UsbCmdInProgress;

struct Loupe *CurrentLoupe;

struct MenuControlNode *ArrayNode;


UWORD16 CurrentFrame;

UWORD16 CurrentVirtualFrame;

__Q2_10Controller11LegendState LState;

e_BOOL LockOn;
e_BOOL UsbLock;
e_BOOL UsbKeyDetected;
e_BOOL ModeChangeOn;
e_BOOL ModifNodeOn;
e_BOOL PSupportNull;
e_BOOL IESelected;
e_BOOL TrigEPosSelected;
e_BOOL ValveDetected;
e_BOOL ImpactDisplay;
e_BOOL OnWait;
e_BOOL DifferMonitoringStart;
e_BOOL MonitoringMode;
e_BOOL ExhalFlowUsed;
e_BOOL VentButtonOn;
e_BOOL BuzzerVoltRefreshReq;
e_BOOL HighPressAlarmToBeRemoved;
e_BOOL LeakTestRunning;

UWORD16 LeakTestTimerCount;

struct MessageDialog TopMessage;

struct BlinkTable BTable;

struct RefreshTable RTable;

struct AlarmTable ATable;

struct ParameterSpy PSpy;

struct AlarmManager AManager;
e_BOOL IsDoubleMessageTimerStarted;

struct VTimer Timer;

struct DisplayObject *RefreshTableAlarm[12];
struct DisplayObject *RefreshTableMaintenance[12];
struct DisplayObject *RefreshTableConfig[6];
struct DisplayObject *RefreshTableVolt[5];

e_MODE_TYPES CurrentMode;

e_MODE_TYPES ConsultMode;

bool EraseFlag;

UWORD16 LastBrightness;
UWORD16 LastSoundLevel;
UWORD16 MemoSoundLevel;


struct DisplayObject GhostObject;


struct FrameWelcome FWelcome;


struct FrameUSB FUsb;
struct MessageDelayed UsbDelayed;
struct Label LStopUsb;
#line 228
struct LabelStringTwoItems LVSEraseKey;
struct LabelStringTwoItems LVSContRecord;
#line 235
struct LabelOneValueFlag LOVFTransfMonit;


struct LabelOneValueFlag LOVFTransfTrend;

UWORD16 PreviousErrorCode;

struct FrameTendance FTendance;
struct Label LRTendance;


struct FrameConfiguration FConfiguration;
struct Label LMaintenance; struct Label LRVentil;
struct Label LNextPage;
struct VTime VTConf;
struct VDate VDConf;
struct LabelLanguage LVSLanguage;
struct LabelStringTwoItems LVSVoluntaryStopAlarm;

struct LabelStringNItems LVSPressureUnit;
struct LabelStringTwoItems LVSAlarmTone;
struct LabelTwoValue LOVPatientHrs;
struct LabelOneValue LOVMachineHrs;
struct LabelStringTwoItems LVSSResetPatientHrs;
struct LabelOneValueFourDefault LOVFDAjustKeyTone;
struct LabelStringTwoItems LVSSRestoreDefaultSettings;


struct FramePreference FPreference;
struct LabelStringTwoItems LVSScreenSave; struct LabelStringTwoItems LVSKeySound; struct LabelStringTwoItems LVSWaveformDisplay;
struct LabelStringTwoItems LVSBaroCorrector; struct LabelStringTwoItems LVSApneaAlarm;
struct LabelStringTwoItems LVSPediatricCircuit;
struct LabelProgressBar LPBSoundLevel; struct LabelProgressBar LPBBrightness;
struct Label LRVentilMenu; struct Label LCurveConfiguration; struct Label LTrendMenu;
struct LabelOneValueFlag LOVFDisconnectionAlarm;


struct FrameCircuitCheck *FCircuitCheck;
struct Label LCircuitLeak;


struct FrameMaintenance FMaintenance;
struct LabelOneValueDbRT LOVPwmBlower;
struct Label LHistoAnom; struct Label LVoltCtrl; struct Label LSensorCal; struct Label LRConfMaint;
struct AutoCalibValue LOVFlowExp; struct AutoCalibValue LOVValvePressure;
struct ManualCalibValue LOVFlowIns; struct ManualCalibValue LOVFlowO2; struct ManualCalibValue LOVPressO2; struct ManualCalibValue LOVFiO2Concent;
struct ManualCalibTwoValue LOVPatientPressure;


struct FrameHistoAno FHistoAno;
struct Label LRMaintAno;


struct FrameVoltControl FVoltControl;
struct Label LRMaintTension;
struct Label LOVBuzzSec;
struct Label LBackupBuzzer;
struct Label LBatteryMenu;
struct Label LRMaintBattery;

struct LabelOneValue LOVBuzzerVoltage;
struct LabelOneValue LOVBuzz;
struct LabelOneValue LOVTempBat;


struct FrameBatteryMenu FBatteryMenu;


struct FrameVentilation FVentilation;
struct LabelStringTwoItems LSTVChgtModeV;
struct LabelStringTwoItems LSTVSoupir;

struct LabelMode LModeVent;

struct LabelOneValue LOVVT;
struct LabelOneValue LOVPi;
struct LabelOneValue LOVPControl;
struct LabelOneValue LOVPSupport;
struct LabelOneValue LOVPi2;
struct LabelOneValue LOVFVaci;
struct LabelOneValue LOVFRMini;
struct LabelOneValue LOVIT;
struct LabelOneValue LOVInspTime;
struct LabelOneValue LOVPiMax;
struct LabelOneValue LOVCptSoupir;



struct LabelOneValue LOVFiO2;


struct LabelOneValueSign LOVSVtSoupir;
struct LabelOneValueSignFlag LOVSTrigE;
struct LabelOneValueFlag LOVTrigE;

struct Label LIE;

struct LabelOneValueThreeDefault LOVTDSupport;

struct LabelOneValueFlag LOVPe;
struct LabelOneValueFlag LOVApnee;
struct LabelOneValueFlag LOVVTCible;
struct LabelOneValueFlag LOVFSecu;
struct LabelStringNItems LOVTrigI;

struct RiseTime LOVPente;


struct Rampe LOVRampe;



struct Label LPreferences;


struct FrameAlarme FAlarme;

struct LabelStringTwoItems LOVChgtModeA;

struct Label LHistoAlarm;

struct LabelMode LModeAlarm;

struct LabelTabOneValueFlag LOVFrCMin;
struct LabelTabOneValueFlag LTOVFuiteLMin;


struct LabelTabTwoValueTwoLabels LOVPiMbar;

struct LabelTabTwoValueFlag LOVVteMl;
struct LabelTabTwoValueFlag LOVVtiMl;
struct LabelTabTwoValueFlag LTTVTiS;
struct LabelTabTwoValueFlag LTTVSpO2;
struct LabelTabTwoValueFlag LTTVFiO2;

struct LabelStringTwoItems LSTICalibQExp;
struct LabelStringTwoItems LSTICalibFiO2;


struct FrameHistoAlarme FHistoAlarme;
struct Label LRAlarmeA;
struct Label LCancelledAlarm;


struct FrameGraph FGraph;


struct FrameGraphConfig FGraphConfig;

struct LabelOneValueDefault LOVPMax;
struct LabelOneValueDefault LOVQMax;
struct LabelOneValueDefault LOVVtMax;
struct LabelOneValueDefault LOVTMax;

struct LabelStringTwoItems LVSVisu;
struct LabelStringTwoItems LVSRepresentation;

struct Label LRGraphPref;

UWORD16 SegmentNumber;
e_BOOL StartCalib;
e_BOOL StartVerif;

e_BOOL LongUpKeyDetected;
e_BOOL LongDownKeyDetected;
__Q2_10Controller11eSTEP_LEVEL StepLevel;

UWORD16 SaveBuzzerVoltParamId;
e_TYPE_OF_DB_TARGET SaveBuzzerVoltDbId;

struct MessageDialog BottomMessage;};
#line 40 "..\\..\\SRC\\HMI\\HMI_EventNode.hpp"
struct EventNode {
#line 47
UWORD16 Id;
UWORD16 LinkedMenuControlNodeId;

UWORD16 IdNodeOnUp;
UWORD16 IdNodeOnDown;
UWORD16 IdNodeOnTimeOut;
UWORD16 IdNodeOnValid;
UWORD16 IdNodeOnLongValid;
UWORD16 IdNodeOnMonitor;
#line 69
__Q2_10Controller11PController OnButtonUp;
__Q2_10Controller11PController OnButtonDown;
__Q2_10Controller11PController OnTimeOut;
__Q2_10Controller11PController OnButtonValid;
__Q2_10Controller11PController OnButtonMonitor;
__Q2_10Controller11PController OnButtonLongValid;}; extern void *__nw__FUi(unsigned);
#line 34 "..\\..\\SRC\\HMI\\HMI_EventNode.cpp"
extern struct EventNode *__ct__9EventNodeFv(struct EventNode *);
#line 180
extern void Init__9EventNodeFUiT1M10ControllerFv_vN53N61(struct EventNode *const, UWORD16, UWORD16, __Q2_10Controller11PController, __Q2_10Controller11PController, __Q2_10Controller11PController, __Q2_10Controller11PController, __Q2_10Controller11PController, __Q2_10Controller11PController, UWORD16, 
#line 180
UWORD16, UWORD16, UWORD16, UWORD16, UWORD16);
#line 82
extern void SetLinkedMenuControlNodeId__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 117
extern UWORD16 GetLinkedMenuControlNodeId__9EventNodeCFv(const struct EventNode *const);
#line 77
extern void SetId__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 72
extern UWORD16 GetId__9EventNodeCFv(const struct EventNode *const);
#line 87
extern void SetIdNodeOnUp__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 123
extern UWORD16 GetIdNodeOnUp__9EventNodeCFv(const struct EventNode *const);
#line 92
extern void SetIdNodeOnDown__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 128
extern UWORD16 GetIdNodeOnDown__9EventNodeCFv(const struct EventNode *const);
#line 97
extern void SetIdNodeOnTimeOut__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 133
extern UWORD16 GetIdNodeOnTimeOut__9EventNodeCFv(const struct EventNode *const);
#line 102
extern void SetIdNodeOnValid__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 138
extern UWORD16 GetIdNodeOnValid__9EventNodeCFv(const struct EventNode *const);
#line 107
extern void SetIdNodeOnLongValid__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 143
extern UWORD16 GetIdNodeOnLongValid__9EventNodeCFv(const struct EventNode *const);
#line 112
extern void SetIdNodeOnMonitor__9EventNodeFUi(struct EventNode *const, UWORD16);
#line 148
extern UWORD16 GetIdNodeOnMonitor__9EventNodeCFv(const struct EventNode *const);
#line 42
extern void SetOnButtonUp__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);




extern void SetOnButtonDown__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);




extern void SetOnTimeOut__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);




extern void SetOnButtonValid__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);




extern void SetOnButtonMonitor__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);




extern void SetOnButtonLongValid__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);
#line 15 "..\\LH_ST10F276.h"
 sfr ADCIC = 0xFF98;
 sfr ADCON = 0xFFA0;
 sfr ADDAT = 0xFEA0;
 sfr ADDAT2 = 0xF0A0;

 sfr ADEIC = 0xFF9A;
sbit ADST = 0xFFA0 ^ 7;
sbit ADBSY = 0xFFA0 ^ 8;
sbit ADWR = 0xFFA0 ^ 9;
sbit ADCIN = 0xFFA0 ^ 10;
sbit ADCRQ = 0xFFA0 ^ 11;
sbit ADCIE = 0xFF98 ^ 6;
sbit ADCIR = 0xFF98 ^ 7;
sbit ADEIE = 0xFF9A ^ 6;
sbit ADEIR = 0xFF9A ^ 7;


 sfr CC0 = 0xFE80;
 sfr CC0IC = 0xFF78;
 sfr CC1 = 0xFE82;
 sfr CC1IC = 0xFF7A;
 sfr CC2 = 0xFE84;
 sfr CC2IC = 0xFF7C;
 sfr CC3 = 0xFE86;
 sfr CC3IC = 0xFF7E;
 sfr CC4 = 0xFE88;
 sfr CC4IC = 0xFF80;
 sfr CC5 = 0xFE8A;
 sfr CC5IC = 0xFF82;
 sfr CC6 = 0xFE8C;
 sfr CC6IC = 0xFF84;
 sfr CC7 = 0xFE8E;
 sfr CC7IC = 0xFF86;
 sfr CC8 = 0xFE90;
 sfr CC8IC = 0xFF88;
 sfr CC9 = 0xFE92;
 sfr CC9IC = 0xFF8A;
 sfr CC10 = 0xFE94;
 sfr CC10IC = 0xFF8C;
 sfr CC11 = 0xFE96;
 sfr CC11IC = 0xFF8E;
 sfr CC12 = 0xFE98;
 sfr CC12IC = 0xFF90;
 sfr CC13 = 0xFE9A;
 sfr CC13IC = 0xFF92;
 sfr CC14 = 0xFE9C;
 sfr CC14IC = 0xFF94;
 sfr CC15 = 0xFE9E;
 sfr CC15IC = 0xFF96;
 sfr CC16 = 0xFE60;
 sfr CC16IC = 0xF160;
 sfr CC17 = 0xFE62;
 sfr CC17IC = 0xF162;
 sfr CC18 = 0xFE64;
 sfr CC18IC = 0xF164;
 sfr CC19 = 0xFE66;
 sfr CC19IC = 0xF166;
 sfr CC20 = 0xFE68;
 sfr CC20IC = 0xF168;
 sfr CC21 = 0xFE6A;
 sfr CC21IC = 0xF16A;
 sfr CC22 = 0xFE6C;
 sfr CC22IC = 0xF16C;
 sfr CC23 = 0xFE6E;
 sfr CC23IC = 0xF16E;
 sfr CC24 = 0xFE70;
 sfr CC24IC = 0xF170;
 sfr CC25 = 0xFE72;
 sfr CC25IC = 0xF172;
 sfr CC26 = 0xFE74;
 sfr CC26IC = 0xF174;
 sfr CC27 = 0xFE76;
 sfr CC27IC = 0xF176;
 sfr CC28 = 0xFE78;
 sfr CC28IC = 0xF178;
 sfr CC29 = 0xFE7A;
 sfr CC29IC = 0xF184;
 sfr CC30 = 0xFE7C;
 sfr CC30IC = 0xF18C;
 sfr CC31 = 0xFE7E;
 sfr CC31IC = 0xF194;
 sfr CCM0 = 0xFF52;
 sfr CCM1 = 0xFF54;
 sfr CCM2 = 0xFF56;
 sfr CCM3 = 0xFF58;
 sfr CCM4 = 0xFF22;
 sfr CCM5 = 0xFF24;
 sfr CCM6 = 0xFF26;
 sfr CCM7 = 0xFF28;
 sfr T0 = 0xFE50;
 sfr T01CON = 0xFF50;
 sfr T0IC = 0xFF9C;
 sfr T0REL = 0xFE54;
 sfr T1 = 0xFE52;
 sfr T1IC = 0xFF9E;
 sfr T1REL = 0xFE56;
 sfr T7 = 0xF050;
 sfr T78CON = 0xFF20;
 sfr T7IC = 0xF17A;
 sfr T7REL = 0xF054;
 sfr T8 = 0xF052;
 sfr T8IC = 0xF17C;
 sfr T8REL = 0xF056;
sbit CC0IR = 0xFF78 ^ 7;
sbit CC0IE = 0xFF78 ^ 6;
sbit CC1IR = 0xFF7A ^ 7;
sbit CC1IE = 0xFF7A ^ 6;
sbit CC2IR = 0xFF7C ^ 7;
sbit CC2IE = 0xFF7C ^ 6;
sbit CC3IR = 0xFF7E ^ 7;
sbit CC3IE = 0xFF7E ^ 6;
sbit CC4IR = 0xFF80 ^ 7;
sbit CC4IE = 0xFF80 ^ 6;
sbit CC5IR = 0xFF82 ^ 7;
sbit CC5IE = 0xFF82 ^ 6;
sbit CC6IR = 0xFF84 ^ 7;
sbit CC6IE = 0xFF84 ^ 6;
sbit CC7IR = 0xFF86 ^ 7;
sbit CC7IE = 0xFF86 ^ 6;
sbit CC8IR = 0xFF88 ^ 7;
sbit CC8IE = 0xFF88 ^ 6;
sbit CC9IR = 0xFF8A ^ 7;
sbit CC9IE = 0xFF8A ^ 6;
sbit CC10IR = 0xFF8C ^ 7;
sbit CC10IE = 0xFF8C ^ 6;
sbit CC11IR = 0xFF8E ^ 7;
sbit CC11IE = 0xFF8E ^ 6;
sbit CC12IR = 0xFF90 ^ 7;
sbit CC12IE = 0xFF90 ^ 6;
sbit CC13IR = 0xFF92 ^ 7;
sbit CC13IE = 0xFF92 ^ 6;
sbit CC14IR = 0xFF94 ^ 7;
sbit CC14IE = 0xFF94 ^ 6;
sbit CC15IR = 0xFF96 ^ 7;
sbit CC15IE = 0xFF96 ^ 6;
sbit CC16IR = 0xF160 ^ 7;
sbit CC16IE = 0xF160 ^ 6;
sbit CC17IR = 0xF162 ^ 7;
sbit CC17IE = 0xF162 ^ 6;
sbit CC18IR = 0xF164 ^ 7;
sbit CC18IE = 0xF164 ^ 6;
sbit CC19IR = 0xF166 ^ 7;
sbit CC19IE = 0xF166 ^ 6;
sbit CC20IR = 0xF168 ^ 7;
sbit CC20IE = 0xF168 ^ 6;
sbit CC21IR = 0xF16A ^ 7;
sbit CC21IE = 0xF16A ^ 6;
sbit CC22IR = 0xF16C ^ 7;
sbit CC22IE = 0xF16C ^ 6;
sbit CC23IR = 0xF16E ^ 7;
sbit CC23IE = 0xF16E ^ 6;
sbit CC24IR = 0xF170 ^ 7;
sbit CC24IE = 0xF170 ^ 6;
sbit CC25IR = 0xF172 ^ 7;
sbit CC25IE = 0xF172 ^ 6;
sbit CC26IR = 0xF174 ^ 7;
sbit CC26IE = 0xF174 ^ 6;
sbit CC27IR = 0xF176 ^ 7;
sbit CC27IE = 0xF176 ^ 6;
sbit CC28IR = 0xF178 ^ 7;
sbit CC28IE = 0xF178 ^ 6;
sbit CC29IR = 0xF184 ^ 7;
sbit CC29IE = 0xF184 ^ 6;
sbit CC30IR = 0xF18C ^ 7;
sbit CC30IE = 0xF18C ^ 6;
sbit CC31IR = 0xF194 ^ 7;
sbit CC31IE = 0xF194 ^ 6;
sbit ACC0 = 0xFF52 ^ 3;
sbit ACC1 = 0xFF52 ^ 7;
sbit ACC2 = 0xFF52 ^ 11;
sbit ACC3 = 0xFF52 ^ 15;
sbit ACC4 = 0xFF54 ^ 3;
sbit ACC5 = 0xFF54 ^ 7;
sbit ACC6 = 0xFF54 ^ 11;
sbit ACC7 = 0xFF54 ^ 15;
sbit ACC8 = 0xFF56 ^ 3;
sbit ACC9 = 0xFF56 ^ 7;
sbit ACC10 = 0xFF56 ^ 11;
sbit ACC11 = 0xFF56 ^ 15;
sbit ACC12 = 0xFF58 ^ 3;
sbit ACC13 = 0xFF58 ^ 7;
sbit ACC14 = 0xFF58 ^ 11;
sbit ACC15 = 0xFF58 ^ 15;
sbit ACC16 = 0xFF22 ^ 3;
sbit ACC17 = 0xFF22 ^ 7;
sbit ACC18 = 0xFF22 ^ 11;
sbit ACC19 = 0xFF22 ^ 15;
sbit ACC20 = 0xFF24 ^ 3;
sbit ACC21 = 0xFF24 ^ 7;
sbit ACC22 = 0xFF24 ^ 11;
sbit ACC23 = 0xFF24 ^ 15;
sbit ACC24 = 0xFF26 ^ 3;
sbit ACC25 = 0xFF26 ^ 7;
sbit ACC26 = 0xFF26 ^ 11;
sbit ACC27 = 0xFF26 ^ 15;
sbit ACC28 = 0xFF28 ^ 3;
sbit ACC29 = 0xFF28 ^ 7;
sbit ACC30 = 0xFF28 ^ 11;
sbit ACC31 = 0xFF28 ^ 15;
sbit T0IE = 0xFF9C ^ 6;
sbit T0IR = 0xFF9C ^ 7;
sbit T0M = 0xFF50 ^ 3;
sbit T0R = 0xFF50 ^ 6;
sbit T1IE = 0xFF9E ^ 6;
sbit T1IR = 0xFF9E ^ 7;
sbit T1M = 0xFF50 ^ 11;
sbit T1R = 0xFF50 ^ 14;
sbit T7IE = 0xF17A ^ 6;
sbit T7IR = 0xF17A ^ 7;
sbit T7M = 0xFF20 ^ 3;
sbit T7R = 0xFF20 ^ 6;
sbit T8IE = 0xF17C ^ 6;
sbit T8IR = 0xF17C ^ 7;
sbit T8M = 0xFF20 ^ 11;
sbit T8R = 0xFF20 ^ 14;


 sfr CP = 0xFE10;
 sfr CSP = 0xFE08;
 sfr DPP0 = 0xFE00;
 sfr DPP1 = 0xFE02;
 sfr DPP2 = 0xFE04;
 sfr DPP3 = 0xFE06;
 sfr MDC = 0xFF0E;
 sfr MDH = 0xFE0C;
 sfr MDL = 0xFE0E;
 sfr ONES = 0xFF1E;
 sfr PSW = 0xFF10;
 sfr SP = 0xFE12;
 sfr STKOV = 0xFE14;
 sfr STKUN = 0xFE16;
 sfr SYSCON = 0xFF12;
 sfr TFR = 0xFFAC;
 sfr ZEROS = 0xFF1C;
 sfr XPERCON = 0xF024;
 sfr BUSCON0 = 0xFF0C;
 sfr BUSCON1 = 0xFF14;
 sfr BUSCON2 = 0xFF16;
 sfr BUSCON3 = 0xFF18;
 sfr BUSCON4 = 0xFF1A;
 sfr ADDRSEL1 = 0xFE18;
 sfr ADDRSEL2 = 0xFE1A;
 sfr ADDRSEL3 = 0xFE1C;
 sfr ADDRSEL4 = 0xFE1E;

sbit XPERSHARE = 0xFF12 ^ 0;
sbit VISIBLE = 0xFF12 ^ 1;
sbit XPEN = 0xFF12 ^ 2;
sbit BDRSTEN = 0xFF12 ^ 3;
sbit OWDDIS = 0xFF12 ^ 4;
sbit CSCFG = 0xFF12 ^ 6;
sbit WRCFG = 0xFF12 ^ 7;
sbit CLKEN = 0xFF12 ^ 8;
sbit BYTDIS = 0xFF12 ^ 9;
sbit ROMEN = 0xFF12 ^ 10;
sbit SGTEN = 0xFF12 ^ 11;
sbit ROMS1 = 0xFF12 ^ 12;
sbit N = 0xFF10 ^ 0;
sbit C = 0xFF10 ^ 1;
sbit V = 0xFF10 ^ 2;
sbit Z = 0xFF10 ^ 3;
sbit E = 0xFF10 ^ 4;
sbit MULIP = 0xFF10 ^ 5;
sbit USR0 = 0xFF10 ^ 6;
sbit HLDEN = 0xFF10 ^ 10;
sbit IEN = 0xFF10 ^ 11;
sbit MDRIU = 0xFF0E ^ 4;
sbit RWDC0 = 0xFF0C ^ 4;
sbit MTTC0 = 0xFF0C ^ 5;
sbit ALECTL0 = 0xFF0C ^ 9;
sbit BUSACT0 = 0xFF0C ^ 10;
sbit RDYEN0 = 0xFF0C ^ 12;
sbit RWDC1 = 0xFF14 ^ 4;
sbit MTTC1 = 0xFF14 ^ 5;
sbit ALECTL1 = 0xFF14 ^ 9;
sbit BUSACT1 = 0xFF14 ^ 10;
sbit RDYEN1 = 0xFF14 ^ 12;
sbit CSREN1 = 0xFF14 ^ 14;
sbit CSWEN1 = 0xFF14 ^ 15;
sbit RWDC2 = 0xFF16 ^ 4;
sbit MTTC2 = 0xFF16 ^ 5;
sbit ALECTL2 = 0xFF16 ^ 9;
sbit BUSACT2 = 0xFF16 ^ 10;
sbit RDYEN2 = 0xFF16 ^ 12;
sbit CSREN2 = 0xFF16 ^ 14;
sbit CSWEN2 = 0xFF16 ^ 15;
sbit RWDC3 = 0xFF18 ^ 4;
sbit MTTC3 = 0xFF18 ^ 5;
sbit ALECTL3 = 0xFF18 ^ 9;
sbit BUSACT3 = 0xFF18 ^ 10;
sbit RDYEN3 = 0xFF18 ^ 12;
sbit CSREN3 = 0xFF18 ^ 14;
sbit CSWEN3 = 0xFF18 ^ 15;
sbit RWDC4 = 0xFF1A ^ 4;
sbit MTTC4 = 0xFF1A ^ 5;
sbit ALECTL4 = 0xFF1A ^ 9;
sbit BUSACT4 = 0xFF1A ^ 10;
sbit RDYEN4 = 0xFF1A ^ 12;
sbit CSREN4 = 0xFF1A ^ 14;
sbit CSWEN4 = 0xFF1A ^ 15;
sbit ILLBUS = 0xFFAC ^ 0;
sbit ILLINA = 0xFFAC ^ 1;
sbit ILLOPA = 0xFFAC ^ 2;
sbit PRTFLT = 0xFFAC ^ 3;
sbit UNDOPC = 0xFFAC ^ 7;
sbit STKUF = 0xFFAC ^ 13;
sbit STKOF = 0xFFAC ^ 14;
sbit NMI = 0xFFAC ^ 15;

 sfr EXICON = 0xF1C0;
 sfr EXISEL = 0xF1DA;



 sfr PECC0 = 0xFEC0;
 sfr PECC1 = 0xFEC2;
 sfr PECC2 = 0xFEC4;
 sfr PECC3 = 0xFEC6;
 sfr PECC4 = 0xFEC8;
 sfr PECC5 = 0xFECA;
 sfr PECC6 = 0xFECC;
 sfr PECC7 = 0xFECE;
#line 356
 sfr DP0L = 0xF100;
 sfr DP0H = 0xF102;
 sfr DP1L = 0xF104;
 sfr DP1H = 0xF106;
 sfr DP2 = 0xFFC2;
 sfr DP3 = 0xFFC6;
 sfr DP4 = 0xFFCA;
 sfr DP6 = 0xFFCE;
 sfr DP7 = 0xFFD2;
 sfr DP8 = 0xFFD6;

 sfr P0L = 0xFF00;
 sfr P0H = 0xFF02;
 sfr P1L = 0xFF04;
 sfr P1H = 0xFF06;
 sfr P2 = 0xFFC0;
 sfr P3 = 0xFFC4;
 sfr P4 = 0xFFC8;
 sfr P5 = 0xFFA2;
 sfr P6 = 0xFFCC;
 sfr P7 = 0xFFD0;
 sfr P8 = 0xFFD4;
 sfr P5DIDIS = 0xFFA4;
 sfr ODP2 = 0xF1C2;
 sfr ODP3 = 0xF1C6;
 sfr ODP4 = 0xF1CA;
 sfr ODP6 = 0xF1CE;
 sfr ODP7 = 0xF1D2;
 sfr ODP8 = 0xF1D6;
 sfr RP0H = 0xF108;
 sfr PICON = 0xF1C4;



 sfr S0BG = 0xFEB4;
 sfr S0CON = 0xFFB0;
 sfr S0EIC = 0xFF70;
 sfr S0RBUF = 0xFEB2;
 sfr S0RIC = 0xFF6E;
 sfr S0TBUF = 0xFEB0;
 sfr S0TIC = 0xFF6C;
 sfr S0TBIC = 0xF19C;
sbit S0STP = 0xFFB0 ^ 3;
sbit S0REN = 0xFFB0 ^ 4;
sbit S0PEN = 0xFFB0 ^ 5;
sbit S0FEN = 0xFFB0 ^ 6;
sbit S0OEN = 0xFFB0 ^ 7;
sbit S0PE = 0xFFB0 ^ 8;
sbit S0FE = 0xFFB0 ^ 9;
sbit S0OE = 0xFFB0 ^ 10;
sbit S0ODD = 0xFFB0 ^ 12;
sbit S0BRS = 0xFFB0 ^ 13;
sbit S0LB = 0xFFB0 ^ 14;
sbit S0R = 0xFFB0 ^ 15;
sbit S0TIE = 0xFF6C ^ 6;
sbit S0TIR = 0xFF6C ^ 7;
sbit S0TBIE = 0xF19C ^ 6;
sbit S0TBIR = 0xF19C ^ 7;
sbit S0RIE = 0xFF6E ^ 6;
sbit S0RIR = 0xFF6E ^ 7;
sbit S0EIE = 0xFF70 ^ 6;
sbit S0EIR = 0xFF70 ^ 7;

 sfr SSCTIC = 0xFF72;
 sfr SSCRIC = 0xFF74;
 sfr SSCEIC = 0xFF76;
 sfr SSCTB = 0xF0B0;
 sfr SSCRB = 0xF0B2;
 sfr SSCBR = 0xF0B4;
 sfr SSCCON = 0xFFB2;
sbit SSCHB = 0xFFB2 ^ 4;
sbit SSCPH = 0xFFB2 ^ 5;
sbit SSCPO = 0xFFB2 ^ 6;
sbit SSCTE = 0xFFB2 ^ 8;
sbit SSCTEN = 0xFFB2 ^ 8;
sbit SSCRE = 0xFFB2 ^ 9;
sbit SSCREN = 0xFFB2 ^ 9;
sbit SSCPE = 0xFFB2 ^ 10;
sbit SSCPEN = 0xFFB2 ^ 10;
sbit SSCBE = 0xFFB2 ^ 11;
sbit SSCBEN = 0xFFB2 ^ 11;
sbit SSCBSY = 0xFFB2 ^ 12;
sbit SSCMS = 0xFFB2 ^ 14;
sbit SSCEN = 0xFFB2 ^ 15;
sbit SSCTIR = 0xFF72 ^ 7;
sbit SSCTIE = 0xFF72 ^ 6;
sbit SSCRIR = 0xFF74 ^ 7;
sbit SSCRIE = 0xFF74 ^ 6;
sbit SSCEIR = 0xFF76 ^ 7;
sbit SSCEIE = 0xFF76 ^ 6;


 sfr CAPREL = 0xFE4A;
 sfr CRIC = 0xFF6A;
 sfr T2 = 0xFE40;
 sfr T2CON = 0xFF40;
 sfr T2IC = 0xFF60;
 sfr T3 = 0xFE42;
 sfr T3CON = 0xFF42;
 sfr T3IC = 0xFF62;
 sfr T4 = 0xFE44;
 sfr T4CON = 0xFF44;
 sfr T4IC = 0xFF64;
 sfr T5 = 0xFE46;
 sfr T5CON = 0xFF46;
 sfr T5IC = 0xFF66;
 sfr T6 = 0xFE48;
 sfr T6CON = 0xFF48;
 sfr T6IC = 0xFF68;
 sfr WDT = 0xFEAE;
 sfr WDTCON = 0xFFAE;
sbit CRIE = 0xFF6A ^ 6;
sbit CRIR = 0xFF6A ^ 7;
sbit T2R = 0xFF40 ^ 6;
sbit T2UD = 0xFF40 ^ 7;
sbit T2UDE = 0xFF40 ^ 8;
sbit T2IE = 0xFF60 ^ 6;
sbit T2IR = 0xFF60 ^ 7;
sbit T3R = 0xFF42 ^ 6;
sbit T3UD = 0xFF42 ^ 7;
sbit T3UDE = 0xFF42 ^ 8;
sbit T3OE = 0xFF42 ^ 9;
sbit T3OTL = 0xFF42 ^ 10;
sbit T3IE = 0xFF62 ^ 6;
sbit T3IR = 0xFF62 ^ 7;
sbit T4R = 0xFF44 ^ 6;
sbit T4UD = 0xFF44 ^ 7;
sbit T4UDE = 0xFF44 ^ 8;
sbit T4IE = 0xFF64 ^ 6;
sbit T4IR = 0xFF64 ^ 7;
sbit T5R = 0xFF46 ^ 6;
sbit T5UD = 0xFF46 ^ 7;
sbit T5UDE = 0xFF46 ^ 8;
sbit T5CLR = 0xFF46 ^ 14;
sbit T5SC = 0xFF46 ^ 15;
sbit T5IE = 0xFF66 ^ 6;
sbit T5IR = 0xFF66 ^ 7;
sbit T6R = 0xFF48 ^ 6;
sbit T6UD = 0xFF48 ^ 7;
sbit T6UDE = 0xFF48 ^ 8;
sbit T6OE = 0xFF48 ^ 9;
sbit T6OTL = 0xFF48 ^ 10;
sbit T6SR = 0xFF48 ^ 15;
sbit T6IE = 0xFF68 ^ 6;
sbit T6IR = 0xFF68 ^ 7;
sbit T0IN = 0xFFC4 ^ 0;
sbit T2IN = 0xFFC4 ^ 7;
sbit T3IN = 0xFFC4 ^ 6;
sbit T4IN = 0xFFC4 ^ 5;
sbit T5IN = 0xFFA2 ^ 13;
sbit T6IN = 0xFFA2 ^ 12;
sbit T2EUD = 0xFFA2 ^ 15;
sbit T3EUD = 0xFFC4 ^ 4;
sbit T4EUD = 0xFFA2 ^ 14;
sbit T5EUD = 0xFFA2 ^ 11;
sbit T6EUD = 0xFFA2 ^ 10;
sbit T3OUT = 0xFFC4 ^ 3;
sbit CAPIN = 0xFFC4 ^ 2;
sbit T6OUT = 0xFFC4 ^ 1;
sbit WDTIN = 0xFFAE ^ 0;
sbit WDTR = 0xFFAE ^ 1;
sbit SWR = 0xFFAE ^ 2;
sbit SHWR = 0xFFAE ^ 3;
sbit LHWR = 0xFFAE ^ 4;
sbit PONR = 0xFFAE ^ 5;
sbit WDTPRE = 0xFFAE ^ 7;


 sfr PWMCON0 = 0xFF30;
 sfr PWMCON1 = 0xFF32;
 sfr PW0 = 0xFE30;
 sfr PW1 = 0xFE32;
 sfr PW2 = 0xFE34;
 sfr PW3 = 0xFE36;
 sfr PWMIC = 0xF17E;
 sfr PT0 = 0xF030;
 sfr PT1 = 0xF032;
 sfr PT2 = 0xF034;
 sfr PT3 = 0xF036;
 sfr PP0 = 0xF038;
 sfr PP1 = 0xF03A;
 sfr PP2 = 0xF03C;
 sfr PP3 = 0xF03E;
sbit PTR0 = 0xFF30 ^ 0;
sbit PTR1 = 0xFF30 ^ 1;
sbit PTR2 = 0xFF30 ^ 2;
sbit PTR3 = 0xFF30 ^ 3;
sbit PTI0 = 0xFF30 ^ 4;
sbit PTI1 = 0xFF30 ^ 5;
sbit PTI2 = 0xFF30 ^ 6;
sbit PTI3 = 0xFF30 ^ 7;
sbit PIE0 = 0xFF30 ^ 8;
sbit PIE1 = 0xFF30 ^ 9;
sbit PIE2 = 0xFF30 ^ 10;
sbit PIE3 = 0xFF30 ^ 11;
sbit PIR0 = 0xFF30 ^ 12;
sbit PIR1 = 0xFF30 ^ 13;
sbit PIR2 = 0xFF30 ^ 14;
sbit PIR3 = 0xFF30 ^ 15;
sbit PEN0 = 0xFF32 ^ 0;
sbit PEN1 = 0xFF32 ^ 1;
sbit PEN2 = 0xFF32 ^ 2;
sbit PEN3 = 0xFF32 ^ 3;
sbit PM0 = 0xFF32 ^ 4;
sbit PM1 = 0xFF32 ^ 5;
sbit PM2 = 0xFF32 ^ 6;
sbit PM3 = 0xFF32 ^ 7;
sbit PB01 = 0xFF32 ^ 12;
sbit PS2 = 0xFF32 ^ 14;
sbit PS3 = 0xFF32 ^ 15;
sbit PWMIR = 0xF17E ^ 7;
sbit PWMIE = 0xF17E ^ 6;


 sfr IDCHIP = 0xF07C;
 sfr IDMANUF = 0xF07E;
 sfr IDMEM = 0xF07A;
 sfr IDPROG = 0xF078;


 sfr IDX0 = 0xFF08;
 sfr IDX1 = 0xFF0A;
 sfr MAH = 0xFE5E;
 sfr MAL = 0xFE5C;
 sfr MCW = 0xFFDC;
 sfr MRW = 0xFFDA;
 sfr MSW = 0xFFDE;
 sfr QR0 = 0xF004;
 sfr QR1 = 0xF006;
 sfr QX0 = 0xF000;
 sfr QX1 = 0xF002;

sbit MS = 0xFFDC ^ 9;
sbit MP = 0xFFDC ^ 10;
sbit CW = 0xFFDC ^ 11;
sbit VM = 0xFFDC ^ 12;
sbit EM = 0xFFDC ^ 13;
sbit LM = 0xFFDC ^ 14;
sbit MIE = 0xFFDC ^ 15;

sbit MIR = 0xFFDE ^ 15;
sbit MSL = 0xFFDE ^ 13;
sbit ME = 0xFFDE ^ 12;
sbit MSV = 0xFFDE ^ 11;
sbit MC = 0xFFDE ^ 10;
sbit MZ = 0xFFDE ^ 9;
sbit MN = 0xFFDE ^ 8;




 sfr XP0IC = 0xF186;
 sfr XP1IC = 0xF18E;
 sfr XP2IC = 0xF196;
 sfr XP3IC = 0xF19E;
sbit XP0IR = 0xF186 ^ 7;
sbit XP0IE = 0xF186 ^ 6;
sbit XP1IR = 0xF18E ^ 7;
sbit XP1IE = 0xF18E ^ 6;
sbit XP2IR = 0xF196 ^ 7;
sbit XP2IE = 0xF196 ^ 6;
sbit XP3IR = 0xF19E ^ 7;
sbit XP3IE = 0xF19E ^ 6;



 sfr EMUCON = 0xFE0A;
#line 53 "..\\..\\SRC\\GENERAL\\io_declare.h"
 sfr BLOWER_CMD = 0xFE30;
sbit CONS_VIT = 0xFFD0 ^ 0;
sbit DEF_TURB = 0xFFC0 ^ 2;
sbit ENABLE_TURB = 0xFFC0 ^ 3;
sbit BRAKE_BLOWER = 0xFFC0 ^ 1;
sbit SPEED_BLOWER_PIN = 0xFFC0 ^ 0;




 sfr VALVE_CMD = 0xFE32;
sbit CD_VALVE = 0xFFD0 ^ 1;




 sfr VANNE_O2_CMD = 0xFE34;
sbit CD_VANNE_FIO2 = 0xFFD0 ^ 2;




 sfr PWM_BUZ = 0xFE36;
 sfr FREQ_BUZ = 0xF03E;




sbit ALIM_FAILURE_3_3V = 0xFFC0 ^ 5;
sbit ALIM_FAILURE_5VREF = 0xFFC0 ^ 6;
sbit ALIM_FAILURE_10VREF = 0xFFC0 ^ 7;




sbit USB_BUSY = 0xFFC0 ^ 10;
sbit RESET_USB = 0xFFC4 ^ 5;




sbit ALARM_REMOTE_STATE = 0xFFC0 ^ 12;
sbit RAPPEL_ALARM = 0xFFC0 ^ 14;




sbit WDOG = 0xFFC0 ^ 4;




sbit ARRET_INVOLONTAIRE = 0xFFC0 ^ 13;




sbit BUSY_MEM1 = 0xFFC0 ^ 8;
sbit BUSY_MEM2 = 0xFFC0 ^ 9;
sbit CMD_ME1 = 0xFFC0 ^ 15;
sbit ALE_ME1 = 0xFFC4 ^ 15;




sbit BHE = 0xFFC4 ^ 12;




sbit RF = 0xFFC4 ^ 7;
sbit IRQ_UART = 0xFFD4 ^ 5;




sbit TX_UART_ST = 0xFFC4 ^ 10;
sbit RX_UART_ST = 0xFFC4 ^ 11;
#line 136
sbit MRST_SPI_ALIM = 0xFFCC ^ 7;
sbit MTSR_SPI_ALIM = 0xFFCC ^ 6;
sbit CLK_SPI_ALIM = 0xFFCC ^ 5;

sbit MRST_SPI_CPU = 0xFFC4 ^ 8;
sbit MTSR_SPI_CPU = 0xFFC4 ^ 9;
sbit SCLK_SPI_CPU = 0xFFC4 ^ 13;
#line 155
sbit JUMPER_JP8 = 0xFFD4 ^ 2;
sbit JUMPER_JP7 = 0xFFD4 ^ 3;




sbit SEC_BUZ = 0xFFD0 ^ 5;




sbit MASTERBUSY = 0xFFC0 ^ 11;
#line 172
sbit INHIB_DETECTED = 0xFFC4 ^ 6;
#line 182
sbit LED_ALARME_ROUGE = 0xFFD0 ^ 7;
sbit LED_ALARME_ORANGE = 0xFFD0 ^ 6;

sbit AC_SELECT = 0xFFD4 ^ 0;
sbit DC_SELECT = 0xFFD4 ^ 1;
#line 34 "..\\..\\SRC\\HMI\\HMI_EventNode.cpp"
struct EventNode *__ct__9EventNodeFv( struct EventNode *this)
{  if ((this != ((struct EventNode *)0)) || ((this = ((struct EventNode *)(__nw__FUi(40U)))) != ((struct EventNode *)0))) { } return this;

}
#line 180
void Init__9EventNodeFUiT1M10ControllerFv_vN53N61( struct EventNode *const this,  UWORD16 _Id, 
UWORD16 _LinkedMenuControlNodeId, 
__Q2_10Controller11PController _OnButtonUp, 
__Q2_10Controller11PController _OnButtonDown, 
__Q2_10Controller11PController _OnTimeOut, 
__Q2_10Controller11PController _OnButtonValid, 
__Q2_10Controller11PController _OnButtonMonitor, 
__Q2_10Controller11PController _OnButtonLongValid, 
UWORD16 _IdNodeOnUp, 
UWORD16 _IdNodeOnDown, 
UWORD16 _IdNodeOnTimeOut, 
UWORD16 _IdNodeOnValid, 
UWORD16 _IdNodeOnMonitor, 
UWORD16 _IdNodeOnLongValid)
{
SetOnButtonUp__9EventNodeFM10ControllerFv_v(this, _OnButtonUp);
SetOnButtonDown__9EventNodeFM10ControllerFv_v(this, _OnButtonDown);
SetOnTimeOut__9EventNodeFM10ControllerFv_v(this, _OnTimeOut);
SetOnButtonValid__9EventNodeFM10ControllerFv_v(this, _OnButtonValid);
SetOnButtonMonitor__9EventNodeFM10ControllerFv_v(this, _OnButtonMonitor);
SetOnButtonLongValid__9EventNodeFM10ControllerFv_v(this, _OnButtonLongValid);
SetId__9EventNodeFUi(this, _Id);
SetLinkedMenuControlNodeId__9EventNodeFUi(this, _LinkedMenuControlNodeId);
SetIdNodeOnUp__9EventNodeFUi(this, _IdNodeOnUp);
SetIdNodeOnDown__9EventNodeFUi(this, _IdNodeOnDown);
SetIdNodeOnTimeOut__9EventNodeFUi(this, _IdNodeOnTimeOut);
SetIdNodeOnValid__9EventNodeFUi(this, _IdNodeOnValid);
SetIdNodeOnLongValid__9EventNodeFUi(this, _IdNodeOnLongValid);
SetIdNodeOnMonitor__9EventNodeFUi(this, _IdNodeOnMonitor); return;
}
#line 82
void SetLinkedMenuControlNodeId__9EventNodeFUi( struct EventNode *const this,  UWORD16 _Id)
{
(this->LinkedMenuControlNodeId) = _Id; return;
}
#line 117
UWORD16 GetLinkedMenuControlNodeId__9EventNodeCFv( const struct EventNode *const this)
{
return (this->LinkedMenuControlNodeId);
}
#line 77
void SetId__9EventNodeFUi( struct EventNode *const this,  UWORD16 _Id)
{
(this->Id) = _Id; return;
}
#line 72
UWORD16 GetId__9EventNodeCFv( const struct EventNode *const this)
{
return (this->Id);
}
#line 87
void SetIdNodeOnUp__9EventNodeFUi( struct EventNode *const this,  UWORD16 _IdNodeOnUp)
{
(this->IdNodeOnUp) = _IdNodeOnUp; return;
}
#line 123
UWORD16 GetIdNodeOnUp__9EventNodeCFv( const struct EventNode *const this)
{
return (this->IdNodeOnUp);
}
#line 92
void SetIdNodeOnDown__9EventNodeFUi( struct EventNode *const this,  UWORD16 _IdNodeOnDown)
{
(this->IdNodeOnDown) = _IdNodeOnDown; return;
}
#line 128
UWORD16 GetIdNodeOnDown__9EventNodeCFv( const struct EventNode *const this)
{
return (this->IdNodeOnDown);
}
#line 97
void SetIdNodeOnTimeOut__9EventNodeFUi( struct EventNode *const this,  UWORD16 _IdNodeOnTimeOut)
{
(this->IdNodeOnTimeOut) = _IdNodeOnTimeOut; return;
}
#line 133
UWORD16 GetIdNodeOnTimeOut__9EventNodeCFv( const struct EventNode *const this)
{
return (this->IdNodeOnTimeOut);
}
#line 102
void SetIdNodeOnValid__9EventNodeFUi( struct EventNode *const this,  UWORD16 _IdNodeOnValid)
{
(this->IdNodeOnValid) = _IdNodeOnValid; return;
}
#line 138
UWORD16 GetIdNodeOnValid__9EventNodeCFv( const struct EventNode *const this)
{
return (this->IdNodeOnValid);
}
#line 107
void SetIdNodeOnLongValid__9EventNodeFUi( struct EventNode *const this,  UWORD16 _IdNodeOnLongValid)
{
(this->IdNodeOnLongValid) = _IdNodeOnLongValid; return;
}
#line 143
UWORD16 GetIdNodeOnLongValid__9EventNodeCFv( const struct EventNode *const this)
{
return (this->IdNodeOnLongValid);
}
#line 112
void SetIdNodeOnMonitor__9EventNodeFUi( struct EventNode *const this,  UWORD16 _IdNodeOnMonitor)
{
(this->IdNodeOnMonitor) = _IdNodeOnMonitor; return;
}
#line 148
UWORD16 GetIdNodeOnMonitor__9EventNodeCFv( const struct EventNode *const this)
{
return (this->IdNodeOnMonitor);
}
#line 42
void SetOnButtonUp__9EventNodeFM10ControllerFv_v( struct EventNode *const this,  __Q2_10Controller11PController _OnButtonUp)
{
(this->OnButtonUp) = _OnButtonUp; return;
}

void SetOnButtonDown__9EventNodeFM10ControllerFv_v( struct EventNode *const this,  __Q2_10Controller11PController _OnButtonDown)
{
(this->OnButtonDown) = _OnButtonDown; return;
}

void SetOnTimeOut__9EventNodeFM10ControllerFv_v( struct EventNode *const this,  __Q2_10Controller11PController _OnTimeOut)
{
(this->OnTimeOut) = _OnTimeOut; return;
}

void SetOnButtonValid__9EventNodeFM10ControllerFv_v( struct EventNode *const this,  __Q2_10Controller11PController _OnButtonValid)
{
(this->OnButtonValid) = _OnButtonValid; return;
}

void SetOnButtonMonitor__9EventNodeFM10ControllerFv_v( struct EventNode *const this,  __Q2_10Controller11PController _OnButtonMonitor)
{
(this->OnButtonMonitor) = _OnButtonMonitor; return;
}

void SetOnButtonLongValid__9EventNodeFM10ControllerFv_v( struct EventNode *const this,  __Q2_10Controller11PController _OnButtonLongValid)
{
(this->OnButtonLongValid) = _OnButtonLongValid; return;
}
