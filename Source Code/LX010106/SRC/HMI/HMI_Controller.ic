// v_2.45.2, Mon Mar 30 17:40:22 2020
#line 1 "..\\..\\SRC\\HMI\\HMI_Controller.cpp"
struct __T50731308;
#line 37 "..\\..\\SRC\\GENERAL\\enum.h"
enum e_SYMBOL {
LOGO_LEGENDAIR,
KEY_WHITE,
BAT,
BLACK_SQUARES,
FREE_SQUARE,
KEY,
LOS,
BLACK_LOS,
LESS_OR_MORE,
RAMPE1,
RAMPE2,
RISETIME1,
RISETIME2,
RISETIME3,
RISETIME4,
TRIGGER,
TRIGGERINV,
VENTIL,
LOCKS,
PAUSE,
VALVE_BLACK,
VALVE_WHITE,
CADRE_WHITE_BG,
CADRE_WHITE_HD,
CADRE_BLACK_BG,
CADRE_BLACK_HD,
TRIANGLE_BLACK,
TRIANGLE_WHITE,
FLECHE_GRAPH_HAUT,
FLECHE_GRAPH_DROITE,
CADRE_WHITE_HG,
CADRE_WHITE_BD,
CADRE_BLACK_HG,
CADRE_BLACK_BD,
BAT_INV,
CADRE_BLACK_BGw,
CADRE_BLACK_BDw,
CADRE_BLACK_HGw,
CADRE_BLACK_HDw,
CADRE_WHITE_HGw,
CADRE_WHITE_HDw,
CADRE_WHITE_BDw,
CADRE_WHITE_BGw,
BELL_BLACK,
ALARM_TRIANGLE_BLACK,
EQUAL,
HEART,
CADRE_WHITE_ALARM_HGw,
CADRE_WHITE_ALARM_HDw,
CADRE_WHITE_ALARM_BDw,
CADRE_WHITE_ALARM_BGw,
HEART_INVERSE_VIDEO,
ALARM_TRIANGLE_BLACK_DOT,
RAMPE3,
LOGO_M2,
LOGO_XL2,
LOGO_S2,
LOGO_XL2_US,


CHART_VERSION,
TRADEMARK,
COMPANY,
WHITE_SQUARE,
WHITE_LOCK,
NO};
#line 112
enum e_HMI_LANG {
HMI_LANG_CHINESE,
HMI_LANG_DANISH,
HMI_LANG_GERMAN,
HMI_LANG_ENGLISH,
HMI_LANG_ENGLISH_US,
HMI_LANG_SPANISH,
HMI_LANG_FRENCH,
HMI_LANG_GREEK,
HMI_LANG_ITALIAN,
HMI_LANG_JAPANESE,
HMI_LANG_KOREAN,
HMI_LANG_DUTCH,
HMI_LANG_NORWISH,
HMI_LANG_POLISH,
HMI_LANG_PORTUGUESE,
HMI_LANG_RUSSIAN,
HMI_LANG_FINNISH,
HMI_LANG_SWEDISH,
HMI_LANG_TURKISH};
#line 137
enum e_TI {
TIMIN,
TIMAX,
end_of_e_TI};



enum e_ActiveModeState {
ACTIVATED,

EXHALATION,
INSPIRATION,

PSV_EXHALATION,
PSV_INSPIRATION,
CC_EXHALATION,
CC_INSPIRATION,

SIMV_VSIMV_EXHALATION,
SIMV_CAV_INSPIRATION,
SIMV_PSV_INSPIRATION,
SIMV_CV_EXHALATION,
SIMV_CV_INSPIRATION,
SIMV_VSIMV_EXHALATION_APNEA,
SIMV_CV_INSPIRATION_APNEA,

SIMV_PSIMV_EXHALATION,
SIMV_CAP_INSPIRATION,
SIMV_CP_EXHALATION,
SIMV_CP_INSPIRATION,
SIMV_PSIMV_EXHALATION_APNEA,
SIMV_CP_INSPIRATION_APNEA,

CPAP_EXHALATION,
CPAP_INSPIRATION};




enum e_DB_ALARM_LEVEL_PRIORITY {



TEC,



WP,



VLP,



LP,



MPR,



HP,



VHP,



UA,



IA};




enum e_ALARM_ERROR {
NO_ERR_AL,
ERR_AL_DISCONNECTION,
ERR_AL_HIGH_PRESSURE,
ERR_AL_APNEA,
ERR_AL_HIGH_VTI,
ERR_AL_LOW_VTI,
ERR_AL_LOW_VTE,
ERR_AL_HIGH_VTE,
ERR_AL_HIGH_VM,
ERR_AL_LOW_VM,
ERR_AL_LOW_RATE,
ERR_AL_HIGH_RATE,
ERR_AL_POWER_SUPPLY_LOSS,
ERR_AL_AC_POWER_FAIL,
ERR_AL_DC_POWER_FAIL,
ERR_AL_CHECK_SUPPLY,
ERR_AL_PERIODICAL_SIGNAL,
ERR_AL_LOW_BATTERY,
ERR_AL_END_OF_BATTERY,
ERR_AL_CHECK_BATTERY,
ERR_AL_NO_BATTERY,
ERR_AL_CHECK_BUZZER,
ERR_AL_BUZZER_BATTERY_LOW,
ERR_AL_BUZZER_BATTERY_FAILURE,
ERR_AL_BUZZER_BATTERY_CHARGE_FAILURE,
ERR_AL_TECHNICAL_PROBLEM,
ERR_AL_EEPROM_OUT_OF_RANGE,
ERR_AL_EEPROM_LOOSING_PARAM,
ERR_AL_NEW_VERSION,
ERR_AL_ERROR_VERSION,
ERR_AL_REVERSED_IE,
ERR_AL_CHECK_PRESSURE,
ERR_AL_CHECK_PROXIMAL,
ERR_AL_PROXI_DISCONNECTION,
ERR_AL_NO_PROXIMAL,
ERR_AL_NO_VALVE_DETECTION,
ERR_AL_CHECK_VALVE,
ERR_AL_CHECK_VOLUME,
ERR_AL_VALVE_LEAKAGE,
ERR_AL_CHECK_REMOTE_ALARM,
ERR_AL_UNKNOW_BATTERY,
ERR_AL_CHECK_BATTERY_CHARGE,
ERR_AL_COOLING_FAN,
ERR_AL_AMBIENT_TEMP,
ERR_AL_BAT_TEMP,
ERR_AL_FAILURE_24V,
ERR_AL_SUPPLY_MEASURE,
ERR_AL_TURBINE_OVERHEAT,
ERR_AL_OCCLUSION,
ERR_AL_CPU_REFERENCE,
ERR_AL_CONTROLLED_CYCLES,
ERR_AL_CHECK_VALVE_PRESSURE,
ERR_AL_CHECK_PIPE,
ERR_AL_LEAKAGE,
ERR_AL_CHECK_FIO2,
ERR_AL_LOW_FIO2,
ERR_AL_HIGH_FIO2,
ERR_AL_NO_FIO2_SENSOR,
ERR_AL_CHECK_O2_SUPPLY,
ERR_AL_MISSING_O2_SUPPLY,
ERR_AL_CHECK_O2,
ERR_AL_O2_LEAKAGE,
ERR_AL_BREATH_TIME_CYCLED,
ERR_AL_INSP_FLOW_FAILURE,
ERR_AL_LEAK_OCCLUSION,
ERR_AL_VOLUNTARY_STOP,
ERR_AL_NEEDED_FIO2_CALIB,
end_of_error_alarm_table};




enum e_DB_ALARMS_STATE {
ALARM_FALSE,
ALARM_DETECTED,
ALARM_TRUE,
ALARM_DISPLAYED,
ALARM_CANCELED,
end_of_alarms_state_table};




enum e_DB_ALARMS_INDICATION_STATE {
ALARM_FALSE_STATE,
ALARM_DETECTED_STATE,
ALARM_INHIBITED_STATE,
end_of_alarms_indication_state_table};
#line 311
enum e_DB_VERSION {
VERSION_NUMBER_0,
VERSION_NUMBER_1,
VERSION_NUMBER_2,
VERSION_NUMBER_3,
SERIAL_NUMBER_1,
SERIAL_NUMBER_2,
SERIAL_NUMBER_3,
SERIAL_NUMBER_4,
SERIAL_NUMBER_5,
SERIAL_NUMBER_6,
end_of_db_version_table};




enum e_DB_Trend {
DB_TREND_VENTIL_HOUR,
DB_TREND_VENTIL_MIN,
DB_TREND_AVG_VTI,
DB_TREND_AVG_VTE,
DB_TREND_AVG_VM,
DB_TREND_AVG_FR,
DB_TREND_LEAK_MODE,
DB_TREND_AVG_LEAK,
DB_TREND_AVG_PI,
DB_TREND_IA,
DB_TREND_APNEA,
DB_TREND_PERCENT_CONTROLLED,
DB_TREND_PERCENT_TRIGGERED,
DB_TREND_SAVE_RTC_DAY,
DB_TREND_SAVE_RTC_MONTH,
DB_TREND_SAVE_RTC_YEAR,
DB_TREND_SAVE_PC_HOUR,
DB_TREND_SAVE_PC_MIN,
DB_TREND_NB_APNEA,
DB_TREND_APNEA_TIME,
DB_TREND_NB_CYCLE_COUNTER_MSB,
DB_TREND_NB_CYCLE_COUNTER_LSB,
DB_TREND_NB_CYCLE_TRIGERRED_MSB,
DB_TREND_NB_CYCLE_TRIGERRED_LSB,
DB_TREND_NB_CYCLE_CONTROLLED_MSB,
DB_TREND_NB_CYCLE_CONTROLLED_LSB,
DB_TREND_VENTIL_REPORT_UPD,
DB_TREND_IHM_VENTIL_HOUR,
DB_TREND_IHM_VENTIL_MIN,
DB_TREND_IHM_AVG_VTI,
DB_TREND_IHM_AVG_VTE,
DB_TREND_IHM_AVG_VM,
DB_TREND_IHM_AVG_FR,
DB_TREND_IHM_LEAK_MODE,
DB_TREND_IHM_AVG_LEAK,
DB_TREND_IHM_AVG_PI,
DB_TREND_IHM_IA,
DB_TREND_IHM_APNEA,
DB_TREND_IHM_PERCENT_CONTROLLED,
DB_TREND_IHM_PERCENT_TRIGGERED,
DB_TREND_IHM_SAVE_RTC_DAY,
DB_TREND_IHM_SAVE_RTC_MONTH,
DB_TREND_IHM_SAVE_RTC_YEAR,
end_of_db_trend_table};




enum e_TYPE_OF_DB_TARGET {
ADJUST,
CONTROL,
COMPUTE,
VERSION,
CONFIG,
RTC,
ALARMS,
POWER_SUPPLY,
KEYBOARD,
USB,
TREND,
CURRENT,
REVISION,
end_of_type_of_db_target};




enum e_DATA_OPERATION {
READ,
WRITE,
DECREASE,
INCREASE,
MIN,
MAX,
STEP,
READ_INFO,
WRITE_INFO};




enum e_MODE_TYPES {
VOL,
PRES,
PSVT,
VSIMV,
PSIMV,
CPAP,
nb_of_mode};



enum e_TRIGGER_LEVELS {
TRIGGER_LEVEL_OFF,
TRIGGER_LEVEL_0P,
TRIGGER_LEVEL_1P,
TRIGGER_LEVEL_2,
TRIGGER_LEVEL_3,
TRIGGER_LEVEL_4,
TRIGGER_LEVEL_5,
nb_of_trigger_levels};



enum e_TEST_STATES {
TEST_STATE_NOT_RUN,
TEST_STATE_RUNNING,
TEST_STATE_ABORTED,
TEST_STATE_PASS,
TEST_STATE_FAIL,
nb_of_test_states};




enum e_VEN_SIMVCycle {
CAV_Cycle,
CV_Cycle,
PSV_Cycle,
CAP_Cycle,
CP_Cycle};




enum e_SupplyInfo {
NONE,
AC,
DC,
BATTERY};




enum e_RTC_OPERATION {
NO_REQUEST,
ADJUST_DATE,
ADJUST_HOUR};




enum e_BadEraseState {
ERASE_OK,
BAD_TOTAL_ERASE};




enum e_RampType {
RAMP_DECELERATED,
RAMP_RECTANGLE,
RAMP_SINUS,
nb_of_ramps};
#line 487
enum e_VEN_ControllerType {
NO_CONTROL,
CONTROL_SPEED,
CONTROL_PRESSURE,
CONTROL_PRESSURE_VALVE,
CONTROL_PRESSURE_MAINT,
CONTROL_FLOW,
CONTROL_FLOW_EXH,
CONTROL_FLOW_O2,
CONTROL_FLOW_O2_MANUEL,
CONTROL_PRESSURE_O2};



enum e_VEN_Controller_Phase {
VEN_EXH_PLAT,
VEN_INSP_RISE,
VEN_INSP_PLAT,
VEN_EXH_FALL};




enum e_CalibrationCommand {
NO_CALIB,
SEGMENT_1,
SEGMENT_2,
SEGMENT_3,
SEGMENT_4,
SEGMENT_5,
SEGMENT_6,
SEGMENT_7,
SEGMENT_8,
TEST_LIMITES_REQUEST,
TEST_LIMITES_OK,
TEST_LIMITES_FALSE,
AUTOCALIB_SEG_1,
AUTOCALIB_SEG_2,
AUTOCALIB_SEG_3,
AUTOCALIB_SEG_4,
AUTOCALIB_SEG_5,
AUTOCALIB_SEG_6,
AUTOCALIB_SEG_7,
AUTOCALIB_SEG_8,
END_AUTOCALIB};




enum e_CalibrationType {
SYS_PATIENT_PRESS_CALIB,
SYS_VALVE_PRESS_CALIB,
SYS_INSP_FLOW_CALIB,
SYS_EXH_FLOW_CALIB,
SYS_EXH_FLOW_VERIF,
SYS_FIO2_CALIB,
SYS_O2_FLOW_CALIB,
SYS_O2_PRESSURE_CALIB,
end_of_sys_calib};
#line 552
enum e_VentilState {
VEN_EXHALATION = 251,
VEN_INSPIRATION_CONTROLED,
VEN_INSPIRATION_TRIGGERED,
VEN_VENTIL_DISABLE};



enum e_InspDetectType {
CONTROLLED,
TRIGGERED,
NO_INSP};




enum e_SYS_KeyboardInput {
KEY_NO_KEYBOARD,
KEY_CODE_MONIT_AND_DOWN,
KEY_CODE_MONIT_AND_UP,
KEY_CODE_UP_AND_DOWN,
Mark_Begin_Simple_Touch,
KEY_CODE_UP,
KEY_CODE_DOWN,
KEY_CODE_VALID,
KEY_CODE_MONIT,
KEY_CODE_STARTSTOPVENTIL,
KEY_CODE_100_O2,
KEY_CODE_NAVIG,
Number_of_key};
#line 587
enum e_TIM_TABLE_ID {
KEY_LONGPUSH_KEY_NO_KEYBOARD,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_UP,
KEY_LONGPUSH_KEY_CODE_UP_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_UP,
KEY_LONGPUSH_KEY_CODE_DOWN,
KEY_LONGPUSH_KEY_CODE_VALID,
KEY_LONGPUSH_KEY_CODE_MONIT,
KEY_LONGPUSH_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_longpush_decnt,
KEY_AUTOREPEAT_KEY_NO_KEYBOARD,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_UP,
KEY_AUTOREPEAT_KEY_CODE_UP_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_UP,
KEY_AUTOREPEAT_KEY_CODE_DOWN,
KEY_AUTOREPEAT_KEY_CODE_VALID,
KEY_AUTOREPEAT_KEY_CODE_MONIT,
KEY_AUTOREPEAT_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_autorepeat_decnt,
KEY_ANO_KEYB,
KEY_DELAY_BETWEEN_LONG_AUTOREPEAT,
KEY_DOUBLE_PULSE_TIME_OUT,
KEY_CONFIRM_VENT_STOP_TIMER,
VEN_TI_COUNT,
VEN_TE_COUNT,
VEN_SIMV_PERIOD_COUNT,
VEN_CONTROLLED_CYCLE_PERIOD_COUNT,
VEN_TIME_CALIB_FIO2,
VEN_VALVE_TIM,
VEN_VENTILATION_BIP,
VEN_END_COUNT0,
VEN_END_COUNT1,
VEN_END_COUNT2,
VEN_END_COUNT3,
VEN_END_COUNT4,
VEN_END_COUNT5,
SYS_TIME_OUT_SPEED,
SYS_1MINPAT,
SYS_TIME_OUT_CALIB,
SYS_TIME_AUTO_CALIB,
SYS_TIME_FAS_VALVE_CALIB,
SYS_TIME_SUPPLY_CHANGE,
SYS_TIME_DETECT_FIO2,
SYS_TIME_BACKLIGHT,
SYS_PRESSURE_CHOICE,
SYS_PRESSURE_CHOICE_INT,
SYS_PROXIMAL_TO_INTERNAL_SWITCH,
SYS_CHECK_PRESSURE,
SYS_CHECK_PROXIMAL,
SYS_VALVE_TIM,
SEC_PRESSURE_CHOICE,
SEC_LOW_PRESS,
SEC_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_DETECT,
SEC_CPAP_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_ALARM,
SEC_FLAG_HIGH_PRESSURE,
SEC_APNEA,
SEC_CHECK_PRESSURE,
SEC_CHECK_PROXIMAL,
SEC_NO_BATTERY_TIM,
SEC_CHECK_FIO2_TIM,
SEC_KEYBOARD_TIM,
SEC_SPEED_BLOW_TIM,
SEC_START_BIP_SOUND,
SEC_STOP_BIP_SOUND,
SEC_LOW_FIO2_TIM,
SEC_CPU_REFERENCE_FAILURE_TIM,
SEC_FLOW,
SEC_TIME_WAIT_STARTING,
SEC_HIGH_FIO2_TIM,
SEC_BAT_LOW_LEVEL,
SEC_HIGH_SPO2_TIM,
SEC_LOW_SPO2_TIM,
SEC_BAT_VERY_LOW_LEVEL,
SEC_BUZ_READ,
SEC_BATTERY_FAILURE_CO_BUZ,
SEC_DETECTION_BATTERY_FAILURE_CO_BUZ,
SEC_FAIL_AC_TIM,
SEC_FAIL_DC_TIM,
SEC_VALVE_CST,
SEC_PROXI_CST,
SEC_INT_CST,
SEC_CHECK_VALVE,
SEC_VALVE_PRESS,
SEC_INHIB_CHECK_FIO2,
SEC_INHIB_LOW_FIO2,
SEC_INHIB_HIGH_FIO2,
SEC_INHIB_CHECK_REMOTE,
SEC_CANCEL_HIGH_PRESSURE,
SEC_CHECK_SUPPLY,
SEC_PPC_APNEA,
SEC_PROX_DISC,
SEC_RAZ_CHECK_BAT,
SEC_CHECK_PRESS,
SEC_CHECK_PRESS2,
SEC_CHECK_PROXI,
SEC_CHECK_REMOTE,
SEC_BAT_P_S_TIM,
SEC_INHIB_BUZZER,
SEC_LOW_PRIORITY_BURST,
SEC_MEDIUM_PRIORITY_BURST,
SEC_HIGH_PRIORITY_BURST,
SEC_BUZZER_PULSE,
SEC_BUZZER_SILENCE,
SEC_BUZZER_SOUND_MAX,
SET_VALIDATION_BIP,
SEC_NO_PROXIMAL,
SET_HISTO_BIP,
SEC_BLOWER_OVERHEAT,
ACT_MIN_FLOW,
ACT_STOP_ADAPTATION,
WAIT_USB_BUSY,
USB_CONNECT_DISCONNECT_KEY,
USB_WAIT_READ_FIFO,
SPI_FRAME_TIME,
SPI_WAIT_DISPLAY_BATTERY_GAUGE,
TIM_COM_RECORDING_MONIT,
TIM_USB_RECORDING_MONIT,
SEC_CHECK_VALVE_PRESSURE,
SEC_LEAKAGE,
SEC_CHECK_O2_SUPPLY,
SEC_O2_LEAKAGE,
SEC_100_FIO2_TIM,
INT_MEASURE_BUZZER,
SEC_CANCEL_BATTERY_FAILURE_CO_BUZ,
ACT_BOOST_FREQ,
SEC_LEAK_OCCLUSION,
SEC_CPU_REF_FAILURE,
SEC_APNEA_FLAG,
SEC_OCCLUSION_TIMER,
end_of_table_cnt_decnt};



enum e_TIM_MINUTE_TABLE_ID {
TimerWelcomeEvent,
TimerHideLoupe,
TimerBlinkEvent,
TimeOutModifEvent,
TimerQuitHistoAlarme,
TimerQuitPreferences,
TimerQuitGraphConfig,
TimerRefresh,
TimerStopModifMode,
TimerAutoCalibTest,
TimerRefreshAlarm,
TimerSwapAlarm,
TimerTriggerOk,
TimerSpyPraram,
TimerHideAlarmMessage,
TimerHideStopVentMess,
TimerAddToBlinkEvent,
TimerWaitCalibVerif,
TimerHistoAlarmSeek,
TimerHistoAnoSeek,
TimerWaitCalibQExp,
TimerWaitCalibFiO2,
TimerUsbMessage,
TimerUsbProcessing,
Timer100PrCentO2,
TimerVenRecordingApnea,
TimerUsbRecordingDetailledHorodatage,
TimerUsbCommandTooLong,
TimerQuitVentilReport,
SEC_PERIODICAL_BIP,
TimerEndLongDownKey,
TimerEndLongUpKey,
TimerDoubleAlarm,
SEC_BATTERY_FAILURE_CHARGE_BUZ_READ,
SEC_LOW_BATTERY_BUZ_READ,
SEC_BATTERY_FAILURE_CC_BUZ,
TimerLeakTest,
end_of_minute_ihm_table_decnt,
end_of_minute_table_cnt_decnt};



enum e_TYPE_USE_TIMER {
COUNT,
DECOUNT};




enum e_DRV_RTC_ACCESS_STATE {
FREE_RTC,
READ_RTC,
WRITE_RTC,
ERROR_RTC};




enum e_DRV_RTC_REGISTER {
RTC_SECOND,
RTC_MINUTE,
RTC_HOUR,
RTC_DAY,
RTC_DATE,
RTC_MONTH,
RTC_YEAR,
RTC_SEC_ALARM1,
RTC_MIN_ALARM1,
RTC_HOURS_ALARM1,
RTC_DAY_ALARM1,
RTC_SEC_ALARM2,
RTC_MIN_ALARM2,
RTC_HOURS_ALARM2,
RTC_DAY_ALARM2,
RTC_CONTROL,
RTC_STATUS,
RTC_CHARGER,
RTC_BEGIN_RAM};



enum e_DRV_RTC_ERROR {
DRV_RTC_NO_ERROR,
DRV_RTC_TIME_OUT_TRANSMIT};



enum e_EEP_ACCESS_STATE {
READ_EEP,
WRITE_EEP,
FREE_EEP,
ERROR_EEP};



enum e_DRV_EVENT_STATE {
DRV_EVENT_FREE,
DRV_EVENT_ERASE,
DRV_EVENT_WRITE};
#line 829
enum e_DRV_EEP_WRITE_ERROR {
DRV_EEP_NO_ERROR,
DRV_EEP_TIME_OUT_WRITE,
DRV_EEP_TIME_OUT_TRANSMIT};



enum e_STATE_OF_DRIVE_EEP {
DRV_EEP_WRITE_PENDING,
DRV_EEP_FREE};
#line 844
enum e_DRV_DISPLAY_FUNCTION {
DRV_INIT,
DRV_LOAD_TABLE,
DRV_BRITHNESSAJUST,
DRV_NEGATIVE_CAR,
DRV_DISPLAY_PAGE,
DRV_STRING,
DRV_NUMBER,
DRV_SYMBOL,
DRV_PIXEL,
DRV_LINE,
DRV_BOX,
DRV_ERASE_ZONE,
DRV_ERASE_PAGE,
DRV_BACKLIHGHTADJUST};




enum e_TYPE_SOUND {
NO_SOUND,
BIP_SHORT_SOUND,
BIP_LONG_SOUND,
BIP_VERY_LONG_SOUND,
START_BIP_SOUND,
STOP_BIP_SOUND,
BATTERY_SOUND,
VERY_SLOW_SOUND,
SLOW_SOUND,
FAST_SOUND,
USB_CONNECT,
USB_DISCONNECT,
CONTINU_SOUND};




enum e_TYPE_TEST_BUZ {
NO_BUZ,
BUZ};




enum e_TYPE_BACKLIGHT_LEVEL {
SWITCH_OFF,
WEAK,
SWITCH_ON};




enum e_NUMBER_BUZ {
BUZ_CARD,
BUZ_SEC,
BUZ_ALL,
BUZ_VOLUME};




enum e_TYPE_BLINK {
NO_LED,
BLINK_LED,
CONTINU_LED};




enum e_VALIDATION_BIP {
NO_BIP,
BIP_SHORT,
BIP_LONG,
BIP_VERY_LONG,
BIP_START_VENTIL,
BIP_STOP_VENTIL,
BURST,
BIP_USB_CONNECT,
BIP_USB_DISCONNECT,
BIP_SHORT_VALID,
BIP_BATTERY_PERIODICAL};




enum e_VALIDATION_BIP_TYPE {
NO_CLOC_BIP,
CLOC,
BIP,
BIP_AND_CLOC};



enum e_SPI_ACCESS {
SPI_EEPROM,
SPI_RTC,
SPI_POWER};



enum e_SIMV {
PIM,
VIM,
PSV,
end_of_e_SIMV};




enum e_SIMV_PS_End {
PS_FLOW_END,
PS_HIGH_PRESS_END,
PS_TIMED_END,
end_of_e_SIMV_PS_End};




enum e_Month {
Month_start,
JANUARY,
FEBRUARY,
MARSH,
APRIL,
MAY,
JUNE,
JULY,
AUGUST,
SEPTEMBER,
OCTOBER,
NOVEMBER,
DECEMBER};



enum e_DataBaseType {
DB_RTC,
DB_CURRENT,
DB_CONFIG,
DB_CONTROL,
DB_COMPUTE,
DB_POWERSUPPLY,
DB_NULL};
#line 992
enum e_OUTPUT_NAME {
OUT_LED_VENTIL,
OUT_LED_O2,
FREE_1Q3,
CE_EEP,
CE_RTC1,
CE_RTC2,
CE_INT_PRES_SENS,
CE_PROX_PRES_SENS,
CE_VALVE_PRES_SENS,
CE_SPI_USB,
CE_SPI_PIC,
CE_FLOW_INSP_SENS,
CE_FLOW_EXP_SENS,
CE_SPI_PIC_IC44,
FREE_2Q7,
FREE_2Q8};
#line 1019
enum e_SPI_POWER_TRANSMIT {
SPI_POWER_TRANSMIT_START_FRAME_MSB,
SPI_POWER_TRANSMIT_START_FRAME_LSB,
SPI_POWER_TRANSMIT_VENTIL_AUTHORIZATION,
SPI_POWER_TRANSMIT_MAINTENANCE_MODE,
SPI_POWER_TRANSMIT_CALIBRATION_MODE,
SPI_POWER_TRANSMIT_CRC,
SPI_POWER_TRANSMIT_END_FRAME,
SPI_POWER_TRANSMIT_EndOfFrame};
#line 1033
enum e_SPI_POWER_RECEIVE {
SPI_POWER_RECEIVE_MSB_START_FRAME,
SPI_POWER_RECEIVE_LSB_START_FRAME,
SPI_POWER_RECEIVE_MSB_V_BAT_U16,
SPI_POWER_RECEIVE_LSB_V_BAT_U16,
SPI_POWER_RECEIVE_MSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_LSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_MSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_STATE_U16,
SPI_POWER_RECEIVE_LSB_POWER_TYPE_U16,
SPI_POWER_RECEIVE_MSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_AVALAIBLE_U16,
SPI_POWER_RECEIVE_LSB_PER_CENT_BAT_U16,
SPI_POWER_RECEIVE_LSB_NO_PRESENCE_BAT_U16,
SPI_POWER_RECEIVE_LSB_BAT_KO_U16,
SPI_POWER_RECEIVE_LSB_CHARGE_KO_U16,
SPI_POWER_RECEIVE_LSB_UNKNOWN_BATTERY_U16,
SPI_POWER_RECEIVE_MSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_BATTERY_END_U16,
SPI_POWER_RECEIVE_LSB_BATTERY_LOW_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_DAY_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_MONTH_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_YEAR_U16,
SPI_POWER_RECEIVE_LSB_BAT_TEMP_OVERFLOW,
SPI_POWER_RECEIVE_LSB_SUPPLY_MEASURE_FAILURE,
SPI_POWER_RECEIVE_LSB_FAILURE_24V_FLAG,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_OUTOFBOUNDS,
SPI_POWER_RECEIVE_LSB_COOLING_FAN_FAILURE_FLAG,
SPI_POWER_RECEIVE_LSB_FIRST_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_SECOND_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_THIRD_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_HOUR_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_SECOND_U16,
SPI_POWER_RECEIVE_LSB_BAT_AGEING_U16,
SPI_POWER_RECEIVE_LSB_BAT_SUPPLIER_U16,
SPI_POWER_RECEIVE_LSB_BAT_TYPICAL_CAPACITY_U16,
SPI_POWER_RECEIVE_CRC,
SPI_POWER_RECEIVE_END_FRAME,
SPI_POWER_RECEIVE_EndOfTable,
SPI_POWER_RECEIVE_BufferSize = 70};
#line 1082
enum e_DRV_SPI_POWER_ERROR {
DRV_SPI_POWER_NO_ERROR,
DRV_SPI_POWER_TIME_OUT_TRANSMIT,
DRV_SPI_POWER_NO_FRAME,
DRV_SPI_POWER_BAD_FRAME};
#line 1093
enum e_MODE_COM {
COM_VOL_A,
COM_PSVT,
COM_PRES_A,
COM_VSIMV,
COM_CPAP,
COM_VOL_C,
COM_PSV,
COM_PRES_C,
COM_VOL_US,
COM_PRES_US,
COM_PSV_US,
COM_VSIMV_US,
COM_PSIMV_US,
COM_CPAP_US,
COM_PSIMV,
End_of_Table_Mode_COM};




enum e_Monit_Buffer_Data_Type {
MONITORAGE,
HORODATAGE};
#line 1122
enum e_FrameUART1 {
DATA_FRAME0,
DATA_FRAME1,
DATA_FRAME2,
SIZE_FRAME_UART1};



enum e_Flash_Read_Status {
REQUEST,
RUNNING,
ENDED};



enum e_Cycling_Mode {
I_T,
I_E};




enum e_Alarm_Tone {
ORIGINAL,
COMPLIANT};
#line 1155
enum e_DIRECT_MONITORING {
MONIT_MSB_PRESSURE,
MONIT_LSB_PRESSURE,
MONIT_MSB_CORRECTED_FLOW_INSP,
MONIT_LSB_CORRECTED_FLOW_INSP,
MONIT_MSB_CORRECTED_FLOW_EXHAL,
MONIT_LSB_CORRECTED_FLOW_EXHAL,
MONIT_CORRECTED_VT_LEAK,
MONIT_SPO2,
MONIT_HR,
MONIT_ALARM_1,
MONIT_ALARM_2,
MONIT_ALARM_3,
MONIT_ALARM_4,
MONIT_ALARM_5,
MONIT_ALARM_6,
MONIT_ALARM_7,
MONIT_ALARM_8,
MONIT_ALARM_9,
MONIT_SYMBOL,
MONIT_VENTIL_MODE,
End_Of_Table_Direct_Monitoring};
#line 1185
enum e_DETAILLED_MONITORING {
DETAILLED_DATA_TYPE,

DETAILLED_DAY,
DETAILLED_VENTIL_STATE = 1,

DETAILLED_MONTH,
DETAILLED_PATIENT_PRESSURE_MSB = 2,

DETAILLED_YEAR,
DETAILLED_PATIENT_PRESSURE_LSB = 3,

DETAILLED_HOUR,
DETAILLED_INSP_FLOW_MSB = 4,

DETAILLED_MINUTE,
DETAILLED_INSP_FLOW_LSB = 5,

DETAILLED_SECOND,
DETAILLED_EXH_FLOW_MSB = 6,

DETAILLED_RESERVED1,
DETAILLED_EXH_FLOW_LSB = 7,

DETAILLED_RESERVED2,
DETAILLED_LEAK = 8,

End_Of_Table_Detailled_Monitoring};
#line 1222
enum e_TREND {
TREND_DAY,
TREND_MONTH,
TREND_YEAR,
TREND_HOUR,
TREND_MINUTE,
TREND_SECOND,
TREND_VENTIL_MODE,
TREND_VENTIL_TYPE,
TREND_MSB_P_MAX,
TREND_LSB_P_MAX,
TREND_MSB_AV_PEP,
TREND_LSB_AV_PEP,
TREND_MSB_LEAKAGE,
TREND_LSB_LEAKAGE,
TREND_MSB_AV_VOLUME,
TREND_LSB_AV_VOLUME,
TREND_IE_RATIO_NUMERATOR,
TREND_IE_RATIO_DENOMINATOR,
TREND_FREQUENCY,
TREND_MSB_INSPIRATED_VOLUME,
TREND_LSB_INSPIRATED_VOLUME,
TREND_MSB_EXHALED_VOLUME,
TREND_LSB_EXHALED_VOLUME,
TREND_HEART_RATE,
TREND_SPO2,
End_Of_Table_Trends};
#line 1257
enum e_EVENT_PARAMETERS {

EVENT_NB_ID,
EVENT_DAY_ID,
EVENT_MON_ID,
EVENT_YEA_ID,
EVENT_HOU_ID,
EVENT_MIN_ID,
EVENT_SCD_ID,
EVENT_CPTMACHHOURMSB_ID,
EVENT_CPTMACHHOURLSB_ID,
EVENT_MODE_ID,
EVENT_TYPE_ID,
EVENT_TRIGECONV_ID,
EVENT_PUNITCONV_ID,
EVENT_CYCL_ID,
EVENT_24VMSB_ID,
EVENT_24VLSB_ID,
EVENT_5VMSB_ID,
EVENT_5VLSB_ID,
EVENT_WTDMSB_ID,
EVENT_WTDLSB_ID,
EVENT_TINTMSB_ID,
EVENT_TINTLSB_ID,
EVENT_VBATMSB_ID,
EVENT_VBATLSB_ID,
EVENT_TBATMSB_ID,
EVENT_TBATLSB_ID,
EVENT_QBATMSB_ID,
EVENT_QBATLSB_ID,
EVENT_MBATMSB_ID,
EVENT_MBATLSB_ID,
EVENT_FIO2_ID,
EVENT_SPO2_ID,
EVENT_FREQCAR_ID,
EVENT_PMAXMSB_ID,
EVENT_PMAXLSB_ID,
EVENT_PEPMSB_ID,
EVENT_PEPLSB_ID,
EVENT_RAPIT_ID,
EVENT_RAPIEMSB_ID,
EVENT_RAPIELSB_ID,
EVENT_FREQ_ID,
EVENT_VTIMSB_ID,
EVENT_VTILSB_ID,
EVENT_VTEMSB_ID,
EVENT_VTELSB_ID,
EVENT_VMMSB_ID,
EVENT_VMLSB_ID,
EVENT_LEAK_ID,
EVENT_TIMSB_ID,
EVENT_TILSB_ID,
EVENT_TEMSB_ID,
EVENT_TELSB_ID,
EVENT_SUPPLY_TYPE,
EVENT_BATLEVEL_ID,
EVENT_SETRELATIVE_PRESSURE_ID,
EVENT_SETBAROMETRIC_COMP_ID,
EVENT_SETSOUND_LEVEL_ID,
EVENT_SETPEDIATRIC_CIRCUIT_ID,
EVENT_SETDISCONNECTION_DELAY_ID,
EVENT_SETAPNEA_ALARM_ID,
EVENT_SETSPO2MIN_ID,
EVENT_SETSPO2MAX_ID,
EVENT_SETFIO2_ID,
EVENT_SETFIO2MIN_ID,
EVENT_SETFIO2MAX_ID,


EVENT_SPECPAR_1_ID,
EVENT_SPECPAR_2_ID,
EVENT_SPECPAR_3_ID,
EVENT_SPECPAR_4_ID,
EVENT_SPECPAR_5_ID,
EVENT_SPECPAR_6_ID,
EVENT_SPECPAR_7_ID,
EVENT_SPECPAR_8_ID,
EVENT_SPECPAR_9_ID,
EVENT_SPECPAR_10_ID,
EVENT_SPECPAR_11_ID,
EVENT_SPECPAR_12_ID,
EVENT_SPECPAR_13_ID,
EVENT_SPECPAR_14_ID,
EVENT_SPECPAR_15_ID,
EVENT_SPECPAR_16_ID,
EVENT_SPECPAR_17_ID,
EVENT_SPECPAR_18_ID,
EVENT_SPECPAR_19_ID,
EVENT_SPECPAR_20_ID,
EVENT_SPECPAR_21_ID,
EVENT_SPECPAR_22_ID,
EVENT_SPECPAR_23_ID,
EVENT_SPECPAR_24_ID,
EVENT_SPECPAR_25_ID,
EVENT_SPECPAR_26_ID,
EVENT_SPECPAR_27_ID,
EVENT_SPECPAR_28_ID,
EVENT_SPECPAR_29_ID,
EVENT_SPECPAR_30_ID,
EVENT_SPECPAR_31_ID,
EVENT_STATE_ID,
EVENT_Last_Event_Parameter = 96,
End_Of_Table_Events};
#line 1369
enum e_Settings {

SETTINGS_COMPATIBILITY,
SETTINGS_MODE,
SETTINGS_CYCLING_MODE_LSB,
SETTINGS_CYCLING_MODE_MSB,
SETTINGS_PRESSURE_UNIT_LSB,
SETTINGS_PRESSURE_UNIT_MSB,
SETTINGS_LOW_SPO2_LSB,
SETTINGS_LOW_SPO2_MSB,
SETTINGS_SPO2_LOW_SELECT_LSB,
SETTINGS_SPO2_LOW_SELECT_MSB,
SETTINGS_HIGH_SPO2_LSB,
SETTINGS_HIGH_SPO2_MSB,
SETTINGS_SPO2_HIGH_SELECT_LSB,
SETTINGS_SPO2_HIGH_SELECT_MSB,
SETTINGS_VOL_CONTROL_LSB,
SETTINGS_VOL_CONTROL_MSB,
SETTINGS_P_CONTROL_LSB,
SETTINGS_P_CONTROL_MSB,
SETTINGS_P_SUPPORT_LSB,
SETTINGS_P_SUPPORT_MSB,
SETTINGS_PEEP_LSB,
SETTINGS_PEEP_MSB,
SETTINGS_PEEP_NO_SELECT_LSB,
SETTINGS_PEEP_NO_SELECT_MSB,
SETTINGS_RISE_TIME_LSB,
SETTINGS_RISE_TIME_MSB,
SETTINGS_RAMP_LSB,
SETTINGS_RAMP_MSB,
SETTINGS_I_T_LSB,
SETTINGS_I_T_MSB,
SETTINGS_IE_NUMERATOR_LSB,
SETTINGS_IE_NUMERATOR_MSB,
SETTINGS_IE_DENOMINATOR_LSB,
SETTINGS_IE_DENOMINATOR_MSB,
SETTINGS_CONTROL_R_LSB,
SETTINGS_CONTROL_R_MSB,
SETTINGS_BACKUP_R_LSB,
SETTINGS_BACKUP_R_MSB,
SETTINGS_BACKUP_R_NO_SELECT_LSB,
SETTINGS_BACKUP_R_NO_SELECT_MSB,
SETTINGS_APNEA_LSB,
SETTINGS_APNEA_MSB,
SETTINGS_AUTO_APNEA_SELECT_LSB,
SETTINGS_AUTO_APNEA_SELECT_MSB,
SETTINGS_INSP_SENS_LSB,
SETTINGS_INSP_SENS_MSB,
SETTINGS_INSP_SENS_NO_SELECT_LSB,
SETTINGS_INSP_SENS_NO_SELECT_MSB,
SETTINGS_EXH_SENS_LSB,
SETTINGS_EXH_SENS_MSB,
SETTINGS_AUTO_EXH_SENS_SELECT_LSB,
SETTINGS_AUTO_EXH_SENS_SELECT_MSB,
SETTINGS_TARGET_VT_LSB,
SETTINGS_TARGET_VT_MSB,
SETTINGS_TARGET_VT_SELECT_LSB,
SETTINGS_TARGET_VT_SELECT_MSB,
SETTINGS_MAX_PRESSURE_LSB,
SETTINGS_MAX_PRESSURE_MSB,
SETTINGS_LOW_VTI_LSB,
SETTINGS_LOW_VTI_MSB,
SETTINGS_LOW_VTI_NO_SELECT_LSB,
SETTINGS_LOW_VTI_NO_SELECT_MSB,
SETTINGS_HIGH_VTI_LSB,
SETTINGS_HIGH_VTI_MSB,
SETTINGS_HIGH_VTI_NO_SELECT_LSB,
SETTINGS_HIGH_VTI_NO_SELECT_MSB,
SETTINGS_LOW_VTE_LSB,
SETTINGS_LOW_VTE_MSB,
SETTINGS_LOW_VTE_NO_SELECT_LSB,
SETTINGS_LOW_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_VTE_LSB,
SETTINGS_HIGH_VTE_MSB,
SETTINGS_HIGH_VTE_NO_SELECT_LSB,
SETTINGS_HIGH_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_PIP_LSB,
SETTINGS_HIGH_PIP_MSB,
SETTINGS_LOW_PIP_LSB,
SETTINGS_LOW_PIP_MSB,
SETTINGS_HIGH_R_LSB,
SETTINGS_HIGH_R_MSB,
SETTINGS_HIGH_R_NO_SELECT_LSB,
SETTINGS_HIGH_R_NO_SELECT_MSB,
SETTINGS_HIGH_LEAK_LSB,
SETTINGS_HIGH_LEAK_MSB,
SETTINGS_HIGH_LEAK_SELECT_LSB,
SETTINGS_HIGH_LEAK_SELECT_MSB,
SETTINGS_TI_MIN_LSB,
SETTINGS_TI_MIN_MSB,
SETTINGS_TI_MIN_AUTO_SELECT_LSB,
SETTINGS_TI_MIN_AUTO_SELECT_MSB,
SETTINGS_TI_MAX_LSB,
SETTINGS_TI_MAX_MSB,
SETTINGS_TI_MAX_AUTO_SELECT_LSB,
SETTINGS_TI_MAX_AUTO_SELECT_MSB,
SETTINGS_DISCONNECTION_DELAY_LSB,
SETTINGS_DISCONNECTION_DELAY_MSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_LSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_MSB,
SETTINGS_SIGH_SELECT_LSB,
SETTINGS_SIGH_SELECT_MSB,
SETTINGS_SIGH_VT_COEF_LSB,
SETTINGS_SIGH_VT_COEF_MSB,
SETTINGS_SIGH_CPT_LSB,
SETTINGS_SIGH_CPT_MSB,
SETTINGS_APNEA_ALARM_ACTIVATION_LSB,
SETTINGS_APNEA_ALARM_ACTIVATION_MSB,
SETTINGS_PEDIATRIC_CIRCUIT_LSB,
SETTINGS_PEDIATRIC_CIRCUIT_MSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_LSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_MSB,
End_Of_Table_Settings};
#line 1492
enum e_USB_SerialNumberAndDate_Frame {

USB_SETTING_SERIAL_NUMBER_1,
USB_SETTING_SERIAL_NUMBER_2,
USB_SETTING_SERIAL_NUMBER_3,
USB_SETTING_SERIAL_NUMBER_4,
USB_SETTING_SERIAL_NUMBER_5,
USB_SETTING_SERIAL_NUMBER_6,
USB_SETTING_SERIAL_NUMBER_7,
USB_SETTING_SERIAL_NUMBER_8,
USB_SETTING_SERIAL_NUMBER_9,
USB_SETTING_SERIAL_NUMBER_10,
USB_SETTING_SERIAL_NUMBER_11,
USB_SETTING_SERIAL_NUMBER_12,

USB_SETTING_DATE_YEAR,
USB_SETTING_DATE_MONTH,
USB_SETTING_DATE_DAY,
USB_SETTING_DATE_HOUR,
USB_SETTING_DATE_MINUTE,
USB_SETTING_DATE_SECOND,
End_of_e_usb_frame_serialNumberAndDate};




enum e_USB_SerialNumber_Frame {

USB_SERIAL_NUMBER_1,
USB_SERIAL_NUMBER_2,
USB_SERIAL_NUMBER_3,
USB_SERIAL_NUMBER_4,
USB_SERIAL_NUMBER_5,
USB_SERIAL_NUMBER_6,
USB_SERIAL_NUMBER_7,
USB_SERIAL_NUMBER_8,
USB_SERIAL_NUMBER_9,
USB_SERIAL_NUMBER_10,
USB_SERIAL_NUMBER_11,
USB_SERIAL_NUMBER_12,
End_of_e_usb_frame_serialNumber};
#line 1538
enum e_USB_Settings_Frame {

USB_SETTINGS_DATA,
USB_SETTINGS_MSB_CRC_FRAME,
USB_SETTINGS_LSB_CRC_FRAME,
End_of_e_usb_frame_setting};




enum e_USB_Transfer_Apply {
Usb_FirstStep,
Usb_ReadCurrentDirectoryNext,
Usb_OpenFile,
Usb_CreateFile,
Usb_ReadFile,
Usb_WriteSerialNumberAndDateAtIndex,
Usb_WriteSerialNumberAndDateAtEndOfFile,
Usb_WriteSerialNumberAtEndOfFile,
Usb_WriteFileAtIndex,
Usb_WriteAtTheEndOfFile,
Usb_UpadateDateAndTime,
Usb_WriteCRC,
Usb_CloseFile,
End_of_e_usb_transfer_apply};
#line 1569
enum e_USB_File_Settings {
FileSettingNext,
FileSettingNotFound,
FileSettingFound,
end_of_e_usb_file_setting};
#line 1579
enum e_USB_File_Type {
SettingsType,
ContinuousRecordingType,
MonitoringTransferType,
TrendsTransferType,
EventsTransferType,
end_of_e_usb_file_type};




enum e_USB_Continuous_Frame {
USB_ID_FRAME,

USB_DATA,
USB_End_Of_Continuous_Frame};




enum e_NAND_FLASH_STATE {
NAND_FREE,
NAND_ERASE,
NAND_MONIT_WRITE,
NAND_MONIT_READ,
NAND_TREND_WRITE,
NAND_TREND_READ};
#line 95 "..\\..\\SRC\\HMI\\HMI_IhmType.hpp"
enum e_TYPE_OF_LED {
LED_ALARM_RED,
LED_ALARM_ORANGE,
LED_VENTIL,
LED_WHITE,
LED_AC,
LED_DC,
LED_BAT};



struct AlarmEvent;
#line 167
enum EventId {
ProgExhalFlowUsed,
ProgExhalFlowUnused,
ProgInspControlEvent,
ProgInspTrigEvent,
ProgExhEvent,
ProgHideBatEvent,
ProgStartVentilOk,
ProgStartVentilKo,
ProgShowBatEvent,
ProgInibAlarmOK,
ProgInibAlarmNOK,
ProgCancelAlarmOK,
ProgCancelAlarmNOK,
ProgRemoveHighPressureAlarm,
ProgValveMissing,
ProgValveDetected,
ProgBlocExpiMissing,
ProgBlocExpiDetected,
ProgSpo2SensorNoError,
ProgSpo2SensorError,
ProgFio2SensorOK,
ProgFio2SensorNOK,
ProgCheckSupplyNoError,
ProgCheckSupplyError,
ProgUsbKeyDetected,
ProgUsbKeyNotDetected,
ProgUsbErrorCodeReady,
ProgUsbNewModeDetected,
ProgStartMonitoring,
ProgSupplyBusFailure,
ProgSupplyBusOK};
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject;
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject;
#line 33 "..\\..\\SRC\\DATABASE\\Db_PowerSupply.h"
enum e_DB_POWERSUPPLY {
V_BAT_U16,
TEMP_BAT_S16,
BAT_CYCLES_U16,
BAT_STATE_U16,
POWER_TYPE_U16,
JAUGE_MINUTE_U16,
JAUGE_HOUR_DISPLAY_U16,
JAUGE_MINUTE_DISPLAY_U16,
JAUGE_AVALAIBLE_U16,
PER_CENT_BAT_U16,
NO_PRESENCE_BAT_U16,
BAT_KO_U16,
CHARGE_KO_U16,
UNKNOWN_BATTERY_U16,
AMBIENT_TEMP_S16,
BATTERY_END_U16,
BATTERY_LOW_U16,
FIRST_DATE_DAY_U16,
FIRST_DATE_MONTH_U16,
FIRST_DATE_YEAR_U16,
COOLING_FAN_FAILURE_FLAG_U16,
AMBIENT_TEMP_OUTOFBOUNDS_U16,
FAILURE_24V_FLAG_U16,
BAT_TEMP_OUTOFBOUNDS_U16,
SUPPLY_MEASURE_FAILURE_U16,
POWER_SUPPLY_VERSION_NUMBER_0,
POWER_SUPPLY_VERSION_NUMBER_1,
POWER_SUPPLY_VERSION_NUMBER_2,
SUPPLIER_U16,
CAPACITY_U16,
CAPACITY_THEORICAL_U16,
FIRST_DATE_HOUR_U16,
FIRST_DATE_MINUTE_U16,
FIRST_DATE_SECOND_U16,
AGING_U16,
end_of_db_powersupply_table};
#line 47 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
enum ePANIC_MODULE {
PANIC_MODULE_VENTIL,
PANIC_MODULE_ALARM,
PANIC_MODULE_GRAPH,
PANIC_MODULE_EVENT_NODE_VENTIL,
PANIC_MODULE_EVENT_NODE_ALARM,
PANIC_MODULE_EVENT_NODE_MAINT_CALIB,
PANIC_MODULE_FRAME_GRAPH,
PANIC_MODULE_UNKNOWN,
PANIC_MODULE_MAX};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField;
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField;
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox;
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField;
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog;
#line 42 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
enum DataType {
eValue,
eString,
eValueSign};


struct Loupe;
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label;
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField;
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSign.hpp"
struct LabelOneValueSign;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDbRT.hpp"
struct LabelOneValueDbRT;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignDefault.hpp"
struct LabelOneValueSignDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignFlag.hpp"
struct LabelOneValueSignFlag;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDefault.hpp"
struct LabelOneValueDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueThreeDefault.hpp"
struct LabelOneValueThreeDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFourDefault.hpp"
struct LabelOneValueFourDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFlag.hpp"
struct LabelOneValueFlag;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelOneValueTrig.hpp"
struct LabelOneValueTrig;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelProgressBar.hpp"
struct LabelProgressBar;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueLock.hpp"
struct LabelTwoValueLock;
#line 42 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValue.hpp"
struct LabelTabOneValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueDefault.hpp"
struct LabelTabOneValueDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueFlag.hpp"
struct LabelTabOneValueFlag;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValue.hpp"
struct LabelTabTwoValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueTwoLabels.hpp"
struct LabelTabTwoValueTwoLabels;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueDefault.hpp"
struct LabelTabTwoValueDefault;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueFlag.hpp"
struct LabelTabTwoValueFlag;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelValueString.hpp"
struct LabelValueString;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelStringTwoItems.hpp"
struct LabelStringTwoItems;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelStringNItems.hpp"
struct LabelStringNItems;
#line 33 "..\\..\\SRC\\HMI\\HMI_LabelLanguage.hpp"
struct LabelLanguage;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelMode.hpp"
struct LabelMode;
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelSymbol.hpp"
struct LabelSymbol;
#line 35 "..\\..\\SRC\\HMI\\HMI_Rampe.hpp"
struct Rampe;
#line 34 "..\\..\\SRC\\HMI\\HMI_RiseTime.hpp"
struct RiseTime;
#line 34 "..\\..\\SRC\\HMI\\HMI_AutoCalibValue.hpp"
struct AutoCalibValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibValue.hpp"
struct ManualCalibValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibTwoValue.hpp"
struct ManualCalibTwoValue;
#line 34 "..\\..\\SRC\\HMI\\HMI_VDate.hpp"
enum e_VDATE_FORMAT {
VDATE_EUR_FORMAT,
VDATE_US_FORMAT};
#line 43
struct VDate;
#line 34 "..\\..\\SRC\\HMI\\HMI_VTime.hpp"
enum e_VTIME_FORMAT {
VTIME_24H_FORMAT,
VTIME_12H_FORMAT};
#line 47
enum __Q2_5VTime8e_PERIOD { AM__5VTime, PM__5VTime};
#line 42
struct VTime;
#line 40 "..\\..\\SRC\\HMI\\HMI_BlinkTable.hpp"
struct BlinkTable;
#line 36 "..\\..\\SRC\\HMI\\HMI_RefreshTable.hpp"
struct RefreshTable;
#line 41 "..\\..\\SRC\\HMI\\HMI_ParameterSpy.hpp"
struct ParameterSpy;
#line 39 "..\\..\\SRC\\HMI\\HMI_VTimer.hpp"
struct VTimer;
#line 46 "..\\..\\SRC\\HMI\\HMI_AlarmTable.hpp"
struct AlarmTable;
#line 36 "..\\..\\SRC\\HMI\\HMI_AlarmManager.hpp"
enum eAMANAGER_DOUBLE { AMANAGER_DOUBLE_ACTIVE,
AMANAGER_DOUBLE_INACTIVE};




struct AlarmManager;
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm;
#line 45 "..\\..\\SRC\\HMI\\HMI_MonitoringObject.hpp"
struct MonitoringObject;
#line 231 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
struct tInfo;




enum e_OBJECT {
OBJECT_VENTIL_LOVPIP,
OBJECT_VENTIL_LOVVTI,
OBJECT_VENTIL_LOVVTE,
OBJECT_VENTIL_LOVVM,
OBJECT_VENTIL_LOVR,
OBJECT_VENTIL_LOVFUITE,
OBJECT_VENTIL_LOVFIO2,
OBJECT_VENTIL_LOVSPO2,
OBJECT_VENTIL_LTVIE,
OBJECT_VENTIL_LTVIT,
OBJECT_VENTIL_OBJECT_MAX,
OBJECT_ALARM_LOVPIP = 0,
OBJECT_ALARM_LOVVTI,
OBJECT_ALARM_LOVMAP,
OBJECT_ALARM_LOVPEEP,
OBJECT_ALARM_LTVIE,
OBJECT_ALARM_LOVIT,
OBJECT_ALARM_LOVR,
OBJECT_ALARM_LOVM,
OBJECT_ALARM_OBJECT_MAX,
OBJECT_GRAPH_MOFIO2 = 0,
OBJECT_GRAPH_MOSPO2,
OBJECT_GRAPH_MOPULSE,
OBJECT_GRAPH_MOTI,
OBJECT_GRAPH_MOTE,
OBJECT_GRAPH_MOIE,
OBJECT_GRAPH_MOIT,
OBJECT_GRAPH_MOFR,
OBJECT_GRAPH_MOVM,
OBJECT_GRAPH_MOVTE,
OBJECT_GRAPH_MOVTI,
OBJECT_GRAPH_MOPE,
OBJECT_GRAPH_MOPI,
OBJECT_GRAPH_MOFUITE,
OBJECT_GRAPH_OBJECT_MAX};
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelVersion.hpp"
struct LabelVersion;
#line 41 "..\\..\\SRC\\HMI\\HMI_FrameWelcome.hpp"
struct FrameWelcome;
#line 35 "..\\..\\SRC\\HMI\\HMI_FrameConfiguration.hpp"
struct FrameConfiguration;
#line 35 "..\\..\\SRC\\HMI\\HMI_FramePreference.hpp"
struct FramePreference;
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameCircuitCheck.hpp"
struct FrameCircuitCheck;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelSerial.hpp"
struct LabelSerial;
#line 42 "..\\..\\SRC\\HMI\\HMI_FrameMaintenance.hpp"
struct FrameMaintenance;
#line 34 "..\\..\\SRC\\HMI\\HMI_FrameHistoAno.hpp"
enum e_ANO_DATE_FORMAT {
ANO_EUR_FORMAT,
ANO_US_FORMAT};


enum e_ANO_TIME_FORMAT {
ANO_24H_FORMAT,
ANO_12H_FORMAT};


struct FrameHistoAno;
#line 36 "..\\..\\SRC\\HMI\\HMI_FrameVoltControl.hpp"
struct FrameVoltControl;
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueTrig.hpp"
struct LabelTwoValueTrig;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelAlarme.hpp"
struct LabelAlarme;
#line 34 "..\\..\\SRC\\HMI\\HMI_BarGraph.hpp"
struct BarGraph;
#line 46 "..\\..\\SRC\\HMI\\HMI_MessageList.hpp"
struct __Q2_11MessageList8TMessage;
#line 41
struct MessageList;
#line 37 "..\\..\\SRC\\HMI\\HMI_LabelAlarmeTwoLine.hpp"
struct LabelAlarmeTwoLine;
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject;
#line 53 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.hpp"
struct FrameVentilation;
#line 51 "..\\..\\SRC\\HMI\\HMI_GraphicTable.hpp"
struct tGraphTableConfig;
#line 59
struct GraphicTable;
#line 55 "..\\..\\SRC\\HMI\\HMI_FrameAlarme.hpp"
enum e_ALARM_DATE_FORMAT {
ALARM_EUR_FORMAT,
ALARM_US_FORMAT};


enum e_ALARM_TIME_FORMAT {
ALARM_24H_FORMAT,
ALARM_12H_FORMAT};



struct FrameAlarme;
#line 37 "..\\..\\SRC\\HMI\\HMI_FrameHistoAlarme.hpp"
struct FrameHistoAlarme;
#line 36 "..\\..\\SRC\\HMI\\HMI_MonitoringObjectTwoValue.hpp"
struct MonitoringObjectTwoValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphTitle.hpp"
struct GraphTitle;
#line 39 "..\\..\\SRC\\HMI\\HMI_DataBaseLink.hpp"
struct DataBaseLink;
#line 36 "..\\..\\SRC\\HMI\\HMI_Scale.hpp"
enum TOrientation { eHOR, eVERT};

enum TSide { eTOP, eBOTTOM};



struct Scale;
#line 39 "..\\..\\SRC\\HMI\\HMI_VPoint.hpp"
struct VPoint;
#line 39 "..\\..\\SRC\\HMI\\HMI_Pen.hpp"
struct Pen;
#line 38 "..\\..\\SRC\\HMI\\HMI_CurveData.hpp"
struct CurveData;
#line 41 "..\\..\\SRC\\HMI\\HMI_Graph.hpp"
enum TKind {
eLINE,
eBAR};
#line 49
struct Graph;
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphControl.hpp"
struct GraphControl;
#line 34 "..\\..\\SRC\\HMI\\HMI_PerformanceGraphControl.hpp"
struct PerformanceGraphControl;
#line 35 "..\\..\\SRC\\HMI\\HMI_WobGraphControl.hpp"
struct WobGraphControl;
#line 65 "..\\..\\SRC\\HMI\\HMI_FrameGraph.hpp"
struct FrameGraph;
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameGraphConfig.hpp"
struct FrameGraphConfig;
#line 40 "..\\..\\SRC\\HMI\\HMI_FrameBatteryMenu.hpp"
struct FrameBatteryMenu;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueCentered.hpp"
struct LabelTwoValueCentered;
#line 45 "..\\..\\SRC\\HMI\\HMI_FrameUSB.hpp"
struct FrameUSB;
#line 36 "..\\..\\SRC\\HMI\\HMI_TendanceTable.hpp"
struct TendanceTable;
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameTendance.hpp"
struct FrameTendance;
#line 42 "..\\..\\SRC\\HMI\\HMI_MessageDelayed.hpp"
struct __Q2_14MessageDelayed11FifoMessage;
#line 38
struct MessageDelayed;
#line 34 "..\\..\\SRC\\DATABASE\\DB_Config.h"
enum e_DB_CONFIG {
ADJUST_LANGUAGE_U16,
ADJUST_MODE_U16,
ADJUST_KEYLOCK_U16,
VENTIL_REQ_U16,
OFFSET_INSP_FLOW_1_U16,
OFFSET_INSP_FLOW_2_U16,
OFFSET_INSP_FLOW_3_U16,
OFFSET_INSP_FLOW_4_U16,
OFFSET_INSP_FLOW_5_U16,
OFFSET_INSP_FLOW_6_U16,
OFFSET_INSP_FLOW_7_U16,
OFFSET_INSP_FLOW_8_U16,
OFFSET_EXH_FLOW_1_U16,
OFFSET_EXH_FLOW_2_U16,
OFFSET_EXH_FLOW_3_U16,
OFFSET_EXH_FLOW_4_U16,
OFFSET_EXH_FLOW_5_U16,
OFFSET_EXH_FLOW_6_U16,
OFFSET_EXH_FLOW_7_U16,
OFFSET_EXH_FLOW_8_U16,
OFFSET_O2_FLOW_1,
OFFSET_O2_FLOW_2,
OFFSET_O2_FLOW_3,
OFFSET_O2_FLOW_4,
OFFSET_O2_FLOW_5,
OFFSET_O2_FLOW_6,
OFFSET_O2_FLOW_7,
OFFSET_PATIENT_PRESS_1_U16,
OFFSET_PATIENT_PRESS_2_U16,
OFFSET_PATIENT_PROX_PRESS_1_U16,
OFFSET_PATIENT_PROX_PRESS_2_U16,
OFFSET_PRESS_O2,
I_VALVE_REF_U16,
OFFSET_FAS_VALVE_1_U16,
OFFSET_FAS_VALVE_2_U16,
OFFSET_FAS_VALVE_3_U16,
OFFSET_FAS_VALVE_4_U16,
OFFSET_FAS_VALVE_5_U16,
OFFSET_FAS_VALVE_6_U16,
OFFSET_FAS_VALVE_7_U16,
OFFSET_FAS_VALVE_8_U16,
OFFSET_FAS_VALVE_9_U16,
OFFSET_VALVE_PRESS_U16,
OFFSET_VALVE_PRESS_2_U16,
OFFSET_FIO2,
ADJUST_BRIGHTNESS_U16,
ADJUST_BACKLIGHT_U16,

SAVED_PATIENT_COUNTER_HOUR_U16,

SAVED_PATIENT_COUNTER_MIN_U16,

SAVED_MACHINE_COUNTER_HOUR_U16,

SAVED_MACHINE_COUNTER_MIN_U16,

RETRIEVAL_EVENT_ADRESS_MSB_U16,

RETRIEVAL_EVENT_ADRESS_LSB_U16,

FLASH_MONIT_WRITE_BLOCK_U16,

FLASH_MONIT_WRITE_PAGE_U16,

FLASH_MONIT_WRITE_COLUMN_U16,

FLASH_TREND_WRITE_BLOCK_U16,

FLASH_TREND_WRITE_PAGE_U16,

FLASH_TREND_WRITE_COLUMN_U16,

FLASH_FIRST_PARTITION_FULL_U16,

FLASH_SECOND_PARTITION_FULL_U16,

SPEED_COM_U16,
RAZ_COUNTER_PAT_DATE_U16,
RAZ_COUNTER_PAT_MONTH_U16,
RAZ_COUNTER_PAT_YEAR_U16,
RAZ_COUNTER_PAT_HOUR_U16,
RAZ_COUNTER_PAT_MIN_U16,
BAD_ERASE_U16,
SOUND_LEVEL_SELECT_U16,
PREVIOUS_SOUND_LEVEL_SELECT_U16,
CURVE_DISPLAY_TYPE_MODE_U16,
CURVE_MAX_PRESSURE_U16,
CURVE_MAX_FLOW_U16,
CURVE_MAX_VT_U16,
CURVE_MAX_TIME_U16,
CURVE_DRAW_MODE_U16,
ADJUST_CYCLING_MODE_U16,
ADJUST_KEY_TONE_U16,
ADJUST_WAVEFORM_DISPLAY_U16,
ADJUST_BAROMETRIC_CORRECTOR_U16,
ADJUST_FIO2,
ADJUST_FIO2_SELECT,
ADJUST_LOW_FIO2,
ADJUST_HIGH_FIO2,
ADJUST_LOW_SPO2,
ADJUST_HIGH_SPO2,
SPO2_LOW_SELECT,
SPO2_HIGH_SELECT,
FIO2_LOW_SELECT,
FIO2_HIGH_SELECT,
PRESSURE_UNIT_U16,
TRIGG_E_POSITIVE,
APNEA_ALARM_ACTIVATION,
FLASH_MEMORY_MANUFACTURER,
FLASH_MEMORY_DEVICE,
FLASH_MEMORY_FIVE_ADDRESS_CYCLES,
PARAM_COMPATIBILITY,
IHM_LOCKED_FRAME_ID,
ADJUST_PEDIATRIC_CIRCUIT_U16,
PREVIOUS_MODE_U16,
PRESSURE_SUPPORT_RELATIVE_U16,
PRESSURE_SUPPORT_CHANGED_U16,
VOLUNTARY_STOP_ALARM_ACTIVATION,
SOUND_TYPE_SELECT_U16,
end_of_db_config_table};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Control.h"
enum e_DB_CONTROL {
VENTIL_AUTHORIZATION_U16,
CURRENT_MODE_U16,
CHANGE_MODE_U16,
VENTIL_STATE_U16,
SIMV_CYCLES_U16,
CALIB_PATIENT_PRESS_REQ_U16,
CALIB_FLOW_INSP_REQ_U16,
CALIB_FLOW_EXH_REQ_U16,
CALIB_VALVE_PRESS_REQ_U16,
CALIB_FAS_VALVE_REQ_U16,
INHIBITED_BUZZER_U16,
INHIBITION_AUTHORIZATION_U16,
CANCELLED_ALARM_U16,
BUZZER_CMD_U16,
CALIB_ADJUST_CMD_U16,
SETUP_CONTROL_SET_POINT_U16,
SETUP_CONTROL_TYPE_U16,
SUPPLY_AC_DC_BAT_U16,
DISPLAY_BATTERY_U16,
CURRENT_PATIENT_COUNTER_HOUR_U16,
CURRENT_PATIENT_COUNTER_MIN_U16,
CURRENT_MACHINE_COUNTER_HOUR_U16,
CURRENT_MACHINE_COUNTER_MIN_U16,
CONTROL_BUZZER_U16,
VALVE_DETECTED_U16,
AC_SELECTED_U16,
DC_SELECTED_U16,
REMOTE_STATE_U16,
PROXI_DETECTED_U16,
ALARM_DETECTED_U16,
NEW_ALARM_HP_DETECTED_U16,
Start_Limit_Setting,
LIMIT_LOW_PIP_U16,
LIMIT_HIGH_PIP_U16,
LIMIT_PEEP_U16,
LIMIT_VOL_CONTROL_U16,
LIMIT_TI_CONTROL_U16,
LIMIT_CONTROL_R_U16,
LIMIT_PI_U16,
LIMIT_LOW_VTI_U16,
LIMIT_HIGH_VTI_U16,
LIMIT_LOW_VTE_U16,
LIMIT_HIGH_VTE_U16,
LIMIT_P_SUPPORT_U16,
LIMIT_TI_MIN_U16,
LIMIT_TI_MAX_U16,
LIMIT_SPO2_MINI_U16,
LIMIT_SPO2_MAXI_U16,
LIMIT_INSP_SENS_U16,
LIMIT_SIGH_U16,
LIMIT_TARGET_VT_U16,
LIMIT_APNEA_U16,
LIMIT_HIGH_FIO2,
LIMIT_LOW_FIO2,
LIMIT_SPO2,
LIMIT_BACKUP_R_U16,
LIMIT_PMAX_U16,
End_Limit_Setting,
UNCANCEL_CMD_U16,
SUPPLY_BUS_FAILURE_U16,
KEYBOARD_ANOMALIE_U16,
VALIDATION_BIP_U16,
BIP_RUNNING_U16,
MAINTENANCE_MODE_U16,
CALIBRATION_MODE_U16,
TEST_BUZ_CARD_U16,
TEST_BUZ_SEC_U16,
TEST_VOLUME_U16,
CANCEL_ALARM_ASKED,
KEY_EVENT_U16,
BACKLIGHT_OFF_U16,
HIGH_PRESSURE_LED_REMINDER_U16,
RECORD_SETTINGS_USB_U16,
APPLY_SETTINGS_USB_U16,
ERASE_KEY_USB_U16,
RECORD_TIME_TENDANCE_U16,
ERROR_SPO2_SENSOR_DETECTED,
DETECTED_FIO2_SENSOR,
CALIBRATED_FIO2_SENSOR,
CALIB_ADJUST_VANNE_FIO2_CMD,
CALIB_FIO2_REQ_U16,
CALIB_FLOW_O2_REQ_U16,
MEMO_CMD_VANNE_FIO2_TO_CALIB,
CALIB_PRESS_O2_REQ_U16,
FLOW_SAT_FLAG_U16,
HIGH_PRESSURE_DETECTED_U16,
HIGH_PRESSURE_EXHALATION_DETECTED_U16,
HIGH_PRESSURE_FILTER_WINDOW_U16,
FIO2_100_ACTIVE,
LOAD_USB_SETTINGS_U16,
COM_READY_U16,
START_MONITORING_U16,
SIMV_PSV_CYCLE_U16,
BLOC_EXPI_DETECTED_U16,
ADJUSTMENT_IN_PROGRESS_U16,
VALVE_DETECT_IN_PROGRESS_U16,
EXHAL_FLOW_USE_U16,
FLAT_INT_U16,
FLAT_PROXI_U16,
VALVE_O2_CMD_U16,
CPAP_TRIG_I_U16,
CPAP_TRIG_E_U16,
CONTROLER_TYPE_U16,
VTI_DISPLAY_DELAY_U16,
VOLUNTARY_STOP_U16,
SIMV_CONTROLLED_INSP_U16,
END_OF_OPERATION_U16,
CIRCUIT_CHECK_MODE_U16,
end_of_db_control_table};
#line 28 "..\\..\\SRC\\DATABASE\\DB_Rtc.h"
enum e_DB_RTC {
DB_RTC_SECOND_U16,
DB_RTC_MINUTE_U16,
DB_RTC_HOUR_U16,
DB_RTC_DAY_U16,
DB_RTC_MONTH_U16,
DB_RTC_YEAR_U16,
ADJUST_RTC_REQ_U16,
ADJUST_RTC_SECOND_U16,
ADJUST_RTC_MINUTE_U16,
ADJUST_RTC_HOUR_U16,
ADJUST_RTC_DAY_U16,
ADJUST_RTC_MONTH_U16,
ADJUST_RTC_YEAR_U16,
end_of_db_rtc_table};
#line 37 "..\\..\\SRC\\DATABASE\\DB_Current.h"
enum e_DB_ADJUST_CURRENT {
ADJUST_VOL_CONTROL_U16,
ADJUST_P_CONTROL_U16,
ADJUST_PEEP_U16,
ADJUST_P_SUPPORT_U16,
ADJUST_RAMP_U16,
ADJUST_CONTROL_R_U16,
ADJUST_BACKUP_R_U16,
ADJUST_HIGH_R_U16,
HIGH_R_NO_SELECT_U16,
ADJUST_TI_CONTROL_U16,
ADJUST_INSP_SENS_U16,
INSP_SENS_NO_SELECT_U16,
ADJUST_EXH_SENS_U16,
AUTO_EXH_SENS_SELECT_U16,
ADJUST_APNEA_U16,
AUTO_APNEA_SELECT_U16,
ADJUST_LOW_PIP_U16,
ADJUST_HIGH_PIP_U16,
ADJUST_LOW_VTE_U16,
LOW_VTE_NO_SELECT_U16,
ADJUST_HIGH_VTE_U16,
HIGH_VTE_NO_SELECT_U16,
ADJUST_RISE_TIME_U16,
ADJUST_LOW_VM_U16,
LOW_VM_NO_SELECT_U16,
ADJUST_HIGH_VM_U16,
HIGH_VM_NO_SELECT_U16,
ADJUST_LOW_VTI_U16,
LOW_VTI_NO_SELECT_U16,
ADJUST_HIGH_VTI_U16,
HIGH_VTI_NO_SELECT_U16,
ADJUST_TI_MIN_U16,
TI_MIN_AUTO_SELECT_U16,
ADJUST_TI_MAX_U16,
TI_MAX_AUTO_SELECT_U16,
PI_SET_POINT_U16,
BACKUP_R_NO_SELECT_U16,
P_SUPPORT_NO_SELECT_U16,
CONTROL_R_NO_SELECT_U16,
PEEP_NO_SELECT_U16,
RISE_TIME_U16,
ADJUST_HIGH_LEAK_U16,
HIGH_LEAK_SELECT_U16,
CURRENT_USED_43_U16,
CURRENT_USED_44_U16,
CURRENT_USED_45_U16,
ADJUST_TARGET_VT_U16,
TARGET_VT_SELECT_U16,
ADJUST_MAX_PRESSURE_U16,
ADJUST_EXH_SENS_NEGATIVE_U16,
AUTO_EXH_SENS_NEG_SELECT_U16,
ADJUST_SIGH_SELECT_U16,
ADJUST_SIGH_CPT_U16,
ADJUST_SIGH_VT_COEF_U16,
ADJUST_DISCONNECTION_DELAY_U16,
DISCONNECTION_DELAY_AUTO_U16,
end_of_adjust_table};
#line 33 "..\\..\\SRC\\DATABASE\\DB_Usb.h"
enum e_DB_USB {
USB_ERASE_KEY_U16,
USB_TRANSFER_APPLY_U16,
USB_CONTINUOUS_RECORDING_U16,
USB_MONITOR_TRANSFER_U16,
USB_MONITOR_TRANSFER_SELECT_U16,
USB_TREND_TRANSFER_U16,
USB_TREND_TRANSFER_SELECT_U16,
USB_EVENTS_TRANSFER_U16,
USB_KEY1_DETECTED_AFTER_POWER_ON_U16,
USB_KEY2_DETECTED_AFTER_POWER_ON_U16,
USB_ERROR_CODE_READY_U16,
USB_ERROR_CODE_U16,
USB_ERROR_CODE_READY_IHM_U16,
USB_ERROR_CODE_IHM_U16,
USB_PROGRESS_HOURS_U16,
USB_PROGRESS_MINUTES_U16,
USB_COMMAND_SENT_U16,
USB_STOP_COMMAND_SENT_U16,
USB_MSNB_ONE_DETECTED_U16,
USB_MSNB_TWO_DETECTED_U16,
USB_NEW_KEY_CONNECTED_U16,
USB_MSB_FREE_SPACE_KEY_ONE,
USB_LSB_FREE_SPACE_KEY_ONE,
USB_MSB_FREE_SPACE_KEY_TWO,
USB_LSB_FREE_SPACE_KEY_TWO,
USB_NEW_MODE_DETECTED,
USB_NEW_MODE,
end_of_db_usb_table};
#line 109 "..\\..\\SRC\\HMI\\HMI_Setup1.hpp"
struct HMI_Setup1;
#line 130 "..\\..\\SRC\\HMI\\HMI_Controller.hpp"
enum __Q2_10Controller5WayId {
eGoUp__10Controller, eGoDown__10Controller, eGoValid__10Controller, eGoLongValid__10Controller, eGoMonitor__10Controller};



enum __Q2_10Controller11LegendState {
eOnStart__10Controller, eOnWait__10Controller, eStartVentil__10Controller, eStopVentil__10Controller};



enum __Q2_10Controller11eSTEP_LEVEL {
eSTEP_LEVEL_LOW__10Controller, eSTEP_LEVEL_HIGH__10Controller};
#line 118
struct Controller;
#line 40 "..\\..\\SRC\\HMI\\HMI_MenuControlNode.hpp"
struct MenuControlNode;
#line 36 "..\\..\\SRC\\HMI\\HMI_GlobalEventNode.hpp"
enum IndexNode {

NodeVentil, NodeModifVentil, NodeVt, NodeModifVt, NodePi, NodeModifPi, NodePi2, NodeModifPi2,
NodePControl, NodeModifPControl, NodePSupport, NodeModifPSupport, NodeFVaci, NodeModifFVaci, NodePe, NodeModifPe, NodePente,
NodeModifPente, NodeRampe, NodeModifRampe, NodeFrMini, NodeModifFrMini, NodeInspTime, NodeModifInspTime,
NodeTriggerI, NodeModifTriggerI, NodeSoupirSelect, NodeModifSoupirSelect, NodeSoupirVtCoeff, NodeModifSoupirVtCoeff,
NodeSoupirCpt, NodeModifSoupirCpt, NodeTriggerE, NodeModifTriggerE, NodeFsecu, NodeModifFsecu, NodeFiO2,
NodeModifFiO2, NodeApnee, NodeModifApnee, NodeVtCible, NodeModifVtCible, NodePiMax, NodeModifPiMax,
NodeTriggerEsigned, NodeModifTriggerEsigned, NodePreference, NodeModeChange,
NodeModifModeChange, NodeGhost,


NodeAlarm, NodeModifAlarm, NodeAlPi, NodeAlPiMin, NodeAlPiMax, NodeAlVti, NodeAlVtiMin,
NodeAlVtiMax, NodeAlVte, NodeAlVteMin, NodeAlVteMax, NodeAlCalibVte, NodeAlCalibVte2, NodeAlFuite,
NodeAlFuiteMax, NodeAlFiO2, NodeAlFiO2Min, NodeAlFiO2Max, NodeAlCalibFiO2, NodeAlCalibFiO2_2, NodeAlFr, NodeAlFrMax, NodeAlSpO2,
NodeAlSpO2Min, NodeAlSpO2Max, NodeAlTi, NodeAlTiMin, NodeAlTiMax,
NodeAlHisto, NodeAlModeChange, NodeModifAlModeChange, NodeAlGhost,


NodeHistAlBack, NodeHistAlCancelled,


NodeConfLang,
NodeModifConfLang,
NodeConfDate,
NodeConfMonth,
NodeConfDay,
NodeConfYear,
NodeConfTime,
NodeConfHour,
NodeConfMinute,
NodeConfSecond,
NodePrefVoluntaryStopAlarm,
NodeModifPrefVoluntaryStopAlarm,
NodeConfPressureUnit,
NodeModifConfPressureUnit,
NodeConfAlarmTone,
NodeModifConfAlarmTone,
NodeConfPatientCount,
NodeModifConfPatientCount,
NodeConfPatientReset,
NodeModifConfPatientReset,
NodeConfMaint,
NodeConfResetDefaultSetting,
NodeModifConfResetDefaultSetting,
NodeConfMachineHour,
NodeConfNextPage,



NodeConfModeCycl,
NodeModifConfModeCycl,
NodeConfRelativePress,
NodeModifConfRelativePress,

NodeConfConvTrigE,
NodeModifConfConvTrigE,
NodeConfig1BackToConfig,


NodeTestCircuitLeak,


NodePrefScreenSave, NodeModifPrefScreenSave, NodePrefBrightness, NodeModifPrefBrightness, NodePrefSoundLevel, NodeModifPrefSoundLevel, NodePrefKeyTone,
NodeModifPrefKeyTone, NodePrefApneaAlarm, NodeModifPrefApneaAlarm, NodePrefDisconnectionAlarm, NodeModifPrefDisconnectionAlarm,




NodePrefWaveDisplay,
NodeModifPrefWaveDisplay,


NodePrefPediatricCircuit,
NodeModifPrefPediatricCircuit,
NodePrefTrend,
NodePrefBackVentil,


NodeMaintHistAno, NodeMaintVoltCtrl, NodeMaintSensorCal,
NodeMaintGhostStart,
NodeMaintPatientPressure, NodeMaintPatientPressure1, NodeMaintPatientPressure2, NodeMaintPatientPressure3,
NoteMaintValvePressure, NoteMaintValvePressure1, NoteMaintValvePressure2, NoteMaintValvePressure3,
NodeMaintFlowIns, NodeMaintFlowIns1, NodeMaintFlowIns2, NodeMaintFlowIns3, NodeMaintFlowIns4, NodeMaintFlowIns5, NodeMaintFlowIns6, NodeMaintFlowIns7, NodeMaintFlowIns8, NodeMaintFlowIns9,
NodeMaintFlowExp, NodeMaintFlowExp1, NodeMaintFlowExp2, NodeMaintFlowExp3, NodeMaintFlowExp4, NodeMaintFlowExp5, NodeMaintFlowExp6, NodeMaintFlowExp7, NodeMaintFlowExp8, NodeMaintFlowExp9,
NodeMaintFiO2Concent, NodeMaintFiO2Concent1, NodeMaintFiO2Concent2,
NodeMaintFlowO2, NodeMaintFlowO2_1, NodeMaintFlowO2_2, NodeMaintFlowO2_3, NodeMaintFlowO2_4, NodeMaintFlowO2_5, NodeMaintFlowO2_6, NodeMaintFlowO2_7, NodeMaintFlowO2_8, NodeMaintFlowO2_9,
NodeMaintPressO2, NodeMaintPressO2_1, NodeMaintPressO2_2,
NodeMaintGhostEnd,
NodeMaintPwmBlower, NodeModifMaintPwmBlower, NodeMaintBackToConfig,


NodeHistAnoBackMaint,


NodeSupplyBuzVolt, NodeSupplyBackUpBuz, NodeSupplyBatteryMenu, NodeSupplyAltCompens, NodeModifSupplyAltCompens, NodeSupplyBackToMaint,


NodeGraphGhost,


NodeCfgGraphVisu, NodeModifCfgGraphVisu, NodeCfgGraphPMax, NodeModifCfgGraphPMax, NodeCfgGraphQMax, NodeModifCfgGraphQMax, NodeCfgGraphVtMax,
NodeModifCfgGraphVtMax, NodeCfgGraphTMax, NodeModifCfgGraphTMax, NodeCfgGraphRepresent, NodeModifCfgGraphRepresent, NodeCfgGraphBackPref,


NodeBatteryBackToMaint,


NodeUsbGhost,
NodeUsbContRecord, NodeModifUsbContRecord,
NodeUsbTransferTrend, NodeModifUsbTransferTrend,
NodeUsbEraseKey, NodeModifUsbEraseKey,




NodeUsbTransferMonit, NodeModifUsbTransferMonit,




NodeUsbStop,

NodeTrendBack,


NodeGhostEnd,


NodeFree,


NB_NODE};
#line 40 "..\\..\\SRC\\HMI\\HMI_EventNode.hpp"
struct EventNode;
#line 28 "..\\..\\SRC\\DATABASE\\DB_AlarmStatus.h"
enum e_DB_ALARMS {
Mark_Begin_Alarm,
ALARM_DISCONNECTION_U16,
ALARM_HIGH_PRESSURE_U16,
ALARM_APNEA_U16,
ALARM_HIGH_VTI_U16,
ALARM_LOW_VTI_U16,
ALARM_LOW_VTE_U16,
ALARM_HIGH_RATE_U16,
ALARM_AC_POWER_FAIL_U16,
ALARM_DC_POWER_FAIL_U16,
ALARM_CHECK_SUPPLY_U16,
ALARM_LOW_BATTERY_U16,
ALARM_END_OF_BATTERY_U16,
ALARM_CHECK_BATTERY_U16,
ALARM_NO_BATTERY_U16,
ALARM_CHECK_BUZZER_U16,
ALARM_BUZZER_BATTERY_LOW_U16,
ALARM_BUZZER_BATTERY_CHARGE_FAILURE_U16,
ALARM_RESERVED_18,
ALARM_TECHNICAL_PROBLEM_U16,
ALARM_CHECK_SETTINGS_U16,
ALARM_CHECK_PRESSURE_U16,
ALARM_CHECK_PROXIMAL_U16,
ALARM_PROXI_DISCONNECTION_U16,
ALARM_NO_PROXIMAL_U16,
ALARM_CHECK_VALVE_U16,
ALARM_CHECK_VOLUME_U16,
ALARM_VALVE_LEAKAGE_U16,
ALARM_CHECK_REMOTE_ALARM_U16,
ALARM_UNKNOWN_BATTERY_U16,
ALARM_CHECK_BATTERY_CHARGE_U16,
ALARM_HIGH_VTE_U16,
ALARM_CALIBRATION_FAIL_U16,
ALARM_KEYBOARD_DEFAULT_U16,
ALARM_AMBIENT_TEMP_U16,
ALARM_BAT_TEMP_U16,
ALARM_FAILURE_24V_U16,
ALARM_COOLING_FAN_U16,
ALARM_SUPPLY_MEASURE_U16,
ALARM_TURBINE_OVERHEAT_U16,
ALARM_RESERVED_40,
ALARM_CONTROLLED_CYCLES_U16,
ALARM_OCCLUSION_U16,
ALARM_CPU_REFERENCE_U16,
ALARM_BREATH_TIME_CYCLED_U16,
ALARM_INSP_FLOW_FAILURE_U16,
ALARM_CHECK_VALVE_PRESSURE_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_UTILISER_VALVE_1_U16,
ALARM_UTILISER_VALVE_2_U16,
ALARM_ENLEVER_VALVE_1_U16,
ALARM_ENLEVER_VALVE_2_U16,
ALARM_LEAKAGE_U16,
ALARM_CHECK_FIO2_U16,
ALARM_LOW_FIO2_U16,
ALARM_HIGH_FIO2_U16,
ALARM_NO_FIO2_SENSOR_U16,
ALARM_CALIB_FIO2_U16,
ALARM_CHECK_O2_SUPPLY_U16,
ALARM_MISSING_O2_SUPPLY_U16,
ALARM_CHECK_O2_U16,
ALARM_O2_LEAKAGE_U16,
ALARM_HIGH_SPO2_U16,
ALARM_LOW_SPO2_U16,
ALARM_SPO2_SENSOR_DISCONNECTED_U16,
ALARM_100_PER_CENT_O2_U16,
ALARM_DELAYED_MESSAGE_U16,
ALARM_LEAK_OCCLUSION_U16,
ALARM_VOLUNTARY_STOP_U16,
ALARM_NEEDED_FIO2_CALIB_U16,
ALARM_APNEA_FLAG_U16,
Mark_Displayed_Alarm,
Mark_Begin_Technical_Alarm,
TECH_ALARM_RESERVED_1,
TECH_ALARM_INSP_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_EXHAL_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_VALVE_PRESS_OFFSET_DEFAULT_U16,
TECH_ALARM_INTERNAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_SPEED_DEFAULT_U16,
TECH_ALARM_CLOCK_DEFAULT_U16,
TECH_ALARM_PROXIMAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_VERY_LOW_PROXIMAL_PRESS_U16,
TECH_ALARM_VERY_LOW_INTERNAL_PRESS_U16,
TECH_ALARM_VERY_LOW_VALVE_PRESS_U16,
TECH_ALARM_LOOSE_FLASH_POINTER,
TECH_ALARM_FIO2_OFFSET_DEFAULT,
TECH_ALARM_OFFSET_O2_FLOW,
TECH_ALARM_O2_PRESSURE_OFFSET_DEFAULT,
TECH_ALARM_RESERVED_16,
TECH_ALARM_RESERVED_17,
TECH_ALARM_RESERVED_18,
TECH_ALARM_RESERVED_19,
TECH_ALARM_RESERVED_20,
end_of_alarms_table,
NO_ALARM};
#line 32 "..\\..\\SRC\\DATABASE\\DB_Event.h"
enum e_EVENT_ENUM {

NO_EVENT,
EVENT_START,
EVENT_VENTIL,
EVENT_VOLUNTARY_STOP_VENTIL,
EVENT_MODIF_PEEP,
EVENT_MODIF_BACKUP_R,
EVENT_RESET_PATIENT_COUNTER,
EVENT_MODIF_CONTROL_R,
RESERVED_8,
EVENT_MODIF_VOL_CONTROL,
EVENT_MODIF_RAMP,
EVENT_MODIF_IE,
RESERVED_12,
EVENT_MODIF_STOP_DEVICE,
EVENT_MODIF_INSP_SENS,
EVENT_MODIF_MODE,
EVENT_MODIF_RISE_TIME,
EVENT_MODIF_P_SUPPORT,
EVENT_MODIF_VTC,
EVENT_MODIF_PIMAX,
EVENT_MODIF_IT,
RESERVED_21,
EVENT_MODIF_EXH_SENS,
EVENT_MODIF_APNEA_TIME,
EVENT_MODIF_LOW_PIP,
EVENT_MODIF_HIGH_PIP,
EVENT_MODIF_HIGH_R,
EVENT_MODIF_LOW_VTE,
RESERVED_28,
RESERVED_29,
EVENT_MODIF_LOW_VTI,
EVENT_MODIF_HIGH_VTI,
RESERVED_32,
RESERVED_33,
RESERVED_34,
RESERVED_35,
EVENT_UNVOLUNTARY_STOP_VENTIL,
RESERVED_37,
RESERVED_38,
RESERVED_39,
EVENT_EXH_FLOW_CALIB,
RESERVED_41,
EVENT_MODIF_FIO2,
EVENT_FIO2_CALIB,
EVENT_MODIF_MAX_LEAK,
EVENT_INSP_FLOW_CALIB,
EVENT_O2_FLOW_CALIB,
EVENT_PATIENT_PRESS_CALIB,
RESERVED_48,
EVENT_MODIF_SPO2_MAXI,
EVENT_MODIF_SPO2_MINI,
EVENT_MODIF_TI_MAXI,
EVENT_MODIF_TI_MINI,
EVENT_VALVE_PRESS_CALIB,
EVENT_AC_RETURN,
EVENT_O2_PRESS_CALIB,
EVENT_ALARM_INHIBITION,
EVENT_DC_RETURN,
EVENT_CIRCUIT_CHECK_MENU_ACCESS,
EVENT_MAINTENANCE_MENU_ACCESS,
EVENT_ALARM_CANCELLATION,
EVENT_MODIF_P_CONTROL,
EVENT_MODIF_TI_CONTROL,
RESERVED_63,
RESERVED_64,
EVENT_MODIF_HIGH_VTE,
EVENT_MODIF_TIME,
EVENT_MODIF_DATE,
EVENT_USB_TOO_MANY_KEYS_CONNECTED,
EVENT_USB_KEY_DISCONNECTED_DURING_OPERATION,
EVENT_USB_TRANSFER_ERROR,
EVENT_USB_ERASE_KEY_ERROR,
EVENT_USB_SETTINGS_INCOMPATIBLES,
EVENT_USB_SETTINGS_FILE_ERROR,
EVENT_USB_KEY_FULL,
EVENT_USB_SETTINGS_TRANSFER_FROM_KEY,
EVENT_MODIF_FIO2_MAXI,
EVENT_MODIF_FIO2_MINI,
EVENT_MODIF_DISCONNECTION_DELAY,
EVENT_MODIF_SIGHT_COUNT,
EVENT_MODIF_SIGHT_COEF,
EVENT_FLASH_CHECKSUM_POST_ERROR,
EVENT_RAM_CHECKSUM_POST_ERROR,
EVENT_VOLT_REFERENCE_POST_ERROR,
EVENT_EEPROM_POST_ERROR,
EVENT_POST_VERSION_ERROR,
EVENT_USB_CONTINUOUS_TRANSFER_START,
EVENT_USB_CONTINUOUS_TRANSFER_STOP,
RESERVED_88,
Start_Alarm,
EVENT_AL_HIGH_PRESS,
EVENT_AL_DISCONNECTION,
EVENT_AL_HIGH_RATE,
EVENT_AL_LOW_VTI,
EVENT_AL_HIGH_VTI,
EVENT_AL_LOW_VTE,
EVENT_AL_VALVE_LEAKAGE,
EVENT_AL_APNEA,
EVENT_AL_LOW_FIO2,
EVENT_AL_HIGH_FIO2,
EVENT_AL_CHECK_PRESSURE,
EVENT_AL_CHECK_VALVE,
EVENT_AL_AC_POWER_FAIL,
EVENT_AL_DC_POWER_FAIL,
EVENT_AL_LOW_BATTERY,
EVENT_AL_END_OF_BATTERY,
EVENT_AL_CHECK_BATTERY,
EVENT_AL_HIGH_SPO2,
EVENT_AL_NO_FIO2_SENSOR,
EVENT_AL_LEAKAGE,
EVENT_AL_LEAK_OCCLUSION,
EVENT_AL_LOW_SPO2,
EVENT_AL_NO_BATTERY,
EVENT_AL_NO_PROXI,
EVENT_AL_O2_LEAKAGE,
EVENT_AL_CHECK_VOLUME,
EVENT_AL_CHECK_BUZZER,
EVENT_AL_CHECK_FIO2,
EVENT_AL_CHECK_O2,
EVENT_AL_CHECK_O2_SUPPLY,
EVENT_AL_CHECK_PROXIMAL,
EVENT_AL_CHECK_REMOTE_ALARM,
EVENT_AL_CHECK_SUPPLY,
RESERVED_123,
EVENT_AL_CONNECT_VALVE,
EVENT_AL_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_DISCONNECT_VALVE,
EVENT_AL_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_PROXIMAL_DISCONNECTION,
EVENT_AL_TECHNICAL_PROBLEM,
EVENT_AL_CHECK_VALVE_PRESSURE,
EVENT_AL_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_MISSING_O2_SUPPLY,
EVENT_AL_CONTROLLED_CYCLES,
RESERVED_134,
EVENT_AL_100_PER_CENT_O2,
EVENT_AL_UNKNOWN_BATTERY,
EVENT_AL_CHECK_BATTERY_CHARGE,
RESERVED_138,
RESERVED_139,
RESERVED_140,
RESERVED_141,
EVENT_AL_NEW_VERSION,
EVENT_AL_EEPROM_OUT_OF_RANGE,
EVENT_AL_EEPROM_LOOSING_PARAM,
RESERVED_145,
EVENT_AL_HIGH_VTE,
EVENT_AL_KEYBOARD,
EVENT_AL_CALIBRATION,
EVENT_AL_COOLING_FAN,
EVENT_AL_AMBIENT_TEMP,
EVENT_AL_BAT_TEMP,
EVENT_AL_SUPPLY_MEASURE,
EVENT_AL_FAILURE_24V,
EVENT_AL_TURBINE_OVERHEAT,
EVENT_AL_OCCLUSION,
EVENT_AL_CPU_REFERENCE,
RESERVED_157,
EVENT_AL_BREATH_TIME_CYCLED,
EVENT_AL_INSP_FLOW_FAILURE,
EVENT_AL_LOW_BUZZER_BATTERY,
RESERVED_161,
EVENT_AL_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_NEEDED_FIO2_CALIB,
EVENT_AL_VOLUNTARY_STOP,
RESERVED_165,
RESERVED_166,
RESERVED_167,
End_Event_Alarm,
Start_End_Of_Alarm,
EVENT_AL_END_OF_APNEA,
EVENT_AL_END_OF_CHECK_BATTERY,
EVENT_AL_END_OF_DISCONNECTION,
EVENT_AL_END_OF_CHECK_FIO2,
EVENT_AL_END_OF_CHECK_O2,
EVENT_AL_END_OF_CHECK_O2_SUPPLY,
EVENT_AL_END_OF_CHECK_PRESSURE,
EVENT_AL_END_OF_CHECK_PROXIMAL,
RESERVED_178,
RESERVED_179,
EVENT_AL_END_OF_CHECK_SUPPLY,
EVENT_AL_END_OF_CHECK_VALVE,
EVENT_AL_END_OF_LEAK_OCCLUSION,
EVENT_AL_END_OF_CHECK_VOLUME,
EVENT_AL_END_OF_CONNECT_VALVE,
EVENT_AL_END_OF_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_DISCONNECT_VALVE,
EVENT_AL_END_OF_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_HIGH_FIO2,
EVENT_AL_END_OF_HIGH_PRESSURE,
EVENT_AL_END_OF_HIGH_RATE,
EVENT_AL_END_OF_HIGH_SPO2,
EVENT_AL_END_OF_HIGH_VTI,
EVENT_AL_END_OF_LEAKAGE,
EVENT_AL_END_OF_LOW_FIO2,
EVENT_AL_END_OF_LOW_SPO2,
EVENT_AL_END_OF_LOW_VTE,
EVENT_AL_END_OF_LOW_VTI,
EVENT_AL_END_OF_NO_BATTERY,
EVENT_AL_END_OF_NO_FIO2_SENSOR,
EVENT_AL_END_OF_NO_PROXI,
EVENT_AL_END_OF_O2_LEAKAGE,
EVENT_AL_END_OF_PROXI_DISCONNECTION,
EVENT_AL_END_OF_TECHNICAL_PROBLEM,
EVENT_AL_END_OF_VALVE_LEAKAGE,
EVENT_AL_END_OF_HIGH_VTE,
EVENT_AL_END_KEYBOARD,
EVENT_AL_END_CHECK_VALVE_PRESSURE,
EVENT_AL_END_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_END_MISSING_O2_SUPPLY,
EVENT_AL_END_CONTROLLED_CYCLES,
RESERVED_211,
EVENT_AL_END_OF_100_PER_CENT_O2,
EVENT_AL_END_OF_UNKNOWN_BATTERY,
EVENT_AL_END_OF_CHECK_BATTERY_CHARGE,
RESERVED_215,
RESERVED_216,
RESERVED_217,
RESERVED_218,
EVENT_AL_END_COOLING_FAN,
EVENT_AL_END_AMBIENT_TEMP,
EVENT_AL_END_BAT_TEMP,
EVENT_AL_END_SUPPLY_MEASURE,
EVENT_AL_END_FAILURE_24V,
RESERVED_224,
EVENT_AL_END_OCCLUSION,
EVENT_AL_END_CPU_REFERENCE,
RESERVED_227,
EVENT_AL_END_BREATH_TIME_CYCLED,
EVENT_AL_END_OF_INSP_FLOW_FAILURE,
EVENT_AL_END_LOW_BUZZER_BATTERY,
RESERVED_231,
EVENT_AL_END_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_END_OF_VOLUNTARY_STOP,
RESERVED_234,
RESERVED_235,
End_Alarm,
Start_Anomalies,
RESERVED_238,
EVENT_ALT_INSP_FLOW_OFFSET,
EVENT_ALT_EXH_FLOW_OFFSET,
EVENT_ALT_VALVE_PRESSURE_OFFSET,
EVENT_ALT_INT_PRESS_OFSSET,
EVENT_ALT_SPEED,
EVENT_ALT_CLOCK,
EVENT_ALT_PROXI_PRESS_OFSSET,
EVENT_ALT_VERY_LOW_PROXI_PRESS,
EVENT_ALT_VERY_LOW_INT_PRESS,
EVENT_ALT_VERY_LOW_VALVE_PRESS,
EVENT_ALT_LOOSE_FLASH_POINTER,
EVENT_ALT_FIO2_OFFSET,
EVENT_ALT_O2_FLOW_OFFSET,
EVENT_ALT_O2_PRESSURE_OFFSET,
RESERVED_253,
RESERVED_254,
End_Anomalie};
#line 116 "..\\..\\SRC\\GENERAL\\Structure.h"
struct t_TEST_EEPROM_DB;
#line 129
enum e_StorageType {
FULL,
MSB,
LSB,
STORAGE_CONSTANT};
#line 35 "..\\..\\SRC\\DATABASE\\DB_Compute.h"
enum e_DB_COMPUTE {
MEASURE_VALVE_PRESSURE_S16,
FILTER_VALVE_PRESSURE_S16,
MEASURE_INTERNAL_PRESSURE_S16,
FILTER_INTERNAL_PRESSURE_S16,
MEASURE_PATIENT_PRESSURE_PROXI_S16,
FILTER_PATIENT_PRESSURE_PROXI_S16,
MEASURE_PATIENT_PRESSURE_S16,
FILTER_PATIENT_PRESSURE_S16,
MEASURE_QINSP_S16,
FILTER_QI_S16,
FILTER_QI_LOW_S16,
MEASURE_QEXH_S16,
FILTER_QE_S16,
COMPUTED_VTE_U16,
COMPUTED_VTE_INSP_U16,
COMPUTED_PIP_U16,
COMPUTED_PEEP_U16,
COMPUTED_FIO2,
MEASURE_FIO2,
MEASURE_IE_NUMERATOR_U16,
MEASURE_IE_DENOMINATOR_U16,
MEASURE_TI_U16,
MEASURE_TI_HMI_U16,
MEASURE_TE_U16,
MEASURE_R_U16,
MEASURE_SPEED_BLOWER_U16,
FILTER_SPEED_BLOWER_S16,
COMPUTED_BATTERY_LEVEL_U16,
MEASURE_SUPPLY_5V_U16,
MEASURE_SUPPLY_24V_U16,
MEASURE_TEST_BUZZER_VOLTAGE_U16,
MEASURE_BUZZER_VOLTAGE_U16,
MEASURE_BATTERY_BUZZER_VOLTAGE_U16,
MEASURE_PFI_VOLTAGE_U16,
COMPUTED_PI_SET_POINT_U16,
COMPUTED_VTI_EXH_S16,
MEASURE_SPO2_U16,
MEASURE_HR_U16,
COMPUTED_LEAK_U16,
COMPUTED_LEAK_HMI_U16,
CURVE_CORRECTED_VT_WOB_U16,
CURVE_CORRECTED_FLOW_S16,
COMPUTED_TEMP_S16,
COMPUTED_VTI_U16,
COMPUTED_USED_44_U16,
COMPUTED_USED_45_U16,
MEASURE_BATTERY_VOLTAGE_U16,
COMPUTED_VMI_U16,
COMPUTED_VME_U16,
AVERAGE_PRESSURE_U16,
MEASURE_ABSOLUTE_PRESSURE_U16,
MEASURE_BLOWER_TEMPERATURE_S16,
COMPUTED_RISE_TIME_U16,
MEASURE_IT_U16,
MEASURE_BATTERY_CAPACITY_U16,
COMPUTED_PULSE_U16,
COMPUTE_CORRECTED_Q,
COMPUTED_TI_CONTROL_U16,
FILTER_QO2_S16,
FILTER_PRESSURE_O2_S16,
MEASURE_PRESSURE_O2_S16,
MEASURE_QO2_S16,
COMPUTED_IE_NUMERATOR_U16,
COMPUTED_IE_DENOMINATOR_U16,
COMPUTE_QEE_S16,
COMPUTED_I_T_U16,
MEAS_ABS_PRESS_MMHG_U16,
COMPUTED_RATE_U16,
BLOWER_COMMAND_U16,
MEASURE_ZERO_VALUE_U16,
COMPUTED_P_VALVE_MAX_U16,
CUMUL_PRESS_INSP_S16,
ESTIMATED_PROXIMAL_PRESSURE_S16,
MEASURE_QINSP_LEAKCORRECTED_S16,
MEASURE_VALVE_CURRENT_U16,
MEAN_INSP_VALVE_CURRENT_U16,
VALVE_COMMAND_INIT_U16,
VALVE_COMMAND_MIN_U16,
VALVE_COMMAND_MAX_U16,
VALVE_COMMAND_COEFF_U16,
VALVE_COMMAND_U16,
LPF_PATIENT_PRESSURE_S16,
COMPUTED_LPF_PIP_U16,
LEAK_TEST_QI_S16,
LEAK_TEST_RESULT_U16,
end_of_db_compute_table};
#line 31 "..\\..\\SRC\\DATABASE\\DB_KeyboardEvent.h"
enum e_DB_KEYBOARD_EVENT_ID {
KEYBOARD_UP_EVENT_U16,
KEYBOARD_DOWN_EVENT_U16,
KEYBOARD_VALID_EVENT_U16,
KEYBOARD_INHIB_EVENT_U16,
KEYBOARD_INHIB_IT_GEN_EVENT_ARRAY_U16,
KEYBOARD_IT_GEN_EVENT_U16,
KEYBOARD_IT_OFF_EVENT_U16,
KEYBOARD_START_VENTIL_DOWN_EVENT_U16,
KEYBOARD_START_VENTIL_UP_EVENT_U16,
KEYBOARD_STOP_VENTIL_EVENT_U16,
KEYBOARD_CONFIRM_STOP_VENTIL_EVENT_U16,
KEYBOARD_LOCK_EVENT_U16,
KEYBOARD_LONG_VALID_EVENT_U16,
KEYBOARD_LONG_DOWN_EVENT_U16,
KEYBOARD_LONG_UP_EVENT_U16,
KEYBOARD_BRIGHTNESS_UP_EVENT_U16,
KEYBOARD_BRIGHTNESS_DOWN_EVENT_U16,
KEYBOARD_LONG_INHIB_EVENT_U16,
KEYBOARD_DOUBLE_PULSE_INHIB_EVENT_U16,
KEYBOARD_NAVIG_EVENT_U16,
KEYBOARD_LONG_NAVIG_EVENT_U16,
KEYBOARD_100_FIO2,
KEYBOARD_LONG_100_FIO2,
KEYBOARD_NAVIG_IT_GEN_EVENT_U16,
end_of_db_Keyboard_Event_table}; struct __T50731308 { short d; short i; void (*f)();}; typedef char bool;
#line 33 "..\\..\\SRC\\GENERAL\\typedef.h"
typedef int e_BOOL;
#line 63
typedef unsigned char UBYTE;
typedef unsigned UWORD16;
typedef unsigned long UWORD32;

typedef signed int SWORD16;
typedef signed long SWORD32;
#line 104 "..\\..\\SRC\\GENERAL\\enum.h"
typedef enum e_SYMBOL e_SYMBOL;
#line 391
typedef enum e_TYPE_OF_DB_TARGET e_TYPE_OF_DB_TARGET;
#line 417
typedef enum e_MODE_TYPES e_MODE_TYPES;
#line 557
typedef enum e_VentilState e_VentilState;
#line 817
typedef enum e_EEP_ACCESS_STATE e_EEP_ACCESS_STATE;
#line 825
typedef enum e_DRV_EVENT_STATE e_DRV_EVENT_STATE;
#line 106 "..\\..\\SRC\\HMI\\HMI_IhmType.hpp"
struct AlarmEvent {
UWORD16 id;
UWORD16 action;
e_BOOL logtolast;
UWORD16 day;
UWORD16 month;
UWORD16 year;
UWORD16 hour;
UWORD16 min;};
typedef struct AlarmEvent AlarmEvent;
#line 199
typedef enum EventId EventId;
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject {
#line 45
e_TYPE_OF_DB_TARGET DbTarget;

UWORD16 IdParam; struct __T50731308 *__vptr;};
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject { struct MenuObject __b_MenuObject;
#line 47
struct DisplayObject *Parent;


UWORD16 Line;


UWORD16 Col;


UWORD16 Page;

e_BOOL Visible;

e_BOOL RefreshE;};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject { struct DisplayObject __b_DisplayObject;
#line 47
UWORD16 Font;

e_BOOL ReverseVideo;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField { struct FieldObject __b_FieldObject;
#line 41
UWORD16 Value; UWORD16 NbDigit; UWORD16 Divider;

e_BOOL DisplayZero; e_BOOL Float; e_BOOL SignValue;
#line 51
e_BOOL ChildBackgroundEqualParent;

e_BOOL IEDisplay;};
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField { struct FieldObject __b_FieldObject;
#line 41
UBYTE *Text;};
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 Height;


UWORD16 Width;

e_BOOL FloodBlack;
e_BOOL RoundHigh;
e_BOOL RoundLow;};
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField { struct FieldObject __b_FieldObject;
#line 40
e_SYMBOL Symbol;

e_BOOL BarredSymbol;};
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog { struct DisplayObject __b_DisplayObject;
#line 46
struct TextField FLine1;
e_BOOL Line1Centered;

struct TextField FLine2;
e_BOOL Line2Centered;

struct TextField FLine3;
e_BOOL Line3Centered;

struct SymbolField FSymbol;

struct GraphicBox MonitorBox;

UBYTE TextLine[3][33];

e_BOOL Line1Ok; e_BOOL Line2Ok; e_BOOL Line3Ok; e_BOOL SymbolOk;

UWORD16 WBox;};
#line 46 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
typedef enum DataType DataType;

struct Loupe { struct DisplayObject __b_DisplayObject;



struct TextField FValueS;

struct ValueField FValueI;

e_BOOL StringValue;
e_BOOL HaveText;

DataType Dtype;
#line 68
struct MessageDialog Message;

struct GraphicBox MonitorBox;};
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label { struct DisplayObject __b_DisplayObject;
#line 44
e_SYMBOL PreviousIcon;

UBYTE **Name;

struct Loupe *LoupeObject;

struct SymbolField FIcon;

struct TextField FLabel;

e_BOOL Centered;};
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject { struct Label __b_Label;
#line 42
UWORD16 ValueTemp;


UWORD16 IdFlagTemp;


UWORD16 ValueFlagTemp;

e_TYPE_OF_DB_TARGET DbIdFlagTemp;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField { struct ValueField __b_ValueField;
#line 41
UBYTE *Text;

e_BOOL IsString;};
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue { struct EditableObject __b_EditableObject;
#line 46
struct TextField FUnit1;
struct TextField FSep;

struct ValueTextField FValue1;

e_BOOL LabelOnly;
e_BOOL ValueIsString;
e_BOOL StopMonitoring;

UBYTE **NameUnit;

UWORD16 Divider;

e_BOOL NbDigitsChanged;
e_BOOL InitNbDigits;

e_BOOL MaxDisplayValueConfigured;
UWORD16 MaxDisplayValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSign.hpp"
struct LabelOneValueSign { struct LabelOneValue __b_LabelOneValue;




struct TextField FSign;
UWORD16 CachedSignSize;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDbRT.hpp"
struct LabelOneValueDbRT { struct LabelOneValue __b_LabelOneValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignDefault.hpp"
struct LabelOneValueSignDefault { struct LabelOneValueSign __b_LabelOneValueSign;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignFlag.hpp"
struct LabelOneValueSignFlag { struct LabelOneValueSignDefault __b_LabelOneValueSignDefault;
#line 41
UWORD16 IdFlag;

e_TYPE_OF_DB_TARGET DbIdFlag;
e_BOOL FlagForDefault;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDefault.hpp"
struct LabelOneValueDefault { struct LabelOneValue __b_LabelOneValue;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueThreeDefault.hpp"
struct LabelOneValueThreeDefault { struct LabelOneValueDefault __b_LabelOneValueDefault;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;

UWORD16 DefaultValue1;

UBYTE **NameDefaultValue1;

UWORD16 DefaultValue2;

UBYTE **NameDefaultValue2;

UWORD16 DisplayValue; UWORD16 DisplayValue1; UWORD16 DisplayValue2;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFourDefault.hpp"
struct LabelOneValueFourDefault { struct LabelOneValueDefault __b_LabelOneValueDefault;
#line 41
UWORD16 DefaultValue;

UBYTE **NameDefaultValue;

UWORD16 DefaultValue1;

UBYTE **NameDefaultValue1;

UWORD16 DefaultValue2;

UBYTE **NameDefaultValue2;

UWORD16 DefaultValue3;

UBYTE **NameDefaultValue3;

UWORD16 DisplayValue;

UWORD16 DisplayValue1;

UWORD16 DisplayValue2;

UWORD16 DisplayValue3;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFlag.hpp"
struct LabelOneValueFlag { struct LabelOneValueDefault __b_LabelOneValueDefault;
#line 41
UWORD16 IdFlag;

e_TYPE_OF_DB_TARGET DbIdFlag;

e_BOOL FlagForDefault;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelOneValueTrig.hpp"
struct LabelOneValueTrig { struct LabelOneValue __b_LabelOneValue;
#line 42
struct SymbolField FTrig;

e_BOOL Trigger;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelProgressBar.hpp"
struct LabelProgressBar { struct EditableObject __b_EditableObject;
#line 43
struct TextField FSep;

UBYTE **NameUnit;

UWORD16 PixelValue;
UWORD16 RealValue;
UWORD16 ColValue;
UWORD16 LowLimit;
UWORD16 LimitDelta;

e_BOOL BipRequest;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue { struct LabelOneValue __b_LabelOneValue;
#line 43
struct TextField FUnit2;

struct ValueTextField FValue2;

UBYTE **NameUnit2;

UWORD16 ValueState;
UWORD16 IdParam2;
UWORD16 Divider2;

e_TYPE_OF_DB_TARGET DbTarget2;

e_BOOL ColAdjust;

e_BOOL MaxDisplayValue2Configured;
UWORD16 MaxDisplayValue2;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueLock.hpp"
struct LabelTwoValueLock { struct LabelTwoValue __b_LabelTwoValue;};
#line 42 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValue.hpp"
struct LabelTabOneValue { struct EditableObject __b_EditableObject;
#line 49
struct TextField TFNoValue;

struct ValueTextField FValue1;
struct ValueTextField FValueRefresh;

UWORD16 ValueTemp;
UWORD16 IdParamMonitor;
UWORD16 Divider;

e_BOOL Value1IsString;
e_BOOL StopMonitoring;
e_BOOL Value1IsMaxi;

e_TYPE_OF_DB_TARGET DbTargetMonitor;

e_BOOL MaxDisplayValueConfigured;
UWORD16 MaxDisplayValue;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueDefault.hpp"
struct LabelTabOneValueDefault { struct LabelTabOneValue __b_LabelTabOneValue;
#line 41
UWORD16 DefaultValue1;

UBYTE **NameDefaultValue1;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueFlag.hpp"
struct LabelTabOneValueFlag { struct LabelTabOneValueDefault __b_LabelTabOneValueDefault;
#line 41
UWORD16 IdFlag1;

e_TYPE_OF_DB_TARGET DbIdFlag1;
e_BOOL FlagForDefault1;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValue.hpp"
struct LabelTabTwoValue { struct LabelTabOneValue __b_LabelTabOneValue;
#line 43
struct ValueTextField FValue2;

UBYTE **NameUnit;

UWORD16 ValueState;
UWORD16 IdParam2;

e_BOOL Value2IsString;

e_TYPE_OF_DB_TARGET DbTarget2;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueTwoLabels.hpp"
struct LabelTabTwoValueTwoLabels { struct LabelTabTwoValue __b_LabelTabTwoValue;
#line 42
struct Label FLabel2;

UWORD16 ColOffset;
UWORD16 LineOffset;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueDefault.hpp"
struct LabelTabTwoValueDefault { struct LabelTabTwoValue __b_LabelTabTwoValue;
#line 41
UWORD16 DefaultValue1;
UWORD16 DefaultValue2;

UBYTE **NameDefaultValue1;
UBYTE **NameDefaultValue2;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueFlag.hpp"
struct LabelTabTwoValueFlag { struct LabelTabTwoValueDefault __b_LabelTabTwoValueDefault;
#line 41
UWORD16 IdFlag1;

e_TYPE_OF_DB_TARGET DbIdFlag1;

e_BOOL FlagForDefault1;

UWORD16 IdFlag2;

e_TYPE_OF_DB_TARGET DbIdFlag2;

e_BOOL FlagForDefault2;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelValueString.hpp"
struct LabelValueString { struct EditableObject __b_EditableObject;
#line 41
struct TextField FValue1;

struct TextField FSep;

UWORD16 IntValue1;

e_BOOL ColAdjust;

e_BOOL StopMonitoring;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelStringTwoItems.hpp"
struct LabelStringTwoItems { struct LabelValueString __b_LabelValueString;
#line 40
UBYTE **Item1Name;
UBYTE **Item2Name;};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelStringNItems.hpp"
struct LabelStringNItems { struct LabelValueString __b_LabelValueString;
#line 41
UBYTE **ItemNames[10];

UWORD16 Size;

UWORD16 CurrentRank;};
#line 33 "..\\..\\SRC\\HMI\\HMI_LabelLanguage.hpp"
struct LabelLanguage { struct LabelValueString __b_LabelValueString;
#line 39
UBYTE **ValueName;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelMode.hpp"
struct LabelMode { struct Label __b_Label;
#line 42
struct TextField FNominalMode;
struct TextField FModifMode;
struct TextField FStateModifMode;
struct TextField FActifMode;
struct TextField FStateActifMode;
struct TextField FSep;

UBYTE **NameMode;
UBYTE **NameMode2;
UBYTE **NameMode3;
UBYTE **ActifName;
UBYTE **NoActifName;

e_MODE_TYPES ActifMode;
e_MODE_TYPES ModifMode;

e_BOOL NominalMode;
e_BOOL NameMode2Display;
e_BOOL InModification;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LabelSymbol.hpp"
struct LabelSymbol { struct EditableObject __b_EditableObject;
#line 43
struct SymbolField FSymbol;

struct TextField FTextUnderSymbol;

e_BOOL UsedTextUnderSymbol;

struct TextField FSep;};
#line 35 "..\\..\\SRC\\HMI\\HMI_Rampe.hpp"
struct Rampe { struct LabelSymbol __b_LabelSymbol;};
#line 34 "..\\..\\SRC\\HMI\\HMI_RiseTime.hpp"
struct RiseTime { struct LabelSymbol __b_LabelSymbol;};
#line 34 "..\\..\\SRC\\HMI\\HMI_AutoCalibValue.hpp"
struct AutoCalibValue { struct LabelOneValue __b_LabelOneValue;
#line 41
e_TYPE_OF_DB_TARGET BdCalibParam;


UWORD16 IdCalibParam;


UWORD16 NbSegment;


UWORD16 CurrentSegment;

const UWORD16 *SegmentList;
const e_BOOL *FloatList;};
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibValue.hpp"
struct ManualCalibValue { struct AutoCalibValue __b_AutoCalibValue;
#line 44
UWORD16 IdBlow;
UWORD16 IdMesBlow;

e_TYPE_OF_DB_TARGET BdBlow;
e_TYPE_OF_DB_TARGET BdMesBlow;

e_BOOL FirstModifOnCalibPoint; e_BOOL firstRequest;};
#line 35 "..\\..\\SRC\\HMI\\HMI_ManualCalibTwoValue.hpp"
struct ManualCalibTwoValue { struct ManualCalibValue __b_ManualCalibValue;
#line 44
struct LabelOneValue Value2;};
#line 37 "..\\..\\SRC\\HMI\\HMI_VDate.hpp"
typedef enum e_VDATE_FORMAT e_VDATE_FORMAT;
#line 43
struct VDate { struct EditableObject __b_EditableObject;
#line 51
struct TextField FSep;
struct TextField FMonth;

struct ValueField FDay;
struct ValueField FYears;

UBYTE **NameMonth;

UWORD16 Month;
UWORD16 ValueState;

UWORD16 IdParam2;
UWORD16 IdParam3;
UWORD16 IdParamReg1;
UWORD16 IdParamReg2;
UWORD16 IdParamReg3;

UWORD16 ColBackup;

e_TYPE_OF_DB_TARGET IdDbParamReg;

e_VDATE_FORMAT VDateFormat;

e_BOOL StopMonitoring;};
#line 37 "..\\..\\SRC\\HMI\\HMI_VTime.hpp"
typedef enum e_VTIME_FORMAT e_VTIME_FORMAT;
#line 47
typedef enum __Q2_5VTime8e_PERIOD __Q2_5VTime8e_PERIOD;
#line 42
struct VTime { struct EditableObject __b_EditableObject;
#line 50
e_BOOL SecVisible;

__Q2_5VTime8e_PERIOD Suffixe;

e_BOOL ForcedSuffixUpdate;


struct TextField FSep;

struct TextField FSepHours;

struct TextField FSepMin;

struct TextField FSuffixe;


struct ValueField FHours;

struct ValueField FMin;

struct ValueField FSec;


UWORD16 ValueState;


UWORD16 IdParam2;

UWORD16 IdParam3;

UWORD16 IdParamReg1;

UWORD16 IdParamReg2;

UWORD16 IdParamReg3;

e_VTIME_FORMAT VTimeFormat;

e_BOOL StopMonitoring;};
#line 40 "..\\..\\SRC\\HMI\\HMI_BlinkTable.hpp"
struct BlinkTable {
#line 46
struct DisplayObject *Table[5];

e_BOOL BlinkState;};
#line 36 "..\\..\\SRC\\HMI\\HMI_RefreshTable.hpp"
struct RefreshTable {
#line 43
struct DisplayObject **TableRefresh[2];

UWORD16 IndexEndAlway0;
UWORD16 IndexEndInsp0;
UWORD16 IndexEndExp0;
UWORD16 IndexEndXAlway0;
UWORD16 IndexEndAlway1;
UWORD16 IndexEndInsp1;
UWORD16 IndexEndExp1;
UWORD16 IndexEndXAlway1;};
#line 41 "..\\..\\SRC\\HMI\\HMI_ParameterSpy.hpp"
struct ParameterSpy {
#line 50
UWORD16 TableId[31];


e_TYPE_OF_DB_TARGET TableBd[31];


UWORD16 TableValue[31];


EventId TableEvent[31];


e_BOOL TableEventOk[31];};
#line 39 "..\\..\\SRC\\HMI\\HMI_VTimer.hpp"
struct VTimer {char __dummy;};
#line 46 "..\\..\\SRC\\HMI\\HMI_AlarmTable.hpp"
struct AlarmTable {
#line 52
AlarmEvent TableAlarm[30];


UWORD16 CurrentIndex;


UWORD16 NbAlarm;


UWORD16 MaxAction;

AlarmEvent LastAlarm;};
#line 37 "..\\..\\SRC\\HMI\\HMI_AlarmManager.hpp"
typedef enum eAMANAGER_DOUBLE eAMANAGER_DOUBLE;




struct AlarmManager {
#line 50
UWORD16 RefreshActif;
eAMANAGER_DOUBLE DoubleAlarm;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm { struct Loupe __b_Loupe;};
#line 45 "..\\..\\SRC\\HMI\\HMI_MonitoringObject.hpp"
struct MonitoringObject { struct DisplayObject __b_DisplayObject;
#line 52
UBYTE **Name;

UBYTE **Unit;


UWORD16 DivisionFactorOfValue;

e_BOOL Trigger;

e_BOOL ReverseVideo;

e_BOOL CenteredDisplay;

e_BOOL IconIsPrefered;

e_BOOL ValueReady;

e_BOOL StopMonitoring;

e_BOOL TextHeaderOn;

e_BOOL FloatDisplayOn;

e_BOOL MaxDisplayValueConfigured;

UWORD16 MaxDisplayValue;

e_BOOL SignedValue;
#line 90
e_SYMBOL Icon; e_SYMBOL IconInverseVideo;

struct SymbolField FIcon;

struct SymbolField FTrig;

struct TextField TFTitle;

struct TextField TFUnit;

struct ValueTextField VTFValue;};
#line 234 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
typedef struct tInfo tInfo;
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame { struct DisplayObject __b_DisplayObject;
#line 48
struct LoupeAlarm LoupeA;

struct Loupe *LoupeObject; struct Loupe LoupeV;

e_BOOL MonitorOn;
e_BOOL MessageOn;
e_BOOL ImpactDisplay;

tInfo *InfoTablePtr;
UWORD16 MaxObjects;
UWORD16 SpaceHeight;
UWORD16 SpaceFirstLine;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelVersion.hpp"
struct LabelVersion { struct LabelValueString __b_LabelValueString;




e_TYPE_OF_DB_TARGET DbTarget;};
#line 41 "..\\..\\SRC\\HMI\\HMI_FrameWelcome.hpp"
struct FrameWelcome { struct VFrame __b_VFrame;
#line 49
struct Label LWelcome;
struct Label LCopyRight;

struct VDate Date1;

struct VTime Time1;

struct SymbolField SFLogo; struct SymbolField SFLogo2; struct SymbolField SFLogo3;

struct SymbolField SFCompanyName;

struct LabelOneValue LOVMachine;

struct LabelTwoValue LTVPatient;

struct LabelVersion LVSVersion; struct LabelVersion LVSSupplyVersionSoft;

struct DisplayObject *RefreshTable[6];};
#line 35 "..\\..\\SRC\\HMI\\HMI_FrameConfiguration.hpp"
struct FrameConfiguration { struct VFrame __b_VFrame;
#line 43
struct Label LConfiguration;};
#line 35 "..\\..\\SRC\\HMI\\HMI_FramePreference.hpp"
struct FramePreference { struct VFrame __b_VFrame;
#line 43
struct Label LPreferences;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelSerial.hpp"
struct LabelSerial { struct LabelValueString __b_LabelValueString;};
#line 42 "..\\..\\SRC\\HMI\\HMI_FrameMaintenance.hpp"
struct FrameMaintenance { struct VFrame __b_VFrame;
#line 54
struct Label LMaintenance;

struct LabelSerial LVSSerieNumber;

struct TextField TFSup;

struct LabelVersion LVSVersionSoft;
struct LabelVersion LVSSupplyVersionSoft;

struct LabelOneValue LOVSpeed;

struct DisplayObject *RefreshTable[5];};
#line 37 "..\\..\\SRC\\HMI\\HMI_FrameHistoAno.hpp"
typedef enum e_ANO_DATE_FORMAT e_ANO_DATE_FORMAT;




typedef enum e_ANO_TIME_FORMAT e_ANO_TIME_FORMAT;

struct FrameHistoAno { struct VFrame __b_VFrame;
#line 52
struct Label LHistoAno;

e_ANO_DATE_FORMAT AlarmDateFormat;
e_ANO_TIME_FORMAT AlarmTimeFormat;};
#line 36 "..\\..\\SRC\\HMI\\HMI_FrameVoltControl.hpp"
struct FrameVoltControl { struct VFrame __b_VFrame;
#line 44
struct Label LVoltCtrl;

struct LabelOneValue LOVAlim24V;
struct LabelOneValue LOVWatchDog;
struct LabelOneValue LOVAbsPress;
struct LabelOneValue LOVIntTemp;
struct LabelOneValue LOVTemp;
struct LabelOneValue LOVTempBat;
struct LabelOneValue LOVBlowTemp;
struct SymbolField Bat;

struct DisplayObject *RefreshTable[11];};
#line 35 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueTrig.hpp"
struct LabelTwoValueTrig { struct LabelTwoValueLock __b_LabelTwoValueLock;
#line 42
struct SymbolField FTrig;

e_BOOL Trigger;
e_BOOL Float;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelAlarme.hpp"
struct LabelAlarme { struct Label __b_Label;
#line 47
UWORD16 AlarmId;};
#line 34 "..\\..\\SRC\\HMI\\HMI_BarGraph.hpp"
struct BarGraph { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 Position;


UWORD16 Value;


UWORD16 Pep;


UWORD16 Pmax;


UWORD16 firstShow;


UWORD16 IdPep;


UWORD16 IdPmax;


UWORD16 Divider;


UBYTE **NameUnit;

struct TextField TFUnit;};
#line 46 "..\\..\\SRC\\HMI\\HMI_MessageList.hpp"
struct __Q2_11MessageList8TMessage {
UWORD16 Id;
UBYTE Text[3][33];
e_BOOL Used;};

typedef struct __Q2_11MessageList8TMessage __Q2_11MessageList8TMessage;
#line 41
struct MessageList {
#line 54
__Q2_11MessageList8TMessage Messages[15];

UBYTE InListTable[11];};
#line 37 "..\\..\\SRC\\HMI\\HMI_LabelAlarmeTwoLine.hpp"
struct LabelAlarmeTwoLine { struct LabelAlarme __b_LabelAlarme;
#line 44
struct TextField FLine2;

UBYTE TextLine[3][33];

UWORD16 WBox;

struct MessageList AlarmList;};
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject { struct DisplayObject __b_DisplayObject;
#line 44
struct LabelOneValue LOVPercent;

struct LabelTwoValue LTVJauge;

struct SymbolField SFEqual;

e_BOOL JaugeAvailable;
e_BOOL BusFailure;
e_BOOL UnknownBattery;
e_BOOL CheckSupply;
e_BOOL CheckBattery;
e_BOOL ForcedDisplay;

UWORD16 CurrentDisplay;};
#line 53 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.hpp"
struct FrameVentilation { struct VFrame __b_VFrame;
#line 59
struct BarGraph BarVentil;
struct SymbolField SFValve;

struct LabelOneValue LOVPip;
struct LabelOneValue LOVVti;
struct LabelOneValue LOVVte;
struct LabelOneValue LOVVm;
struct LabelOneValue LOVR;
struct LabelOneValue LOVFIO2;
struct LabelOneValue LOVSPO2;
struct LabelOneValue LOVFuite;
struct LabelTwoValueTrig LTVIE;
struct LabelOneValueTrig LOVIT;

struct BatteryObject BOBat;

e_MODE_TYPES Mode;

e_BOOL BatVisible;
e_BOOL ValveVisible;
e_BOOL IsInhibApneaAlarm;
e_BOOL IsInhibAlarm;
e_BOOL IsCancelAlarm;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;
e_BOOL ExhalFlowUsed;

struct MessageDialog Message;

struct LabelAlarmeTwoLine LAlarme;

struct GraphicBox MonitorBox; struct GraphicBox AlarmBox;

struct DisplayObject *RefreshTable[16];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;

struct Label PressConvention;};
#line 51 "..\\..\\SRC\\HMI\\HMI_GraphicTable.hpp"
struct tGraphTableConfig {
e_BOOL CellConfig[10][6];
e_BOOL ColConfig[6];
e_BOOL LineConfig[10];};

typedef struct tGraphTableConfig tGraphTableConfig;


struct GraphicTable { struct DisplayObject __b_DisplayObject;
#line 68
UWORD16 Width;

UWORD16 Height;


UWORD16 LineNb;

UWORD16 FirstLineHeight;

UWORD16 OtherLineHeight;

UWORD32 BoldLines;


UWORD16 ColNb;

UWORD16 FirstColWidth;

UWORD16 OtherColWidth;

UBYTE **ColTitle[6];



tGraphTableConfig GraphTableConfig;};
#line 58 "..\\..\\SRC\\HMI\\HMI_FrameAlarme.hpp"
typedef enum e_ALARM_DATE_FORMAT e_ALARM_DATE_FORMAT;




typedef enum e_ALARM_TIME_FORMAT e_ALARM_TIME_FORMAT;


struct FrameAlarme { struct VFrame __b_VFrame;
#line 75
struct BatteryObject BOBat;
struct SymbolField SFValve;

struct GraphicBox MonitorBox;
struct GraphicBox AlarmBox;

struct LabelAlarmeTwoLine LAlarme;

struct TextField LastAlarmDate;

struct GraphicTable GTable;

struct LabelOneValue LOVPip;

struct LabelOneValue LOVMap;

struct LabelOneValue LOVVti;

struct LabelOneValue LOVPeep;

struct LabelOneValue LOVR;

struct LabelOneValue LOVM;

struct LabelOneValueTrig LOVIT;

struct LabelTwoValueTrig LTVIE;

e_MODE_TYPES Mode;

e_BOOL BatVisible;
e_BOOL ValveVisible;
e_BOOL IsInhibApneaAlarm;
e_BOOL IsInhibAlarm;
e_BOOL IsCancelAlarm;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;

e_BOOL MutexAlarm;

struct MessageDialog Message;

struct DisplayObject *RefreshTable[13];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;

e_ALARM_DATE_FORMAT AlarmDateFormat;

e_ALARM_TIME_FORMAT AlarmTimeFormat;};
#line 37 "..\\..\\SRC\\HMI\\HMI_FrameHistoAlarme.hpp"
struct FrameHistoAlarme { struct VFrame __b_VFrame;
#line 44
struct Label LHistoAlarm;

e_ALARM_DATE_FORMAT AlarmDateFormat;
e_ALARM_TIME_FORMAT AlarmTimeFormat;};
#line 36 "..\\..\\SRC\\HMI\\HMI_MonitoringObjectTwoValue.hpp"
struct MonitoringObjectTwoValue { struct MonitoringObject __b_MonitoringObject;
#line 43
struct ValueTextField VTFValue2;

struct TextField TFSep;

UWORD16 IdParam2;

UWORD16 Value2;

e_TYPE_OF_DB_TARGET DbTarget2;

e_BOOL FloatDisplayOn2;

e_BOOL MaxDisplayValue2Configured;

UWORD16 MaxDisplayValue2;};
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphTitle.hpp"
struct GraphTitle { struct DisplayObject __b_DisplayObject;
#line 42
struct TextField TFMode;

UBYTE **NameMode1;
UBYTE **NameMode2;

e_BOOL NameMode2Display;};
#line 39 "..\\..\\SRC\\HMI\\HMI_DataBaseLink.hpp"
struct DataBaseLink {
#line 46
UWORD16 IdParam;

e_TYPE_OF_DB_TARGET DbTarget;};
#line 36 "..\\..\\SRC\\HMI\\HMI_Scale.hpp"
typedef enum TOrientation TOrientation;

typedef enum TSide TSide;



struct Scale { struct FieldObject __b_FieldObject;
#line 48
TOrientation Orientation;

SWORD32 Width; SWORD32 Heigth; SWORD32 MajorTickSpacing; SWORD32 ZeroPos; SWORD32 FirstX;

SWORD32 Min; SWORD32 Max;

SWORD32 Pas;

e_BOOL TickVisible;
e_BOOL DoubleTick;
e_BOOL NumberVisible;
e_BOOL AutoScale;
e_BOOL Symetric;
e_BOOL FirstRefresh;

TSide NumberSide;

struct DataBaseLink DBMax;};
#line 39 "..\\..\\SRC\\HMI\\HMI_VPoint.hpp"
struct VPoint {
#line 46
SWORD16 X;

SWORD16 Y;};
#line 39 "..\\..\\SRC\\HMI\\HMI_Pen.hpp"
struct Pen {
#line 50
UWORD16 LocalCounter;


e_BOOL Dotted;


e_BOOL DottedState;};
#line 38 "..\\..\\SRC\\HMI\\HMI_CurveData.hpp"
struct CurveData {
#line 44
struct VPoint CurrentPoint;

struct VPoint PreviousPoint;

struct Scale *Ex;

struct Scale *Ey;

struct Pen LocalPen;

struct DataBaseLink DBx;

struct DataBaseLink DBy;


SWORD16 MaxX;


SWORD16 MaxY;


SWORD16 MinX;


SWORD16 MinY;

e_BOOL JustReset;
e_BOOL OutOfLimitDis;
e_BOOL CurveStart;};
#line 49 "..\\..\\SRC\\HMI\\HMI_Graph.hpp"
struct Graph { struct GraphicBox __b_GraphicBox;




struct Scale ScaleX; struct Scale ScaleY;



struct CurveData *CurveTable[1];

struct GraphControl *GControl;

struct TextField LabelX; struct TextField LabelY; struct TextField LabelOOL;

e_BOOL Freezed; e_BOOL OutOfLimit;

UWORD16 CurveNumber;

UBYTE **TUnit1;
UBYTE **TUnit2;
UBYTE **TOutOfLimit;};
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphControl.hpp"
struct GraphControl {
#line 41
struct Graph *GraphTarget; struct __T50731308 *__vptr;};
#line 34 "..\\..\\SRC\\HMI\\HMI_PerformanceGraphControl.hpp"
struct PerformanceGraphControl { struct GraphControl __b_GraphControl;
#line 40
UWORD16 RefreshTime;

UWORD16 CurrentTime;};
#line 35 "..\\..\\SRC\\HMI\\HMI_WobGraphControl.hpp"
struct WobGraphControl { struct GraphControl __b_GraphControl;
#line 42
e_VentilState VentilState;};
#line 65 "..\\..\\SRC\\HMI\\HMI_FrameGraph.hpp"
struct FrameGraph { struct VFrame __b_VFrame;
#line 73
struct BatteryObject BOBat;
struct SymbolField SFValve;

struct SymbolField SFPause;

struct Label LGraph;

struct GraphTitle GTMode;

struct Graph GSmallFlow;
struct Graph GSmallPressure;
struct Graph GSmallFlowV;
struct Graph GSmallPressureV;


struct PerformanceGraphControl PGCSmallFlow;
struct PerformanceGraphControl PGCSmallPressure;

struct CurveData CDFlow;
struct CurveData CDPressure;
struct CurveData CDFlowV;
struct CurveData CDPressureV;

struct WobGraphControl WGCSmallFlowV;
struct WobGraphControl WGCSmallPressureV;

struct MonitoringObject MoSpO2;
struct MonitoringObject MoFiO2;
struct MonitoringObject MoRate;
struct MonitoringObjectTwoValue MoTVIE;
struct MonitoringObject MoIT;
struct MonitoringObject MoVmi;
struct MonitoringObject MoFuite;
struct MonitoringObject MoVti;
struct MonitoringObject MoVte;
struct MonitoringObject MoPe;
struct MonitoringObject MoPip;
struct MonitoringObject MoPulse;
struct MonitoringObject MoTi;
struct MonitoringObject MoTe;

e_MODE_TYPES Mode;
e_MODE_TYPES PreviousMode;

e_BOOL ModeChange;

e_BOOL TriggerOn;
e_BOOL Freezed;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;
e_BOOL ExhalFlowUsed;

e_BOOL BlocExpiDetected;

e_BOOL FirstInitOk;

struct DisplayObject *RefreshTable[23];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;};
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameGraphConfig.hpp"
struct FrameGraphConfig { struct VFrame __b_VFrame;
#line 46
struct Label LGraphConfig;};
#line 40 "..\\..\\SRC\\HMI\\HMI_FrameBatteryMenu.hpp"
struct FrameBatteryMenu { struct VFrame __b_VFrame;
#line 48
struct Label LInternalBatteryMenu;

struct LabelOneValue LOVBatteryVoltage;
struct LabelOneValue LOVBatteryTemperature;
struct LabelOneValue LOVCyclesDone;
struct LabelOneValue LOVTheoreticalCapacity;
struct LabelOneValue LOVAgeing;
struct LabelOneValue LOVUnknownBat;
struct Label LNoBat;

struct LabelStringNItems LVSSupplier;

struct VDate VDDate;
struct VTime VTTime;

e_BOOL ForcedStoppedMonitoring;

struct DisplayObject *RefreshTable[6];};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValueCentered.hpp"
struct LabelTwoValueCentered { struct LabelTwoValue __b_LabelTwoValue;};
#line 45 "..\\..\\SRC\\HMI\\HMI_FrameUSB.hpp"
struct FrameUSB { struct VFrame __b_VFrame;
#line 53
struct Label LUsb;

struct LabelSerial LVSSerieNumber;

struct MessageDialog Message;

UBYTE MessageString[60];


struct LabelTwoValueCentered LOVRemainingTime;

struct Label LWait;

struct DisplayObject *RefreshTable[5];
#line 72
UBYTE MessageStorage[100];};
#line 36 "..\\..\\SRC\\HMI\\HMI_TendanceTable.hpp"
struct TendanceTable { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 FirstDisplayLine;
UWORD16 FirstDisplayCol;

UWORD16 NbOfLines;
UWORD16 NbOfCols;

UWORD16 Height;
UWORD16 Width;
UWORD16 LineHeight;

UWORD16 OddColWidth;
UWORD16 EvenColWidth;};
#line 38 "..\\..\\SRC\\HMI\\HMI_FrameTendance.hpp"
struct FrameTendance { struct VFrame __b_VFrame;
#line 46
struct Label LTendance; struct Label TableTitle;

struct TendanceTable GTable;




struct LabelOneValue LTVVt; struct LabelOneValue LTVVte; struct LabelOneValue LTVLeak; struct LabelOneValue LTVVm; struct LabelOneValue LTVFr;
struct LabelOneValue LTVPi; struct LabelOneValue LTVSpo2; struct LabelOneValue LTVFc;

struct LabelOneValue LOVSpont; struct LabelOneValue LOVContr; struct LabelOneValue LTVIA; struct LabelOneValue LTVTApnea;

struct LabelTwoValue LOVVentMoy;

struct VDate Date;

struct LabelOneValue LOVMachine;

struct LabelTwoValue LTVPatient;};
#line 42 "..\\..\\SRC\\HMI\\HMI_MessageDelayed.hpp"
struct __Q2_14MessageDelayed11FifoMessage {
UBYTE *Body;
UWORD32 Delay;};
typedef struct __Q2_14MessageDelayed11FifoMessage __Q2_14MessageDelayed11FifoMessage;
#line 38
struct MessageDelayed {
#line 49
e_BOOL Configured;

UWORD32 TimerLoad;

UWORD16 TimerId;

struct VTimer *TimerPtr;

struct MessageDialog *MessDiagPtr;

__Q2_14MessageDelayed11FifoMessage MessageFifo[6];

UWORD16 ReadIndex;

UWORD16 WriteIndex;};
#line 109 "..\\..\\SRC\\HMI\\HMI_Setup1.hpp"
struct HMI_Setup1 {
#line 135
struct FrameConfiguration FConfiguration1;
struct LabelStringTwoItems LVSModeCycl;
struct LabelStringTwoItems LVSConvTrigE;
struct LabelStringTwoItems LVSRelativePressure;
struct Label LVSBack;};
#line 132 "..\\..\\SRC\\HMI\\HMI_Controller.hpp"
typedef enum __Q2_10Controller5WayId __Q2_10Controller5WayId;




typedef enum __Q2_10Controller11LegendState __Q2_10Controller11LegendState;




typedef enum __Q2_10Controller11eSTEP_LEVEL __Q2_10Controller11eSTEP_LEVEL;
#line 581
typedef struct __T50731308 __Q2_10Controller11PController;
#line 118
struct Controller {
#line 146
struct MenuControlNode *CurrentNode;

struct MenuControlNode *UsbProcessingNode;
e_BOOL UsbCmdInProgress;

struct Loupe *CurrentLoupe;

struct MenuControlNode *ArrayNode;


UWORD16 CurrentFrame;

UWORD16 CurrentVirtualFrame;

__Q2_10Controller11LegendState LState;

e_BOOL LockOn;
e_BOOL UsbLock;
e_BOOL UsbKeyDetected;
e_BOOL ModeChangeOn;
e_BOOL ModifNodeOn;
e_BOOL PSupportNull;
e_BOOL IESelected;
e_BOOL TrigEPosSelected;
e_BOOL ValveDetected;
e_BOOL ImpactDisplay;
e_BOOL OnWait;
e_BOOL DifferMonitoringStart;
e_BOOL MonitoringMode;
e_BOOL ExhalFlowUsed;
e_BOOL VentButtonOn;
e_BOOL BuzzerVoltRefreshReq;
e_BOOL HighPressAlarmToBeRemoved;
e_BOOL LeakTestRunning;

UWORD16 LeakTestTimerCount;

struct MessageDialog TopMessage;

struct BlinkTable BTable;

struct RefreshTable RTable;

struct AlarmTable ATable;

struct ParameterSpy PSpy;

struct AlarmManager AManager;
e_BOOL IsDoubleMessageTimerStarted;

struct VTimer Timer;

struct DisplayObject *RefreshTableAlarm[12];
struct DisplayObject *RefreshTableMaintenance[12];
struct DisplayObject *RefreshTableConfig[6];
struct DisplayObject *RefreshTableVolt[5];

e_MODE_TYPES CurrentMode;

e_MODE_TYPES ConsultMode;

bool EraseFlag;

UWORD16 LastBrightness;
UWORD16 LastSoundLevel;
UWORD16 MemoSoundLevel;


struct DisplayObject GhostObject;


struct FrameWelcome FWelcome;


struct FrameUSB FUsb;
struct MessageDelayed UsbDelayed;
struct Label LStopUsb;
#line 228
struct LabelStringTwoItems LVSEraseKey;
struct LabelStringTwoItems LVSContRecord;
#line 235
struct LabelOneValueFlag LOVFTransfMonit;


struct LabelOneValueFlag LOVFTransfTrend;

UWORD16 PreviousErrorCode;

struct FrameTendance FTendance;
struct Label LRTendance;


struct FrameConfiguration FConfiguration;
struct Label LMaintenance; struct Label LRVentil;
struct Label LNextPage;
struct VTime VTConf;
struct VDate VDConf;
struct LabelLanguage LVSLanguage;
struct LabelStringTwoItems LVSVoluntaryStopAlarm;

struct LabelStringNItems LVSPressureUnit;
struct LabelStringTwoItems LVSAlarmTone;
struct LabelTwoValue LOVPatientHrs;
struct LabelOneValue LOVMachineHrs;
struct LabelStringTwoItems LVSSResetPatientHrs;
struct LabelOneValueFourDefault LOVFDAjustKeyTone;
struct LabelStringTwoItems LVSSRestoreDefaultSettings;


struct FramePreference FPreference;
struct LabelStringTwoItems LVSScreenSave; struct LabelStringTwoItems LVSKeySound; struct LabelStringTwoItems LVSWaveformDisplay;
struct LabelStringTwoItems LVSBaroCorrector; struct LabelStringTwoItems LVSApneaAlarm;
struct LabelStringTwoItems LVSPediatricCircuit;
struct LabelProgressBar LPBSoundLevel; struct LabelProgressBar LPBBrightness;
struct Label LRVentilMenu; struct Label LCurveConfiguration; struct Label LTrendMenu;
struct LabelOneValueFlag LOVFDisconnectionAlarm;


struct FrameCircuitCheck *FCircuitCheck;
struct Label LCircuitLeak;


struct FrameMaintenance FMaintenance;
struct LabelOneValueDbRT LOVPwmBlower;
struct Label LHistoAnom; struct Label LVoltCtrl; struct Label LSensorCal; struct Label LRConfMaint;
struct AutoCalibValue LOVFlowExp; struct AutoCalibValue LOVValvePressure;
struct ManualCalibValue LOVFlowIns; struct ManualCalibValue LOVFlowO2; struct ManualCalibValue LOVPressO2; struct ManualCalibValue LOVFiO2Concent;
struct ManualCalibTwoValue LOVPatientPressure;


struct FrameHistoAno FHistoAno;
struct Label LRMaintAno;


struct FrameVoltControl FVoltControl;
struct Label LRMaintTension;
struct Label LOVBuzzSec;
struct Label LBackupBuzzer;
struct Label LBatteryMenu;
struct Label LRMaintBattery;

struct LabelOneValue LOVBuzzerVoltage;
struct LabelOneValue LOVBuzz;
struct LabelOneValue LOVTempBat;


struct FrameBatteryMenu FBatteryMenu;


struct FrameVentilation FVentilation;
struct LabelStringTwoItems LSTVChgtModeV;
struct LabelStringTwoItems LSTVSoupir;

struct LabelMode LModeVent;

struct LabelOneValue LOVVT;
struct LabelOneValue LOVPi;
struct LabelOneValue LOVPControl;
struct LabelOneValue LOVPSupport;
struct LabelOneValue LOVPi2;
struct LabelOneValue LOVFVaci;
struct LabelOneValue LOVFRMini;
struct LabelOneValue LOVIT;
struct LabelOneValue LOVInspTime;
struct LabelOneValue LOVPiMax;
struct LabelOneValue LOVCptSoupir;



struct LabelOneValue LOVFiO2;


struct LabelOneValueSign LOVSVtSoupir;
struct LabelOneValueSignFlag LOVSTrigE;
struct LabelOneValueFlag LOVTrigE;

struct Label LIE;

struct LabelOneValueThreeDefault LOVTDSupport;

struct LabelOneValueFlag LOVPe;
struct LabelOneValueFlag LOVApnee;
struct LabelOneValueFlag LOVVTCible;
struct LabelOneValueFlag LOVFSecu;
struct LabelStringNItems LOVTrigI;

struct RiseTime LOVPente;


struct Rampe LOVRampe;



struct Label LPreferences;


struct FrameAlarme FAlarme;

struct LabelStringTwoItems LOVChgtModeA;

struct Label LHistoAlarm;

struct LabelMode LModeAlarm;

struct LabelTabOneValueFlag LOVFrCMin;
struct LabelTabOneValueFlag LTOVFuiteLMin;


struct LabelTabTwoValueTwoLabels LOVPiMbar;

struct LabelTabTwoValueFlag LOVVteMl;
struct LabelTabTwoValueFlag LOVVtiMl;
struct LabelTabTwoValueFlag LTTVTiS;
struct LabelTabTwoValueFlag LTTVSpO2;
struct LabelTabTwoValueFlag LTTVFiO2;

struct LabelStringTwoItems LSTICalibQExp;
struct LabelStringTwoItems LSTICalibFiO2;


struct FrameHistoAlarme FHistoAlarme;
struct Label LRAlarmeA;
struct Label LCancelledAlarm;


struct FrameGraph FGraph;


struct FrameGraphConfig FGraphConfig;

struct LabelOneValueDefault LOVPMax;
struct LabelOneValueDefault LOVQMax;
struct LabelOneValueDefault LOVVtMax;
struct LabelOneValueDefault LOVTMax;

struct LabelStringTwoItems LVSVisu;
struct LabelStringTwoItems LVSRepresentation;

struct Label LRGraphPref;

UWORD16 SegmentNumber;
e_BOOL StartCalib;
e_BOOL StartVerif;

e_BOOL LongUpKeyDetected;
e_BOOL LongDownKeyDetected;
__Q2_10Controller11eSTEP_LEVEL StepLevel;

UWORD16 SaveBuzzerVoltParamId;
e_TYPE_OF_DB_TARGET SaveBuzzerVoltDbId;

struct MessageDialog BottomMessage;};
#line 40 "..\\..\\SRC\\HMI\\HMI_MenuControlNode.hpp"
struct MenuControlNode {
#line 49
e_BOOL Visible;
e_BOOL Lock;

struct DisplayObject *Object;

struct EventNode *Param;};
#line 40 "..\\..\\SRC\\HMI\\HMI_EventNode.hpp"
struct EventNode {
#line 47
UWORD16 Id;
UWORD16 LinkedMenuControlNodeId;

UWORD16 IdNodeOnUp;
UWORD16 IdNodeOnDown;
UWORD16 IdNodeOnTimeOut;
UWORD16 IdNodeOnValid;
UWORD16 IdNodeOnLongValid;
UWORD16 IdNodeOnMonitor;
#line 69
__Q2_10Controller11PController OnButtonUp;
__Q2_10Controller11PController OnButtonDown;
__Q2_10Controller11PController OnTimeOut;
__Q2_10Controller11PController OnButtonValid;
__Q2_10Controller11PController OnButtonMonitor;
__Q2_10Controller11PController OnButtonLongValid;};
#line 116 "..\\..\\SRC\\GENERAL\\Structure.h"
struct t_TEST_EEPROM_DB {
UWORD16 mini;
UWORD16 maxi;
UWORD16 step;
UWORD16 defvalue;};
typedef struct t_TEST_EEPROM_DB t_TEST_EEPROM_DB;
#line 2398 "..\\..\\SRC\\HMI\\HMI_Controller.cpp"
typedef struct __T50731308 PtrFunct__GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId__L2590; extern void *__nw__FUi(unsigned);
#line 26 "..\\..\\SRC\\DATABASE\\DB_WriteDataInEepAndRam.h"
extern void EEP_FIFO_PushOneData(UWORD16 xhuge *, e_EEP_ACCESS_STATE);
#line 102 "..\\..\\SRC\\HMI\\HMI_Controller.hpp"
extern void It_watchdog(void);
#line 821
extern e_DRV_EVENT_STATE DRV_EVENT_TransStateFlash(void);
#line 28 "..\\..\\SRC\\GENERAL\\stdfile.h"
extern int sprintf(char *, const char *, ...);
#line 1808 "..\\..\\SRC\\DATABASE_SETTINGS\\DB_IhmAccessParaDataBase.h"
extern void DB_WriteDataInEepAndRam(UWORD16 xhuge *, UWORD16);
#line 57 "..\\..\\SRC\\HMI\\HMI_Controller.cpp"
extern void DB_ComputeBreathTimingRatios(void);
#line 67 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
extern void SetIdParam__10MenuObjectFUi(struct MenuObject *const, UWORD16);
extern UWORD16 GetIdParam__10MenuObjectFv(struct MenuObject *const);

extern void SetDbTarget__10MenuObjectF19e_TYPE_OF_DB_TARGET(struct MenuObject *const, e_TYPE_OF_DB_TARGET);
extern e_TYPE_OF_DB_TARGET GetDbTarget__10MenuObjectFv(struct MenuObject *const);
#line 81 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
extern struct DisplayObject *__ct__13DisplayObjectFv(struct DisplayObject *const);


extern UWORD16 GetLine__13DisplayObjectFv(struct DisplayObject *const);
#line 90
extern UWORD16 GetPage__13DisplayObjectFv(struct DisplayObject *const);
#line 100
extern void RefreshEnable__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);

extern e_BOOL IsVisible__13DisplayObjectFv(struct DisplayObject *const);
extern e_BOOL IsRefreshObject__13DisplayObjectFv(struct DisplayObject *const);
#line 85 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
extern UWORD16 GetNumFrame__5ToolsSFUi(UWORD16);

extern e_BOOL IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(UWORD16, e_MODE_TYPES);


extern e_BOOL IsLockWhithLock__5ToolsSFUi(UWORD16);

extern UWORD16 GetOrderWithMode__5ToolsSFUi12e_MODE_TYPES(UWORD16, e_MODE_TYPES);

extern UWORD16 GetIdFromOrder__5ToolsSFUi12e_MODE_TYPESN21(UWORD16, e_MODE_TYPES, UWORD16, UWORD16);




extern void SwitchDisplayConfigForOneMode__5ToolsSFUiT112e_MODE_TYPES(UWORD16, UWORD16, e_MODE_TYPES);



extern void SwitchDisplayConfigForAllModes__5ToolsSFUiT1(UWORD16, UWORD16);




extern e_BOOL IsModifyNode__5ToolsSFUi(UWORD16);
#line 120
extern UWORD16 GetStringPixelSize__5ToolsSFPUcUi(UBYTE *, UWORD16);
#line 134
extern void SetFontConfigForLang__5ToolsSFUi(UWORD16);



extern void ShortBipRequest__5ToolsSFv(void);
#line 79 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
extern struct MessageDialog *__ct__13MessageDialogFv(struct MessageDialog *const);

extern void SetMessage__13MessageDialogFPUc8e_SYMBOL(struct MessageDialog *const, UBYTE *, e_SYMBOL);
#line 88 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
extern void SetValue__5LoupeFPUc(struct Loupe *const, UBYTE *);




extern void SetMessage__5LoupeFPUc(struct Loupe *const, UBYTE *);
#line 99
extern void DisplayMessage__5LoupeFi(struct Loupe *const, e_BOOL);
#line 72 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
extern struct Label *__ct__5LabelFv(struct Label *const);
#line 88
extern void SetName__5LabelFPPUc(struct Label *const, UBYTE **);
#line 101
extern UWORD16 GetFontLabel__5LabelFv(struct Label *const);
#line 83 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
extern struct LabelOneValue *__ct__13LabelOneValueFv(struct LabelOneValue *const);
#line 147
extern void SetNameUnit__13LabelOneValueFPPUc(struct LabelOneValue *const, UBYTE **);
extern UBYTE *GetNameUnit__13LabelOneValueFv(struct LabelOneValue *const);
#line 160
extern e_BOOL IsStopMonitoring__13LabelOneValueFv(struct LabelOneValue *const);
#line 50 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSign.hpp"
extern struct LabelOneValueSign *__ct__17LabelOneValueSignFv(struct LabelOneValueSign *const);
#line 55 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDbRT.hpp"
extern struct LabelOneValueDbRT *__ct__17LabelOneValueDbRTFv(struct LabelOneValueDbRT *const);
#line 61 "..\\..\\SRC\\HMI\\HMI_LabelOneValueSignFlag.hpp"
extern struct LabelOneValueSignFlag *__ct__21LabelOneValueSignFlagFv(struct LabelOneValueSignFlag *const);
#line 59 "..\\..\\SRC\\HMI\\HMI_LabelOneValueDefault.hpp"
extern struct LabelOneValueDefault *__ct__20LabelOneValueDefaultFv(struct LabelOneValueDefault *const);
#line 69 "..\\..\\SRC\\HMI\\HMI_LabelOneValueThreeDefault.hpp"
extern struct LabelOneValueThreeDefault *__ct__25LabelOneValueThreeDefaultFv(struct LabelOneValueThreeDefault *const);
#line 79 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFourDefault.hpp"
extern struct LabelOneValueFourDefault *__ct__24LabelOneValueFourDefaultFv(struct LabelOneValueFourDefault *const);
#line 61 "..\\..\\SRC\\HMI\\HMI_LabelOneValueFlag.hpp"
extern struct LabelOneValueFlag *__ct__17LabelOneValueFlagFv(struct LabelOneValueFlag *const);
#line 69
extern UWORD16 GetIdFlag__17LabelOneValueFlagFv(struct LabelOneValueFlag *const);


extern e_TYPE_OF_DB_TARGET GetDbIdFlag__17LabelOneValueFlagFv(struct LabelOneValueFlag *const);
#line 69 "..\\..\\SRC\\HMI\\HMI_LabelProgressBar.hpp"
extern struct LabelProgressBar *__ct__16LabelProgressBarFv(struct LabelProgressBar *const);
#line 89
extern e_BOOL GetBipRequest__16LabelProgressBarFv(struct LabelProgressBar *const);
extern void SetBipRequest__16LabelProgressBarFi(struct LabelProgressBar *const, e_BOOL);
#line 79 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
extern struct LabelTwoValue *__ct__13LabelTwoValueFv(struct LabelTwoValue *const);
#line 151 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValue.hpp"
extern void ForceRefresh__16LabelTabOneValueFv(struct LabelTabOneValue *const);
#line 60 "..\\..\\SRC\\HMI\\HMI_LabelTabOneValueFlag.hpp"
extern struct LabelTabOneValueFlag *__ct__20LabelTabOneValueFlagFv(struct LabelTabOneValueFlag *const);
#line 61 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueTwoLabels.hpp"
extern struct LabelTabTwoValueTwoLabels *__ct__25LabelTabTwoValueTwoLabelsFv(struct LabelTabTwoValueTwoLabels *const);
#line 72
extern void SetNameLabel2__25LabelTabTwoValueTwoLabelsFPPUc(struct LabelTabTwoValueTwoLabels *const, UBYTE **);
extern UBYTE *GetNameLabel2__25LabelTabTwoValueTwoLabelsFv(struct LabelTabTwoValueTwoLabels *const);

extern void SetLabel2ColOffset__25LabelTabTwoValueTwoLabelsFUi(struct LabelTabTwoValueTwoLabels *const, UWORD16);
extern void SetLabel2LineOffset__25LabelTabTwoValueTwoLabelsFUi(struct LabelTabTwoValueTwoLabels *const, UWORD16);
#line 67 "..\\..\\SRC\\HMI\\HMI_LabelTabTwoValueFlag.hpp"
extern struct LabelTabTwoValueFlag *__ct__20LabelTabTwoValueFlagFv(struct LabelTabTwoValueFlag *const);
#line 70 "..\\..\\SRC\\HMI\\HMI_LabelValueString.hpp"
extern void SetValue1__16LabelValueStringFPUc(struct LabelValueString *const, UBYTE *);
extern UBYTE *GetValue1__16LabelValueStringFv(struct LabelValueString *const);

extern void SetIntValue1__16LabelValueStringFUi(struct LabelValueString *const, UWORD16);
extern UWORD16 GetIntValue1__16LabelValueStringFv(struct LabelValueString *const);
#line 90
extern UWORD16 GetFontValue1__16LabelValueStringFv(struct LabelValueString *const);
#line 57 "..\\..\\SRC\\HMI\\HMI_LabelStringTwoItems.hpp"
extern struct LabelStringTwoItems *__ct__19LabelStringTwoItemsFv(struct LabelStringTwoItems *const);
#line 60 "..\\..\\SRC\\HMI\\HMI_LabelStringNItems.hpp"
extern struct LabelStringNItems *__ct__17LabelStringNItemsFv(struct LabelStringNItems *const);
#line 68
extern UBYTE **GetItem__17LabelStringNItemsFUi(struct LabelStringNItems *const, UWORD16);
#line 55 "..\\..\\SRC\\HMI\\HMI_LabelLanguage.hpp"
extern struct LabelLanguage *__ct__13LabelLanguageFv(struct LabelLanguage *const);
#line 76 "..\\..\\SRC\\HMI\\HMI_LabelMode.hpp"
extern struct LabelMode *__ct__9LabelModeFv(struct LabelMode *const);
#line 89
extern void SetActifMode__9LabelModeF12e_MODE_TYPES(struct LabelMode *const, e_MODE_TYPES);


extern void SetModifMode__9LabelModeF12e_MODE_TYPES(struct LabelMode *const, e_MODE_TYPES);
extern e_MODE_TYPES GetModifMode__9LabelModeFv(struct LabelMode *const);
#line 101
extern void SetNameMode2Display__9LabelModeFi(struct LabelMode *const, e_BOOL);
extern e_BOOL IsNameMode2Display__9LabelModeFv(struct LabelMode *const);




extern void ShowNominalView__9LabelModeFv(struct LabelMode *const);
extern void ShowMultiModeView__9LabelModeFv(struct LabelMode *const);
#line 56 "..\\..\\SRC\\HMI\\HMI_Rampe.hpp"
extern struct Rampe *__ct__5RampeFv(struct Rampe *const);
#line 55 "..\\..\\SRC\\HMI\\HMI_RiseTime.hpp"
extern struct RiseTime *__ct__8RiseTimeFv(struct RiseTime *const);
#line 69 "..\\..\\SRC\\HMI\\HMI_AutoCalibValue.hpp"
extern struct AutoCalibValue *__ct__14AutoCalibValueFv(struct AutoCalibValue *const);
#line 89
extern void SetNbSegment__14AutoCalibValueFUi(struct AutoCalibValue *const, UWORD16);
#line 95
extern void StopModifModeConsult__14AutoCalibValueFv(struct AutoCalibValue *const);
extern void StartModifModeConsult__14AutoCalibValueFv(struct AutoCalibValue *const);
#line 106
extern e_BOOL ModifNextValueConsult__14AutoCalibValueFv(struct AutoCalibValue *const);
#line 64 "..\\..\\SRC\\HMI\\HMI_ManualCalibValue.hpp"
extern struct ManualCalibValue *__ct__16ManualCalibValueFv(struct ManualCalibValue *const);
#line 58 "..\\..\\SRC\\HMI\\HMI_ManualCalibTwoValue.hpp"
extern struct ManualCalibTwoValue *__ct__19ManualCalibTwoValueFv(struct ManualCalibTwoValue *const);



extern void SetNameUnit2__19ManualCalibTwoValueFPPUc(struct ManualCalibTwoValue *const, UBYTE **);
#line 95 "..\\..\\SRC\\HMI\\HMI_VDate.hpp"
extern struct VDate *__ct__5VDateFv(struct VDate *const);
#line 104 "..\\..\\SRC\\HMI\\HMI_VTime.hpp"
extern struct VTime *__ct__5VTimeFv(struct VTime *const);
#line 64 "..\\..\\SRC\\HMI\\HMI_BlinkTable.hpp"
extern struct BlinkTable *__ct__10BlinkTableFv(struct BlinkTable *const);

extern void AddElement__10BlinkTableFP13DisplayObject(struct BlinkTable *const, struct DisplayObject *);
extern void RemoveElement__10BlinkTableFP13DisplayObject(struct BlinkTable *const, struct DisplayObject *);

extern void Blink__10BlinkTableFv(struct BlinkTable *const);
#line 68 "..\\..\\SRC\\HMI\\HMI_RefreshTable.hpp"
extern struct RefreshTable *__ct__12RefreshTableFv(struct RefreshTable *const);
extern void SetTable__12RefreshTableFPP13DisplayObject(struct RefreshTable *const, struct DisplayObject **);



extern void ResetTable__12RefreshTableFv(struct RefreshTable *const);



extern void MakeRefresh__12RefreshTableFv(struct RefreshTable *const);

extern void MakeRefreshInsp__12RefreshTableFv(struct RefreshTable *const);

extern void MakeRefreshExp__12RefreshTableFv(struct RefreshTable *const);
#line 78 "..\\..\\SRC\\HMI\\HMI_ParameterSpy.hpp"
extern struct ParameterSpy *__ct__12ParameterSpyFv(struct ParameterSpy *const);
#line 96
extern void Refresh__12ParameterSpyFv(struct ParameterSpy *const);
#line 60 "..\\..\\SRC\\HMI\\HMI_VTimer.hpp"
extern struct VTimer *__ct__6VTimerFv(struct VTimer *const);

extern void StartTimer__6VTimerFUlUii(struct VTimer *const, UWORD32, UWORD16, e_BOOL);



extern void StopTimer__6VTimerFUi(struct VTimer *const, UWORD16);
#line 81 "..\\..\\SRC\\HMI\\HMI_AlarmTable.hpp"
extern struct AlarmTable *__ct__10AlarmTableFv(struct AlarmTable *const);




extern UWORD16 GetNbAlarm__10AlarmTableFv(struct AlarmTable *const);
#line 93
extern AlarmEvent *GetAlarmFromId__10AlarmTableFUi(struct AlarmTable *const, UWORD16);
#line 100
extern AlarmEvent *GetLastAlarm__10AlarmTableFv(struct AlarmTable *const);


extern void AddElement__10AlarmTableFP10AlarmEventi(struct AlarmTable *const, AlarmEvent *, e_BOOL);

extern void RemoveElement__10AlarmTableFP10AlarmEventi(struct AlarmTable *const, AlarmEvent *, e_BOOL);

extern void Refresh__10AlarmTableFv(struct AlarmTable *const);
#line 67 "..\\..\\SRC\\HMI\\HMI_AlarmManager.hpp"
extern struct AlarmManager *__ct__12AlarmManagerFv(struct AlarmManager *const);
extern e_BOOL IsAlarmValid__12AlarmManagerFP10AlarmEvent(struct AlarmManager *const, AlarmEvent *);
extern e_BOOL IsDoubleAlarmActive__12AlarmManagerFv(struct AlarmManager *const);
extern void CallRefresh__12AlarmManagerFv(struct AlarmManager *const);
#line 82 "..\\..\\SRC\\HMI\\HMI_FrameWelcome.hpp"
extern struct FrameWelcome *__ct__12FrameWelcomeFv(struct FrameWelcome *const);
#line 58 "..\\..\\SRC\\HMI\\HMI_FrameConfiguration.hpp"
extern struct FrameConfiguration *__ct__18FrameConfigurationFv(struct FrameConfiguration *const);
#line 59 "..\\..\\SRC\\HMI\\HMI_FramePreference.hpp"
extern struct FramePreference *__ct__15FramePreferenceFv(struct FramePreference *const);
#line 73 "..\\..\\SRC\\HMI\\HMI_FrameCircuitCheck.hpp"
extern struct FrameCircuitCheck *GetInstance__17FrameCircuitCheckSFv(void);
#line 81 "..\\..\\SRC\\HMI\\HMI_FrameMaintenance.hpp"
extern struct FrameMaintenance *__ct__16FrameMaintenanceFv(struct FrameMaintenance *const);
#line 77 "..\\..\\SRC\\HMI\\HMI_FrameHistoAno.hpp"
extern struct FrameHistoAno *__ct__13FrameHistoAnoFv(struct FrameHistoAno *const);
#line 85
extern e_BOOL SeekEnd__13FrameHistoAnoFv(struct FrameHistoAno *const);
#line 71 "..\\..\\SRC\\HMI\\HMI_FrameVoltControl.hpp"
extern struct FrameVoltControl *__ct__16FrameVoltControlFv(struct FrameVoltControl *const);


extern void IsBatVisible__16FrameVoltControlFv(struct FrameVoltControl *const);
extern void SetSupplyBusFailure__16FrameVoltControlFiT1(struct FrameVoltControl *const, e_BOOL, e_BOOL);
#line 118 "..\\..\\SRC\\HMI\\HMI_FrameVentilation.hpp"
extern struct FrameVentilation *__ct__16FrameVentilationFv(struct FrameVentilation *const);


extern void ShowTrigger__16FrameVentilationFv(struct FrameVentilation *const);
extern void HideTrigger__16FrameVentilationFv(struct FrameVentilation *const);
#line 134
extern void SetBatVisible__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);




extern void ShowBatAndValve__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
extern void ShowPressConvention__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
extern void SetPressConvention__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);


extern void SetInibOk__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
extern void ShowInibOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
extern void SetInhibApneaOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
extern void ShowInhibApneaOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
extern void SetCancelOk__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
extern void ShowCancelOk__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);
extern void SetExhalFlowUsed__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);
#line 158
extern void ShowMessage__16FrameVentilationFiPUc8e_SYMBOL(struct FrameVentilation *const, e_BOOL, UBYTE *, e_SYMBOL);



extern void ShowCurrentAlarme__16FrameVentilationFiUi(struct FrameVentilation *const, e_BOOL, UWORD16);

extern void HideCurrentAlarme__16FrameVentilationFv(struct FrameVentilation *const);

extern void RemoveAlarm__16FrameVentilationFUi(struct FrameVentilation *const, UWORD16);

extern void RemoveAllAlarms__16FrameVentilationFv(struct FrameVentilation *const);
#line 174
extern void SetIESelected__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);

extern void SetValve__16FrameVentilationFiT1(struct FrameVentilation *const, e_BOOL, e_BOOL);

extern void Fio2MonitorEnabled__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);

extern void Spo2MonitorEnabled__16FrameVentilationFi(struct FrameVentilation *const, e_BOOL);

extern void SetPressureUnit__16FrameVentilationFPPUc(struct FrameVentilation *const, UBYTE **);
#line 154 "..\\..\\SRC\\HMI\\HMI_FrameAlarme.hpp"
extern struct FrameAlarme *__ct__11FrameAlarmeFv(struct FrameAlarme *const);



extern void ShowTrigger__11FrameAlarmeFv(struct FrameAlarme *const);
extern void HideTrigger__11FrameAlarmeFv(struct FrameAlarme *const);

extern void ShowBatAndValve__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);

extern void SetTableSize__11FrameAlarmeFUc(struct FrameAlarme *const, UBYTE);
extern void SetBoldLineOfTable__11FrameAlarmeFUi(struct FrameAlarme *const, UWORD16);
extern void ClearBoldLinesOfTable__11FrameAlarmeFv(struct FrameAlarme *const);

extern void ShowTable__11FrameAlarmeFv(struct FrameAlarme *const);
extern void HideTable__11FrameAlarmeFv(struct FrameAlarme *const);
extern UWORD16 GetSpacingOfTable__11FrameAlarmeFv(struct FrameAlarme *const);
extern UWORD16 GetFirstLineOfTable__11FrameAlarmeFv(struct FrameAlarme *const);
extern UWORD16 GetPatientColOfTable__11FrameAlarmeFv(struct FrameAlarme *const);
extern UWORD16 GetPatientWidthOfTable__11FrameAlarmeFv(struct FrameAlarme *const);
extern void ShowCurrentAlarme__11FrameAlarmeFiUi(struct FrameAlarme *const, e_BOOL, UWORD16);
extern void HideCurrentAlarme__11FrameAlarmeFv(struct FrameAlarme *const);
extern void RemoveAlarm__11FrameAlarmeFUi(struct FrameAlarme *const, UWORD16);
extern void RemoveAllAlarms__11FrameAlarmeFv(struct FrameAlarme *const);
extern void ShowLastAlarme__11FrameAlarmeFP10AlarmEvent(struct FrameAlarme *const, AlarmEvent *);
extern void ShowMessage__11FrameAlarmeFiPUc8e_SYMBOL(struct FrameAlarme *const, e_BOOL, UBYTE *, e_SYMBOL);
extern void SetInibOk__11FrameAlarmeFiT1(struct FrameAlarme *const, e_BOOL, e_BOOL);
extern void ShowInibOk__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);
extern void SetInhibApneaOk__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);
extern void ShowInhibApneaOk__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);
extern void SetCancelOk__11FrameAlarmeFiT1(struct FrameAlarme *const, e_BOOL, e_BOOL);
extern void ShowCancelOk__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);
#line 203
extern void SetBatVisible__11FrameAlarmeFiT1(struct FrameAlarme *const, e_BOOL, e_BOOL);
#line 210
extern void SetIESelected__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);

extern void SetValve__11FrameAlarmeFiT1(struct FrameAlarme *const, e_BOOL, e_BOOL);

extern void Fio2MonitorEnabled__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);

extern void Spo2MonitorEnabled__11FrameAlarmeFi(struct FrameAlarme *const, e_BOOL);

extern void SetPressureUnit__11FrameAlarmeFPPUc(struct FrameAlarme *const, UBYTE **);
#line 69 "..\\..\\SRC\\HMI\\HMI_FrameHistoAlarme.hpp"
extern struct FrameHistoAlarme *__ct__16FrameHistoAlarmeFv(struct FrameHistoAlarme *const);
#line 77
extern e_BOOL SeekEnd__16FrameHistoAlarmeFv(struct FrameHistoAlarme *const);
#line 59 "..\\..\\SRC\\HMI\\HMI_DatabaseAccess.hpp"
extern e_BOOL IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);



extern e_BOOL DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);



extern e_BOOL ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);
#line 75
extern e_BOOL WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);
#line 164 "..\\..\\SRC\\HMI\\HMI_FrameGraph.hpp"
extern struct FrameGraph *__ct__10FrameGraphFv(struct FrameGraph *const);


extern void ShowTrigger__10FrameGraphFv(struct FrameGraph *const);
extern void HideTrigger__10FrameGraphFv(struct FrameGraph *const);
extern void FreezeMonitoring__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
extern void RefreshMode__10FrameGraphFv(struct FrameGraph *const);
extern void IsBatVisible__10FrameGraphFv(struct FrameGraph *const);
extern void IsInibAlarmVisible__10FrameGraphFv(struct FrameGraph *const);
extern void IsCancelAlarmVisible__10FrameGraphFv(struct FrameGraph *const);
extern void IsInhibApneaAlarmVisible__10FrameGraphFv(struct FrameGraph *const);
#line 187
extern void SetIESelected__10FrameGraphFi(struct FrameGraph *const, e_BOOL);

extern void SetValve__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);

extern void SetBlocExpi__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);


extern void Fio2MonitorEnabled__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);

extern void Spo2MonitorEnabled__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);

extern void SetPressureUnit__10FrameGraphFPPUc(struct FrameGraph *const, UBYTE **);

extern void SetNameMode2Display__10FrameGraphFi(struct FrameGraph *const, e_BOOL);
#line 208
extern void SetExhalFlowUsed__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 62 "..\\..\\SRC\\HMI\\HMI_FrameGraphConfig.hpp"
extern struct FrameGraphConfig *__ct__16FrameGraphConfigFv(struct FrameGraphConfig *const);
#line 85 "..\\..\\SRC\\HMI\\HMI_FrameBatteryMenu.hpp"
extern struct FrameBatteryMenu *__ct__16FrameBatteryMenuFv(struct FrameBatteryMenu *const);
extern void BadSupplyCheck__16FrameBatteryMenuFi(struct FrameBatteryMenu *const, e_BOOL);
extern void SetSupplyBusFailure__16FrameBatteryMenuFiT1(struct FrameBatteryMenu *const, e_BOOL, e_BOOL);
#line 87 "..\\..\\SRC\\HMI\\HMI_FrameUSB.hpp"
extern struct FrameUSB *__ct__8FrameUSBFv(struct FrameUSB *const);
#line 98
extern e_BOOL ManageErrorCode__8FrameUSBFUiPPUc(struct FrameUSB *const, UWORD16, UBYTE **);
extern void GetUsbProcessingMessage__8FrameUSBFiPPUc(struct FrameUSB *const, e_BOOL, UBYTE **);




extern void AnimateProcessingDots__8FrameUSBFi(struct FrameUSB *const, e_BOOL);
#line 79 "..\\..\\SRC\\HMI\\HMI_FrameTendance.hpp"
extern struct FrameTendance *__ct__13FrameTendanceFv(struct FrameTendance *const);

extern void SetPressureUnit__13FrameTendanceFPPUc(struct FrameTendance *const, UBYTE **);
#line 98 "..\\..\\SRC\\HMI\\HMI_MessageDelayed.hpp"
extern struct MessageDelayed *__ct__14MessageDelayedFv(struct MessageDelayed *const);
#line 104
extern void TimerHandler__14MessageDelayedFi(struct MessageDelayed *const, e_BOOL);

extern UWORD16 AddMessageToQueue__14MessageDelayedFPUcUli(struct MessageDelayed *const, UBYTE *, UWORD32, e_BOOL);



extern UWORD16 GetNbOfMessagesInQueue__14MessageDelayedFv(struct MessageDelayed *const);
#line 145 "..\\..\\SRC\\HMI\\HMI_Setup1.hpp"
extern struct HMI_Setup1 *GetInstance__10HMI_Setup1SFv(void);
#line 2395 "..\\..\\SRC\\HMI\\HMI_Controller.cpp"
extern struct MenuControlNode *GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(struct Controller *const, struct MenuControlNode *, __Q2_10Controller5WayId);
#line 2359
extern struct MenuControlNode *FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(struct Controller *const, struct MenuControlNode *, __Q2_10Controller5WayId);
#line 2303
extern void MoveToOtherNode__10ControllerFQ2_10Controller5WayId(struct Controller *const, __Q2_10Controller5WayId);
#line 3328
extern void ManageLegendState__10ControllerFQ2_10Controller11LegendState(struct Controller *const, __Q2_10Controller11LegendState);
#line 4024
extern void GoToTopBottomFrame__10ControllerFUiQ2_10Controller5WayId(struct Controller *const, UWORD16, __Q2_10Controller5WayId);
#line 5260
extern void SendNodeModify__10ControllerFUii(struct Controller *const, UWORD16, e_BOOL);
#line 5553
extern void ChangeNameMode__10ControllerFi(struct Controller *const, e_BOOL);
#line 4003
extern void ShowBattery__10ControllerFi(struct Controller *const, e_BOOL);
#line 7507
extern void ShowTempBattery__10ControllerFi(struct Controller *const, e_BOOL);
#line 487
extern void SetHighPressAlarmToBeRemoved__10ControllerFi(struct Controller *const, e_BOOL);




extern e_BOOL HasHighPressAlarmToBeRemoved__10ControllerFv(struct Controller *const);
#line 331
extern e_BOOL IsVtCibleEnable__10ControllerFv(struct Controller *const);
#line 349
extern void SetVtCibleEnable__10ControllerFv(struct Controller *const);
#line 292
extern e_BOOL IsFSecuEnable__10ControllerFv(struct Controller *const);
#line 312
extern void SetFSecuEnable__10ControllerFv(struct Controller *const);




extern e_BOOL IsSoupirEnable__10ControllerFv(struct Controller *const);
#line 326
extern void SetSoupirEnable__10ControllerFv(struct Controller *const);
#line 340
extern e_BOOL IsInhibApneaEnable__10ControllerFv(struct Controller *const);
#line 4227
extern UWORD16 RebuildEventNodeTree__10ControllerF12e_MODE_TYPESUiT2(struct Controller *const, e_MODE_TYPES, UWORD16, UWORD16);
#line 4286
extern void RebuildEventNodeTreeForAllModes__10ControllerFUiT1(struct Controller *const, UWORD16, UWORD16);
#line 4357
extern UWORD16 GetNodeIdFromEventId__10ControllerFUi(struct Controller *const, UWORD16);
#line 4314
extern UWORD32 IsNodeInTree__10ControllerF12e_MODE_TYPESUiN22(struct Controller *const, e_MODE_TYPES, UWORD16, UWORD16, UWORD16);
#line 726
extern void SetMCycl__10ControllerFi(struct Controller *const, e_BOOL);
#line 671
extern void SetPressureUnit__10ControllerFUi(struct Controller *const, UWORD16);
#line 752
extern void SetValve__10ControllerFi(struct Controller *const, e_BOOL);
#line 843
extern void SendInfoValve__10ControllerFi(struct Controller *const, e_BOOL);
#line 851
extern void SetPressConvention__10ControllerFi(struct Controller *const, e_BOOL);
#line 884
extern void SendInfoBlocExpi__10ControllerFi(struct Controller *const, e_BOOL);
#line 3609
extern void SetExhalFlowUsed__10ControllerFi(struct Controller *const, e_BOOL);
#line 889
extern void SendInfoFio2Sensor__10ControllerFi(struct Controller *const, e_BOOL);
#line 907
extern void SendInfoSpo2Sensor__10ControllerFi(struct Controller *const, e_BOOL);
#line 930
extern void SendInfoBadSupplyCheck__10ControllerFi(struct Controller *const, e_BOOL);
#line 1043
extern void UsbMoveCurrentNode__10ControllerFP15MenuControlNodei(struct Controller *const, struct MenuControlNode *, e_BOOL);
#line 1072
extern void UsbUpdateNavigNodes__10ControllerFUi(struct Controller *const, UWORD16);
#line 835
extern void Spo2MonitorEnabled__10ControllerFi(struct Controller *const, e_BOOL);
#line 813
extern void Fio2MonitorEnabled__10ControllerFi(struct Controller *const, e_BOOL);
#line 375
extern e_BOOL IsFio2Sensor__10ControllerFv(struct Controller *const);
#line 385
extern e_BOOL IsSpo2Sensor__10ControllerFv(struct Controller *const);
#line 734
extern void SetConvTrigE__10ControllerFi(struct Controller *const, e_BOOL);
#line 741
extern void SetInhibApneaOk__10ControllerFi(struct Controller *const, e_BOOL);
#line 1080
extern void SetTrigEPosSelected__10ControllerFi(struct Controller *const, e_BOOL);
#line 4433
extern void HideVentil__10ControllerF12e_MODE_TYPES(struct Controller *const, e_MODE_TYPES);
#line 4466
extern void HideVentil__10ControllerF12e_MODE_TYPESUi(struct Controller *const, e_MODE_TYPES, UWORD16);
#line 4493
extern void ShowVentil__10ControllerFUiT112e_MODE_TYPES(struct Controller *const, UWORD16, UWORD16, e_MODE_TYPES);
#line 4555
extern void ShowVentil__10ControllerF12e_MODE_TYPESUi(struct Controller *const, e_MODE_TYPES, UWORD16);
#line 4703
extern void ShowMaintCalib__10ControllerFv(struct Controller *const);
#line 4377
extern void HideAlarm__10ControllerF12e_MODE_TYPES(struct Controller *const, e_MODE_TYPES);
#line 4409
extern void HideAlarm__10ControllerF12e_MODE_TYPESUi(struct Controller *const, e_MODE_TYPES, UWORD16);
#line 4580
extern void ShowAlarm__10ControllerFUiT112e_MODE_TYPES(struct Controller *const, UWORD16, UWORD16, e_MODE_TYPES);
#line 4645
extern void ShowAlarm__10ControllerF12e_MODE_TYPESUi(struct Controller *const, e_MODE_TYPES, UWORD16);
#line 4671
extern void DisplayAlarmTable__10ControllerFUi12e_MODE_TYPES(struct Controller *const, UWORD16, e_MODE_TYPES);
#line 935
extern void SendInfoUsbErrorCodeReady__10ControllerFi(struct Controller *const, e_BOOL);
#line 252
extern void SetUsbLock__10ControllerFi(struct Controller *const, e_BOOL);




extern e_BOOL GetUsbLock__10ControllerFv(struct Controller *const);




extern void SetUsbKeyDetected__10ControllerFi(struct Controller *const, e_BOOL);




extern e_BOOL GetUsbKeyDetected__10ControllerFv(struct Controller *const);
#line 282
extern void SetUsbCmdInProgress__10ControllerFi(struct Controller *const, e_BOOL);




extern e_BOOL IsUsbCmdInProgress__10ControllerFv(struct Controller *const);
#line 144
extern e_BOOL GetEndOfInit__10ControllerFv(struct Controller *const);
#line 151
extern void SetEndOfInit__10ControllerFi(struct Controller *const, e_BOOL);
#line 178
extern e_BOOL GetImpactDisplay__10ControllerFv(struct Controller *const);




extern void SetImpactDisplay__10ControllerFi(struct Controller *const, e_BOOL);
#line 497
extern void UpdateMode__10ControllerFv(struct Controller *const);
#line 3505
extern void ShowMonitoring__10ControllerFv(struct Controller *const);
#line 5825
extern void ForceQExpCalibrationStop__10ControllerFv(struct Controller *const);
#line 5871
extern void ForceFiO2CalibrationStop__10ControllerFv(struct Controller *const);
#line 1551
extern void StartSavingUsbSettings__10ControllerSFv(void);
#line 5674
extern void DecreaseBlowerStep__10ControllerFv(struct Controller *const);
#line 5702
extern void IncreaseBlowerStep__10ControllerFv(struct Controller *const);
#line 158
extern e_BOOL GetLongUpKeyDetected__10ControllerFv(struct Controller *const);




extern e_BOOL GetLongDownKeyDetected__10ControllerFv(struct Controller *const);




extern void SetLongUpKeyDetected__10ControllerFi(struct Controller *const, e_BOOL);




extern void SetLongDownKeyDetected__10ControllerFi(struct Controller *const, e_BOOL);
#line 467
extern e_BOOL IsVentButtonOn__10ControllerFv(struct Controller *const);




extern void SetVentButtonOn__10ControllerFi(struct Controller *const, e_BOOL);
#line 418
extern void SetDifferMonitoring__10ControllerFi(struct Controller *const, e_BOOL);




extern e_BOOL IsDifferMonitoring__10ControllerFv(struct Controller *const);



extern void SetBuzzerVoltRefreshReq__10ControllerFi(struct Controller *const, e_BOOL);




extern e_BOOL IsBuzzerVoltRefreshReq__10ControllerFv(struct Controller *const);
#line 198
extern void InsertDoubleMessage__10ControllerFv(struct Controller *const);
#line 205
extern void RemoveDoubleMessage__10ControllerFv(struct Controller *const);
#line 7769
extern struct MenuControlNode *GetPressureNode__10ControllerFv(struct Controller *const);
#line 7738
extern void BuildPressureMessage__10ControllerFP15MenuControlNodeT1PUc(struct Controller *const, struct MenuControlNode *, struct MenuControlNode *, UBYTE *);
#line 7856
extern UWORD16 UpdateCalibrationPoints__10ControllerFv(struct Controller *const);
#line 83
extern struct Controller *__ct__10ControllerFv(struct Controller *);
#line 589 "..\\..\\SRC\\HMI\\HMI_Controller.hpp"
extern void Init__10ControllerFv(struct Controller *const);
#line 666 "..\\..\\SRC\\HMI\\HMI_Controller.cpp"
extern void SetCurrentNode__10ControllerFP15MenuControlNode(struct Controller *const, struct MenuControlNode *);
#line 661
extern struct MenuControlNode *GetCurrentNode__10ControllerFv(struct Controller *const);
#line 527
extern void SetCurrentMode__10ControllerF12e_MODE_TYPES(struct Controller *const, e_MODE_TYPES);
#line 601
extern e_MODE_TYPES GetCurrentMode__10ControllerFv(struct Controller *const);




extern void SetConsultMode__10ControllerF12e_MODE_TYPES(struct Controller *const, e_MODE_TYPES);
#line 646
extern e_MODE_TYPES GetConsultMode__10ControllerFv(struct Controller *const);
#line 120
extern void SetCurrentFrame__10ControllerFUi(struct Controller *const, UWORD16);
#line 126
extern UWORD16 GetCurrentFrame__10ControllerFv(struct Controller *const);
#line 1129
extern struct Controller *GetInstance__10ControllerSFv(void);
#line 1164
extern void RemoveInstance__10ControllerSFv(void);
#line 2083
extern struct MenuControlNode *GetNodeAt__10ControllerFUi(struct Controller *const, UWORD16);
#line 2454
extern void ShowFrame__10ControllerFUi(struct Controller *const, UWORD16);
#line 2673
extern void ManageSpyEvent__10ControllerSF7EventId(EventId);
#line 2862
extern void ManageTimerEvent__10ControllerSFUi(UWORD16);
#line 3013
extern void ManageKeyboardEvent__10ControllerSFUi(UWORD16);
#line 1191
extern void MoveCurrentNode__10ControllerFP15MenuControlNode(struct Controller *const, struct MenuControlNode *);
#line 4747
extern void ChangeMenuWithMode__10ControllerF12e_MODE_TYPES(struct Controller *const, e_MODE_TYPES);
#line 5045
extern void ManageLineMenuVentil__10ControllerFP15MenuControlNode(struct Controller *const, struct MenuControlNode *);
#line 1821
extern struct VFrame *GetFrameObject__10ControllerFUi(struct Controller *const, UWORD16);
#line 212
extern void SetBrightness__10ControllerFUi(struct Controller *const, UWORD16);
#line 224
extern UWORD16 GetBrightness__10ControllerFv(struct Controller *const);
#line 131
extern UWORD16 GetLanguage__10ControllerFv(struct Controller *const);
#line 137
extern void SetLanguage__10ControllerFUi(struct Controller *const, UWORD16);
#line 4154
extern void ChangeLanguage__10ControllerFUi(struct Controller *const, UWORD16);
#line 651
extern e_BOOL IsVentilOn__10ControllerFv(struct Controller *const);
#line 234
extern void SetLockOn__10ControllerFi(struct Controller *const, e_BOOL);
#line 247
extern e_BOOL IsLockOn__10ControllerFv(struct Controller *const);
#line 482
extern void SetPSupportNull__10ControllerFi(struct Controller *const, e_BOOL);
#line 477
extern e_BOOL IsPSupportNull__10ControllerFv(struct Controller *const);
#line 188
extern void SetLState__10ControllerFQ2_10Controller11LegendState(struct Controller *const, __Q2_10Controller11LegendState);




extern __Q2_10Controller11LegendState GetLState__10ControllerFv(struct Controller *const);
#line 4090
extern void ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(struct Controller *const, e_BOOL, UBYTE *, e_SYMBOL);
#line 4104
extern void HideMessageFrame__10ControllerFv(struct Controller *const);
#line 4894
extern void ManageLock__10ControllerFi(struct Controller *const, e_BOOL);
#line 5009
extern void ManageUsbLock__10ControllerFi(struct Controller *const, e_BOOL);
#line 4848
extern void StopModifMode__10ControllerF12e_MODE_TYPES(struct Controller *const, e_MODE_TYPES);
#line 354
extern e_BOOL IsModeChange__10ControllerFv(struct Controller *const);




extern void SetModeChange__10ControllerFi(struct Controller *const, e_BOOL);




extern e_BOOL IsLastShutDownError__10ControllerFv(struct Controller *const);
#line 395
extern e_BOOL IsModifNodeOn__10ControllerFv(struct Controller *const);
#line 272
extern void SetUsbProcessingNode__10ControllerFP15MenuControlNode(struct Controller *const, struct MenuControlNode *);




extern struct MenuControlNode *GetUsbProcessingNode__10ControllerFv(struct Controller *const);
#line 400
extern void SetModifNodeOn__10ControllerFi(struct Controller *const, e_BOOL);
#line 3697
extern void ManageInhibKey__10ControllerFi(struct Controller *const, e_BOOL);
#line 3723
extern void ChangePages__10ControllerFv(struct Controller *const);
#line 4067
extern void StopAllMenuAction__10ControllerFv(struct Controller *const);
#line 3521
extern void SetMonitoringMode__10ControllerFi(struct Controller *const, e_BOOL);
#line 3594
extern void SetSupplyBusFailure__10ControllerFi(struct Controller *const, e_BOOL);
#line 5132
extern void ManageCalibAuto__10ControllerFv(struct Controller *const);
#line 5147
extern void ManageHistoAlarmSeek__10ControllerFv(struct Controller *const);
#line 5162
extern void ManageHistoAnoSeek__10ControllerFv(struct Controller *const);
#line 3793
extern void AlarmDetect__10ControllerFiP10AlarmEvent(struct Controller *const, e_BOOL, AlarmEvent *);
#line 3889
extern void ShowAlarm__10ControllerFiUiT2(struct Controller *const, e_BOOL, UWORD16, UWORD16);
#line 3920
extern void SettingBlockDetect__10ControllerFv(struct Controller *const);
#line 5178
extern void ManageTrigger__10ControllerFUi(struct Controller *const, UWORD16);
#line 5233
extern void SetVisibleTrigger__10ControllerFi(struct Controller *const, e_BOOL);
#line 1859
extern void StartBlowerBurnTest__10ControllerFv(struct Controller *const);
#line 1889
extern void StopBlowerBurnTest__10ControllerFv(struct Controller *const);
#line 1914
extern void StartCircuitLeakTest__10ControllerFv(struct Controller *const);
#line 1966
extern void StopCircuitLeakTest__10ControllerFv(struct Controller *const);
#line 1994
extern void AbortCircuitLeakTest__10ControllerFv(struct Controller *const);
#line 2018
extern void CircuitLeakTestTimerCallback__10ControllerFv(struct Controller *const);
#line 3435
extern void ShowMenu__10ControllerFUi(struct Controller *const, UWORD16);
#line 5917
extern void ManageVerifPointCalib__10ControllerFM10ControllerFv_v(struct Controller *const, __Q2_10Controller11PController);
#line 5119
extern void VerifAndManageCalibAuto__10ControllerFv(struct Controller *const);
#line 3634
extern void ChangeBrightness__10ControllerFQ2_10Controller5WayId(struct Controller *const, __Q2_10Controller5WayId);
#line 4118
extern void PlayBuzzer__10ControllerFv(struct Controller *const);
#line 4136
extern void PlayBuzzerSec__10ControllerFv(struct Controller *const);
#line 7816
extern void StopTimer__10ControllerFUi(struct Controller *const, UWORD16);
#line 437
extern void StartBuzzerVoltRefresh__10ControllerFv(struct Controller *const);
#line 448
extern void StopBuzzerVoltRefresh__10ControllerFv(struct Controller *const);
#line 456
extern void BuzzerVoltRefresh__10ControllerFv(struct Controller *const);
#line 2107
extern void NoAction__10ControllerFv(struct Controller *const);
#line 2124
extern void MoveDown__10ControllerFv(struct Controller *const);
#line 2146
extern void MoveUp__10ControllerFv(struct Controller *const);
#line 6496
extern void MoveDownNodeMaintPwmBlower__10ControllerFv(struct Controller *const);
#line 6513
extern void MoveUpNodeMaintPwmBlower__10ControllerFv(struct Controller *const);
#line 5659
extern void ReturnToNodeMaintPwmBlowerTO__10ControllerFv(struct Controller *const);
#line 5729
extern void ReturnToNodeMaintPwmBlower__10ControllerFv(struct Controller *const);
#line 2196
extern void ModifyUp__10ControllerFv(struct Controller *const);
#line 2168
extern void ModifyDown__10ControllerFv(struct Controller *const);
#line 2247
extern void ModifyUpRefreshBlower__10ControllerFv(struct Controller *const);
#line 2224
extern void ModifyDownRefreshBlower__10ControllerFv(struct Controller *const);
#line 2269
extern void MoveValid__10ControllerFv(struct Controller *const);
#line 2286
extern void MoveMonitor__10ControllerFv(struct Controller *const);
#line 5963
extern void MoveDownNodePreference__10ControllerFv(struct Controller *const);
#line 5980
extern void MoveMonitorNodeModifVentil__10ControllerFv(struct Controller *const);
#line 5998
extern void MoveValidNodeAlHisto__10ControllerFv(struct Controller *const);
#line 6015
extern void MoveValidNodePreference__10ControllerFv(struct Controller *const);
#line 6031
extern void MoveValidNodeHistAlBack__10ControllerFv(struct Controller *const);
#line 6243
extern void MoveUpNodeHistAlBack__10ControllerFv(struct Controller *const);
#line 6250
extern void MoveDownNodeHistAlBack__10ControllerFv(struct Controller *const);
#line 6047
extern void MoveValidNodeHistAlCancelled__10ControllerFv(struct Controller *const);
#line 6076
extern void MoveValidNodePrefBackVentil__10ControllerFv(struct Controller *const);
#line 6294
extern void MoveUpNodeGraphGhost__10ControllerFv(struct Controller *const);



extern void MoveDownNodeGraphGhost__10ControllerFv(struct Controller *const);
#line 6313
extern void MoveValidNodeCfgGraphBackPref__10ControllerFv(struct Controller *const);
#line 6094
extern void MoveUpNodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6100
extern void MoveDownNodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6106
extern void ModifyUpNodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6123
extern void ModifyDownNodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6153
extern void MoveToModifNodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6169
extern void ReturnToNodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6140
extern void ReturnToNodeTONodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6192
extern void MoveTimeOutNodePrefScreenSave__10ControllerFv(struct Controller *const);
#line 6222
extern void MoveTimeOutNodeHistAlBack__10ControllerFv(struct Controller *const);
#line 6268
extern void MoveTimeOutUSB__10ControllerFv(struct Controller *const);
#line 6330
extern void MoveValidNodePrefCurveConfig__10ControllerFv(struct Controller *const);
#line 6346
extern void MoveValidNodePrefTrend__10ControllerFv(struct Controller *const);
#line 6368
extern void MoveUpNodeCfgGraphVisu__10ControllerFv(struct Controller *const);
#line 6374
extern void MoveDownNodeCfgGraphVisu__10ControllerFv(struct Controller *const);
#line 6380
extern void ModifyUpNodeCfgGraphVisu__10ControllerFv(struct Controller *const);
#line 6386
extern void ModifyDownNodeCfgGraphVisu__10ControllerFv(struct Controller *const);
#line 6392
extern void MoveToModifNodeCfgGraphVisu__10ControllerFv(struct Controller *const);
#line 6398
extern void ReturnToNodeCfgGraphVisu__10ControllerFv(struct Controller *const);
#line 6423
extern void MoveTimeOutNodeCfgGraphVisu__10ControllerFv(struct Controller *const);
#line 6443
extern void MoveUpNodeTrendBack__10ControllerFv(struct Controller *const);




extern void MoveDownNodeTrendBack__10ControllerFv(struct Controller *const);




extern void MoveValidNodeTrendBack__10ControllerFv(struct Controller *const);
#line 6463
extern void MoveTimeOutNodeTrendBack__10ControllerFv(struct Controller *const);
#line 1243
extern void MoveToModifNode__10ControllerFv(struct Controller *const);
#line 5742
extern void MoveToModifNodeBlowerAction__10ControllerFv(struct Controller *const);
#line 5643
extern void MoveToModifNodeMaintPwmBlower__10ControllerFv(struct Controller *const);
#line 5626
extern void MoveToModifNodeCalibAuto__10ControllerFv(struct Controller *const);
#line 1284
extern void MoveToNextModifNode__10ControllerFv(struct Controller *const);
#line 1305
extern void MoveToNextModifNodeOnKey__10ControllerFQ2_10Controller5WayId(struct Controller *const, __Q2_10Controller5WayId);
#line 5774
extern void MoveToNextModifNodeCalib__10ControllerFv(struct Controller *const);
#line 5760
extern void VerifAndMoveToNextModifNodeCalib__10ControllerFv(struct Controller *const);
#line 1361
extern void ReturnToNode__10ControllerFv(struct Controller *const);
#line 1382
extern void ReturnToNodeUsb__10ControllerFv(struct Controller *const);
#line 1403
extern void ReturnToNodeUsbTO__10ControllerFv(struct Controller *const);
#line 1580
extern void ReturnToNodeOnKey__10ControllerFQ2_10Controller5WayId(struct Controller *const, __Q2_10Controller5WayId);
#line 1426
extern void ReturnToNodeOnKeyUsb__10ControllerFQ2_10Controller5WayId(struct Controller *const, __Q2_10Controller5WayId);
#line 1531
extern void ValidUsbStop__10ControllerFv(struct Controller *const);
#line 5803
extern void ReturnToNodeCalib__10ControllerFv(struct Controller *const);
#line 5789
extern void VerifAndReturnToNodeCalib__10ControllerFv(struct Controller *const);
#line 1624
extern void ReturnToNodeTO__10ControllerFv(struct Controller *const);
#line 4799
extern void ManageModeChange__10ControllerFv(struct Controller *const);
#line 1656
extern void EndModifToNode__10ControllerFv(struct Controller *const);
#line 1700
extern void MoveToModifNodeLoupe__10ControllerFv(struct Controller *const);
#line 1749
extern void ReturnToNodeLoupe__10ControllerFv(struct Controller *const);
#line 1783
extern void ReturnToNodeTOLoupe__10ControllerFv(struct Controller *const);
#line 6482
extern void ReturnToNodeLoupe1191__10ControllerFv(struct Controller *const);
#line 6620
extern void MoveToNextModifConsultCalib__10ControllerFv(struct Controller *const);
#line 6644
extern void MoveToNextModifConsultCalib2Value__10ControllerFv(struct Controller *const);
#line 6574
extern void ReturnToNodeOnConsultCalib__10ControllerFv(struct Controller *const);
#line 6596
extern void ReturnToNodeOnConsultCalib2Value__10ControllerFv(struct Controller *const);
#line 6531
extern void MoveToModifNodeConsultCalib__10ControllerFv(struct Controller *const);
#line 6552
extern void MoveToModifNodeConsultCalib2Value__10ControllerFv(struct Controller *const);
#line 1225
extern void ChangeModeSimplify__10ControllerFv(struct Controller *const);
#line 6667
extern void MoveToNextNodeJumpCalib__10ControllerFv(struct Controller *const);
#line 6683
extern void ReturnToNodeCalibAuto__10ControllerFv(struct Controller *const);
#line 6404
extern void ReturnToNodeCfgGraphVisuVisu__10ControllerFv(struct Controller *const);
#line 6724
extern void ReturnToNodeLoupe1151__10ControllerFv(struct Controller *const);
#line 6706
extern void ReturnToNodeLoupeNodeModifFsecu__10ControllerFv(struct Controller *const);
#line 6764
extern void MoveToNextModifNodeAlVteMin__10ControllerFv(struct Controller *const);
#line 6839
extern void MoveToNextModifNodeAlCalibVte__10ControllerFv(struct Controller *const);
#line 6942
extern void ReturnToNodeTOLoupeNodeAlCalibVte__10ControllerFv(struct Controller *const);
#line 6973
extern void ReturnToNodeToCalibNodeAlCalibVte__10ControllerFv(struct Controller *const);
#line 7004
extern void ModifyUpNodeAlCalibVte__10ControllerFv(struct Controller *const);
#line 7035
extern void ModifyDownNodeAlCalibVte__10ControllerFv(struct Controller *const);
#line 7065
extern void UpdateColNodeAlCalibVte__10ControllerFv(struct Controller *const);
#line 6890
extern void MoveToCalibAuto__10ControllerFv(struct Controller *const);
#line 7102
extern void MoveToNextModifNodeAlFiO2Min__10ControllerFv(struct Controller *const);
#line 7177
extern void MoveToNextModifNodeAlCalibFiO2__10ControllerFv(struct Controller *const);
#line 7292
extern void ReturnToNodeTOLoupeNodeAlCalibFiO2__10ControllerFv(struct Controller *const);
#line 7323
extern void ReturnToNodeToCalibNodeAlCalibFiO2__10ControllerFv(struct Controller *const);
#line 7354
extern void ModifyUpNodeAlCalibFiO2__10ControllerFv(struct Controller *const);
#line 7385
extern void ModifyDownNodeAlCalibFiO2__10ControllerFv(struct Controller *const);
#line 7083
extern void UpdateColNodeAlCalibFiO2__10ControllerFv(struct Controller *const);
#line 7224
extern void MoveToCalibAutoFiO2__10ControllerFv(struct Controller *const);
#line 7415
extern void MoveValidNodeModifConfPatientReset__10ControllerFv(struct Controller *const);
#line 7469
extern void MoveUpNodeConfPatientReset__10ControllerFv(struct Controller *const);
#line 7489
extern void MoveDownNodeConfPatientReset__10ControllerFv(struct Controller *const);
#line 6750
extern void MoveToNextModifNodeUsbTransferSetOn__10ControllerFv(struct Controller *const);
#line 7527
extern void DisplayBreathTiming__10ControllerFv(struct Controller *const);
#line 7594
extern void ModifyUpNodeInspTime__10ControllerFv(struct Controller *const);
#line 7608
extern void ModifyDownNodeInspTime__10ControllerFv(struct Controller *const);
#line 7622
extern void MoveToModifNodeLoupeNodeInspTime__10ControllerFv(struct Controller *const);
#line 7649
extern void ModifyUpNodePlusPeep__10ControllerFv(struct Controller *const);
#line 7690
extern void ModifyDownPeepNodePlusPeep__10ControllerFv(struct Controller *const);
#line 7714
extern void ModifyUpPeepNodePlusPeep__10ControllerFv(struct Controller *const);
#line 7669
extern void ModifyDownNodePlusPeep__10ControllerFv(struct Controller *const);
#line 7830
extern void Stop100FiO2__10ControllerFv(struct Controller *const);
#line 5597
extern void MoveToModifNodeFiO2Concent__10ControllerFv(struct Controller *const);
#line 5612
extern void MoveToModifNodeConsultCalibFiO2Concent__10ControllerFv(struct Controller *const);
#line 7886
extern void ReturnToNodePediatric__10ControllerFv(struct Controller *const);
#line 7910
extern void MoveUpNodeConfRestoreDefaultSetting__10ControllerFv(struct Controller *const);
#line 7928
extern void MoveDownNodeConfRestoreDefaultSetting__10ControllerFv(struct Controller *const);
#line 7945
extern void MoveValidNodeModifConfRestoreDefaultSetting__10ControllerFv(struct Controller *const);
#line 8149
extern void DisplayIsensHelperText__10ControllerFv(struct Controller *const);
#line 8181
extern void ModifyUpNodeIsens__10ControllerFv(struct Controller *const);
#line 8198
extern void ModifyDownNodeIsens__10ControllerFv(struct Controller *const);
#line 8218
extern void MoveToModifNodeLoupeNodeIsens__10ControllerFv(struct Controller *const);
#line 76 "..\\..\\SRC\\HMI\\HMI_MenuControlNode.hpp"
extern void SetVisible__15MenuControlNodeFi(struct MenuControlNode *const, e_BOOL);

extern e_BOOL IsVisible__15MenuControlNodeFv(struct MenuControlNode *const);


extern void SetLock__15MenuControlNodeFi(struct MenuControlNode *const, e_BOOL);




extern struct DisplayObject *GetObject__15MenuControlNodeFv(struct MenuControlNode *const);



extern struct EventNode *GetEventNode__15MenuControlNodeFv(struct MenuControlNode *const);

extern e_BOOL IsValid__15MenuControlNodeFv(struct MenuControlNode *const);
#line 95 "..\\..\\SRC\\HMI\\HMI_EventNode.hpp"
extern UWORD16 GetLinkedMenuControlNodeId__9EventNodeCFv(const struct EventNode *const);


extern UWORD16 GetId__9EventNodeCFv(const struct EventNode *const);

extern void SetIdNodeOnUp__9EventNodeFUi(struct EventNode *const, UWORD16);
extern UWORD16 GetIdNodeOnUp__9EventNodeCFv(const struct EventNode *const);

extern void SetIdNodeOnDown__9EventNodeFUi(struct EventNode *const, UWORD16);
extern UWORD16 GetIdNodeOnDown__9EventNodeCFv(const struct EventNode *const);


extern UWORD16 GetIdNodeOnTimeOut__9EventNodeCFv(const struct EventNode *const);


extern UWORD16 GetIdNodeOnValid__9EventNodeCFv(const struct EventNode *const);


extern UWORD16 GetIdNodeOnLongValid__9EventNodeCFv(const struct EventNode *const);

extern void SetIdNodeOnMonitor__9EventNodeFUi(struct EventNode *const, UWORD16);
extern UWORD16 GetIdNodeOnMonitor__9EventNodeCFv(const struct EventNode *const);

extern void SetOnButtonUp__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);
extern void SetOnButtonDown__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);
extern void SetOnTimeOut__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);
extern void SetOnButtonValid__9EventNodeFM10ControllerFv_v(struct EventNode *const, __Q2_10Controller11PController);
#line 148 "..\\..\\SRC\\HMI\\HMI_InterfaceCppC.hpp"
extern void ErazePage__13InterfaceCppCSFUi(UWORD16);
extern void DisplayPage__13InterfaceCppCSFUi(UWORD16);
extern void DisplayBrithness__13InterfaceCppCSFUi(UWORD16);
#line 166
extern void FlashWriteEvent__13InterfaceCppCSFUi(UWORD16);

extern void MaintEraseFlashMngt__13InterfaceCppCSFv(void);

extern void EraseNANDFlashMngt__13InterfaceCppCSFv(void);

extern e_BOOL IsOneAlarmActive__13InterfaceCppCSFv(void); static __Q2_10Controller11PController __T50909376; static __Q2_10Controller11PController __T50909444; static __Q2_10Controller11PController __T50909512; static __Q2_10Controller11PController __T50909580; static 
#line 172
PtrFunct__GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId__L2590 __T50928924; static PtrFunct__GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId__L2590 __T50928992; static __Q2_10Controller11PController __T51202748; static __Q2_10Controller11PController 
#line 172
__T51207576; static __Q2_10Controller11PController __T51207644; static __Q2_10Controller11PController __T51227188; static __Q2_10Controller11PController __T51233976; static __Q2_10Controller11PController __T51234524; static __Q2_10Controller11PController __T51255184; static 
#line 172
__Q2_10Controller11PController __T51255252;
#line 80 "..\\..\\SRC\\DRIVERS\\DRV_VarEeprom.h"
extern UWORD16 EEP_DB_Config[104];


extern UWORD16 EEP_DB_VOL_Adjust[56];


extern UWORD16 EEP_DB_PRES_Adjust[56];


extern UWORD16 EEP_DB_PSV_Adjust[56];


extern UWORD16 EEP_DB_VSIMV_Adjust[56];


extern UWORD16 EEP_DB_PSIMV_Adjust[56];


extern UWORD16 EEP_DB_CPAP_Adjust[56];
#line 367 "..\\..\\SRC\\HMI\\HMI_GlobalEventNode.hpp"
extern struct EventNode EventNodeMaintFlowExp7;
#line 366 "..\\..\\SRC\\HMI\\HMI_Message.hpp"
extern const UBYTE *const huge cMSG_ExhalationPressure[19];
extern const UBYTE *const huge cMSG_CpapPressure[19];
#line 400
extern const UBYTE *const huge cMSG_StartVentil[19];
extern const UBYTE *const huge cMSG_StopVentil[19];

extern const UBYTE *const huge cMSG_StopConfirmVentil[19];

extern const UBYTE *const huge cMSG_IsensHelperTxt[19];
#line 424
extern const UBYTE *const huge cMSG_CalibQExpTab[19];
extern const UBYTE *const huge cMSG_CalibQExpProcessing[19];
extern const UBYTE *const huge cMSG_CalibFiO2Tab[19];
extern const UBYTE *const huge cMSG_CalibFiO2Processing[19];


extern const UBYTE *const huge cMSG_SettingBlock[19];
extern const UBYTE *const huge cMSG_BlockedSetting[25][19];
#line 1744 "..\\..\\SRC\\DATABASE_SETTINGS\\DB_IhmAccessParaDataBase.h"
extern const t_TEST_EEPROM_DB cDB_VSIMV_TEST_ADJUST_DB[];


extern const t_TEST_EEPROM_DB cDB_PSIMV_TEST_ADJUST_DB[];


extern const t_TEST_EEPROM_DB cDB_VOL_TEST_ADJUST_DB[];


extern const t_TEST_EEPROM_DB cDB_PSV_TEST_ADJUST_DB[];


extern const t_TEST_EEPROM_DB cDB_CPAP_TEST_ADJUST_DB[];


extern const t_TEST_EEPROM_DB cDB_PRES_TEST_ADJUST_DB[];



extern t_TEST_EEPROM_DB cDB_TEST_CONTROL_DB[];


extern const t_TEST_EEPROM_DB cDB_TEST_CONFIG_DB[];
#line 77 "..\\..\\SRC\\HMI\\HMI_Controller.cpp"
extern bool EraseFlag;
static bool FirstCall;
#line 74 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
extern UWORD16 Language__13DisplayObject;
extern e_BOOL EndOfInit__13DisplayObject; static __Q2_10Controller11PController __T50909376 = {((short)0),((short)(-1)),((void (*)())ModifyUpNodePlusPeep__10ControllerFv)}; static __Q2_10Controller11PController __T50909444 = {((short)0),((short)(-1)),((void (*)())
#line 75
ModifyDownNodePlusPeep__10ControllerFv)}; static __Q2_10Controller11PController __T50909512 = {((short)0),((short)(-1)),((void (*)())ModifyUpPeepNodePlusPeep__10ControllerFv)}; static __Q2_10Controller11PController __T50909580 = {((short)0),((short)(-1)),((void (*)())
#line 75
ModifyDownPeepNodePlusPeep__10ControllerFv)}; static PtrFunct__GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId__L2590 __T50928924 = {((short)0),((short)(-1)),((void (*)())GetIdNodeOnUp__9EventNodeCFv)}; static 
#line 75
PtrFunct__GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId__L2590 __T50928992 = {((short)0),((short)(-1)),((void (*)())GetIdNodeOnDown__9EventNodeCFv)}; static __Q2_10Controller11PController __T51202748 = {((short)0),((short)0),((void (*)())0)}; static 
#line 75
__Q2_10Controller11PController __T51207576 = {((short)0),((short)(-1)),((void (*)())NoAction__10ControllerFv)}; static __Q2_10Controller11PController __T51207644 = {((short)0),((short)(-1)),((void (*)())MoveToModifNodeLoupe__10ControllerFv)}; static __Q2_10Controller11PController __T51227188 = {((
#line 75
short)0),((short)(-1)),((void (*)())ManageCalibAuto__10ControllerFv)}; static __Q2_10Controller11PController __T51233976 = {((short)0),((short)(-1)),((void (*)())MoveToNextModifNodeCalib__10ControllerFv)}; static __Q2_10Controller11PController __T51234524 = {((short)0),((short)(-1)),((void (*)())
#line 75
ReturnToNodeCalib__10ControllerFv)}; static __Q2_10Controller11PController __T51255184 = {((short)0),((short)(-1)),((void (*)())VerifAndReturnToNodeCalib__10ControllerFv)}; static __Q2_10Controller11PController __T51255252 = {((short)0),((short)(-1)),((void (*)())
#line 75
VerifAndMoveToNextModifNodeCalib__10ControllerFv)};
#line 15 "..\\LH_ST10F276.h"
 sfr ADCIC = 0xFF98;
 sfr ADCON = 0xFFA0;
 sfr ADDAT = 0xFEA0;
 sfr ADDAT2 = 0xF0A0;

 sfr ADEIC = 0xFF9A;
sbit ADST = 0xFFA0 ^ 7;
sbit ADBSY = 0xFFA0 ^ 8;
sbit ADWR = 0xFFA0 ^ 9;
sbit ADCIN = 0xFFA0 ^ 10;
sbit ADCRQ = 0xFFA0 ^ 11;
sbit ADCIE = 0xFF98 ^ 6;
sbit ADCIR = 0xFF98 ^ 7;
sbit ADEIE = 0xFF9A ^ 6;
sbit ADEIR = 0xFF9A ^ 7;


 sfr CC0 = 0xFE80;
 sfr CC0IC = 0xFF78;
 sfr CC1 = 0xFE82;
 sfr CC1IC = 0xFF7A;
 sfr CC2 = 0xFE84;
 sfr CC2IC = 0xFF7C;
 sfr CC3 = 0xFE86;
 sfr CC3IC = 0xFF7E;
 sfr CC4 = 0xFE88;
 sfr CC4IC = 0xFF80;
 sfr CC5 = 0xFE8A;
 sfr CC5IC = 0xFF82;
 sfr CC6 = 0xFE8C;
 sfr CC6IC = 0xFF84;
 sfr CC7 = 0xFE8E;
 sfr CC7IC = 0xFF86;
 sfr CC8 = 0xFE90;
 sfr CC8IC = 0xFF88;
 sfr CC9 = 0xFE92;
 sfr CC9IC = 0xFF8A;
 sfr CC10 = 0xFE94;
 sfr CC10IC = 0xFF8C;
 sfr CC11 = 0xFE96;
 sfr CC11IC = 0xFF8E;
 sfr CC12 = 0xFE98;
 sfr CC12IC = 0xFF90;
 sfr CC13 = 0xFE9A;
 sfr CC13IC = 0xFF92;
 sfr CC14 = 0xFE9C;
 sfr CC14IC = 0xFF94;
 sfr CC15 = 0xFE9E;
 sfr CC15IC = 0xFF96;
 sfr CC16 = 0xFE60;
 sfr CC16IC = 0xF160;
 sfr CC17 = 0xFE62;
 sfr CC17IC = 0xF162;
 sfr CC18 = 0xFE64;
 sfr CC18IC = 0xF164;
 sfr CC19 = 0xFE66;
 sfr CC19IC = 0xF166;
 sfr CC20 = 0xFE68;
 sfr CC20IC = 0xF168;
 sfr CC21 = 0xFE6A;
 sfr CC21IC = 0xF16A;
 sfr CC22 = 0xFE6C;
 sfr CC22IC = 0xF16C;
 sfr CC23 = 0xFE6E;
 sfr CC23IC = 0xF16E;
 sfr CC24 = 0xFE70;
 sfr CC24IC = 0xF170;
 sfr CC25 = 0xFE72;
 sfr CC25IC = 0xF172;
 sfr CC26 = 0xFE74;
 sfr CC26IC = 0xF174;
 sfr CC27 = 0xFE76;
 sfr CC27IC = 0xF176;
 sfr CC28 = 0xFE78;
 sfr CC28IC = 0xF178;
 sfr CC29 = 0xFE7A;
 sfr CC29IC = 0xF184;
 sfr CC30 = 0xFE7C;
 sfr CC30IC = 0xF18C;
 sfr CC31 = 0xFE7E;
 sfr CC31IC = 0xF194;
 sfr CCM0 = 0xFF52;
 sfr CCM1 = 0xFF54;
 sfr CCM2 = 0xFF56;
 sfr CCM3 = 0xFF58;
 sfr CCM4 = 0xFF22;
 sfr CCM5 = 0xFF24;
 sfr CCM6 = 0xFF26;
 sfr CCM7 = 0xFF28;
 sfr T0 = 0xFE50;
 sfr T01CON = 0xFF50;
 sfr T0IC = 0xFF9C;
 sfr T0REL = 0xFE54;
 sfr T1 = 0xFE52;
 sfr T1IC = 0xFF9E;
 sfr T1REL = 0xFE56;
 sfr T7 = 0xF050;
 sfr T78CON = 0xFF20;
 sfr T7IC = 0xF17A;
 sfr T7REL = 0xF054;
 sfr T8 = 0xF052;
 sfr T8IC = 0xF17C;
 sfr T8REL = 0xF056;
sbit CC0IR = 0xFF78 ^ 7;
sbit CC0IE = 0xFF78 ^ 6;
sbit CC1IR = 0xFF7A ^ 7;
sbit CC1IE = 0xFF7A ^ 6;
sbit CC2IR = 0xFF7C ^ 7;
sbit CC2IE = 0xFF7C ^ 6;
sbit CC3IR = 0xFF7E ^ 7;
sbit CC3IE = 0xFF7E ^ 6;
sbit CC4IR = 0xFF80 ^ 7;
sbit CC4IE = 0xFF80 ^ 6;
sbit CC5IR = 0xFF82 ^ 7;
sbit CC5IE = 0xFF82 ^ 6;
sbit CC6IR = 0xFF84 ^ 7;
sbit CC6IE = 0xFF84 ^ 6;
sbit CC7IR = 0xFF86 ^ 7;
sbit CC7IE = 0xFF86 ^ 6;
sbit CC8IR = 0xFF88 ^ 7;
sbit CC8IE = 0xFF88 ^ 6;
sbit CC9IR = 0xFF8A ^ 7;
sbit CC9IE = 0xFF8A ^ 6;
sbit CC10IR = 0xFF8C ^ 7;
sbit CC10IE = 0xFF8C ^ 6;
sbit CC11IR = 0xFF8E ^ 7;
sbit CC11IE = 0xFF8E ^ 6;
sbit CC12IR = 0xFF90 ^ 7;
sbit CC12IE = 0xFF90 ^ 6;
sbit CC13IR = 0xFF92 ^ 7;
sbit CC13IE = 0xFF92 ^ 6;
sbit CC14IR = 0xFF94 ^ 7;
sbit CC14IE = 0xFF94 ^ 6;
sbit CC15IR = 0xFF96 ^ 7;
sbit CC15IE = 0xFF96 ^ 6;
sbit CC16IR = 0xF160 ^ 7;
sbit CC16IE = 0xF160 ^ 6;
sbit CC17IR = 0xF162 ^ 7;
sbit CC17IE = 0xF162 ^ 6;
sbit CC18IR = 0xF164 ^ 7;
sbit CC18IE = 0xF164 ^ 6;
sbit CC19IR = 0xF166 ^ 7;
sbit CC19IE = 0xF166 ^ 6;
sbit CC20IR = 0xF168 ^ 7;
sbit CC20IE = 0xF168 ^ 6;
sbit CC21IR = 0xF16A ^ 7;
sbit CC21IE = 0xF16A ^ 6;
sbit CC22IR = 0xF16C ^ 7;
sbit CC22IE = 0xF16C ^ 6;
sbit CC23IR = 0xF16E ^ 7;
sbit CC23IE = 0xF16E ^ 6;
sbit CC24IR = 0xF170 ^ 7;
sbit CC24IE = 0xF170 ^ 6;
sbit CC25IR = 0xF172 ^ 7;
sbit CC25IE = 0xF172 ^ 6;
sbit CC26IR = 0xF174 ^ 7;
sbit CC26IE = 0xF174 ^ 6;
sbit CC27IR = 0xF176 ^ 7;
sbit CC27IE = 0xF176 ^ 6;
sbit CC28IR = 0xF178 ^ 7;
sbit CC28IE = 0xF178 ^ 6;
sbit CC29IR = 0xF184 ^ 7;
sbit CC29IE = 0xF184 ^ 6;
sbit CC30IR = 0xF18C ^ 7;
sbit CC30IE = 0xF18C ^ 6;
sbit CC31IR = 0xF194 ^ 7;
sbit CC31IE = 0xF194 ^ 6;
sbit ACC0 = 0xFF52 ^ 3;
sbit ACC1 = 0xFF52 ^ 7;
sbit ACC2 = 0xFF52 ^ 11;
sbit ACC3 = 0xFF52 ^ 15;
sbit ACC4 = 0xFF54 ^ 3;
sbit ACC5 = 0xFF54 ^ 7;
sbit ACC6 = 0xFF54 ^ 11;
sbit ACC7 = 0xFF54 ^ 15;
sbit ACC8 = 0xFF56 ^ 3;
sbit ACC9 = 0xFF56 ^ 7;
sbit ACC10 = 0xFF56 ^ 11;
sbit ACC11 = 0xFF56 ^ 15;
sbit ACC12 = 0xFF58 ^ 3;
sbit ACC13 = 0xFF58 ^ 7;
sbit ACC14 = 0xFF58 ^ 11;
sbit ACC15 = 0xFF58 ^ 15;
sbit ACC16 = 0xFF22 ^ 3;
sbit ACC17 = 0xFF22 ^ 7;
sbit ACC18 = 0xFF22 ^ 11;
sbit ACC19 = 0xFF22 ^ 15;
sbit ACC20 = 0xFF24 ^ 3;
sbit ACC21 = 0xFF24 ^ 7;
sbit ACC22 = 0xFF24 ^ 11;
sbit ACC23 = 0xFF24 ^ 15;
sbit ACC24 = 0xFF26 ^ 3;
sbit ACC25 = 0xFF26 ^ 7;
sbit ACC26 = 0xFF26 ^ 11;
sbit ACC27 = 0xFF26 ^ 15;
sbit ACC28 = 0xFF28 ^ 3;
sbit ACC29 = 0xFF28 ^ 7;
sbit ACC30 = 0xFF28 ^ 11;
sbit ACC31 = 0xFF28 ^ 15;
sbit T0IE = 0xFF9C ^ 6;
sbit T0IR = 0xFF9C ^ 7;
sbit T0M = 0xFF50 ^ 3;
sbit T0R = 0xFF50 ^ 6;
sbit T1IE = 0xFF9E ^ 6;
sbit T1IR = 0xFF9E ^ 7;
sbit T1M = 0xFF50 ^ 11;
sbit T1R = 0xFF50 ^ 14;
sbit T7IE = 0xF17A ^ 6;
sbit T7IR = 0xF17A ^ 7;
sbit T7M = 0xFF20 ^ 3;
sbit T7R = 0xFF20 ^ 6;
sbit T8IE = 0xF17C ^ 6;
sbit T8IR = 0xF17C ^ 7;
sbit T8M = 0xFF20 ^ 11;
sbit T8R = 0xFF20 ^ 14;


 sfr CP = 0xFE10;
 sfr CSP = 0xFE08;
 sfr DPP0 = 0xFE00;
 sfr DPP1 = 0xFE02;
 sfr DPP2 = 0xFE04;
 sfr DPP3 = 0xFE06;
 sfr MDC = 0xFF0E;
 sfr MDH = 0xFE0C;
 sfr MDL = 0xFE0E;
 sfr ONES = 0xFF1E;
 sfr PSW = 0xFF10;
 sfr SP = 0xFE12;
 sfr STKOV = 0xFE14;
 sfr STKUN = 0xFE16;
 sfr SYSCON = 0xFF12;
 sfr TFR = 0xFFAC;
 sfr ZEROS = 0xFF1C;
 sfr XPERCON = 0xF024;
 sfr BUSCON0 = 0xFF0C;
 sfr BUSCON1 = 0xFF14;
 sfr BUSCON2 = 0xFF16;
 sfr BUSCON3 = 0xFF18;
 sfr BUSCON4 = 0xFF1A;
 sfr ADDRSEL1 = 0xFE18;
 sfr ADDRSEL2 = 0xFE1A;
 sfr ADDRSEL3 = 0xFE1C;
 sfr ADDRSEL4 = 0xFE1E;

sbit XPERSHARE = 0xFF12 ^ 0;
sbit VISIBLE = 0xFF12 ^ 1;
sbit XPEN = 0xFF12 ^ 2;
sbit BDRSTEN = 0xFF12 ^ 3;
sbit OWDDIS = 0xFF12 ^ 4;
sbit CSCFG = 0xFF12 ^ 6;
sbit WRCFG = 0xFF12 ^ 7;
sbit CLKEN = 0xFF12 ^ 8;
sbit BYTDIS = 0xFF12 ^ 9;
sbit ROMEN = 0xFF12 ^ 10;
sbit SGTEN = 0xFF12 ^ 11;
sbit ROMS1 = 0xFF12 ^ 12;
sbit N = 0xFF10 ^ 0;
sbit C = 0xFF10 ^ 1;
sbit V = 0xFF10 ^ 2;
sbit Z = 0xFF10 ^ 3;
sbit E = 0xFF10 ^ 4;
sbit MULIP = 0xFF10 ^ 5;
sbit USR0 = 0xFF10 ^ 6;
sbit HLDEN = 0xFF10 ^ 10;
sbit IEN = 0xFF10 ^ 11;
sbit MDRIU = 0xFF0E ^ 4;
sbit RWDC0 = 0xFF0C ^ 4;
sbit MTTC0 = 0xFF0C ^ 5;
sbit ALECTL0 = 0xFF0C ^ 9;
sbit BUSACT0 = 0xFF0C ^ 10;
sbit RDYEN0 = 0xFF0C ^ 12;
sbit RWDC1 = 0xFF14 ^ 4;
sbit MTTC1 = 0xFF14 ^ 5;
sbit ALECTL1 = 0xFF14 ^ 9;
sbit BUSACT1 = 0xFF14 ^ 10;
sbit RDYEN1 = 0xFF14 ^ 12;
sbit CSREN1 = 0xFF14 ^ 14;
sbit CSWEN1 = 0xFF14 ^ 15;
sbit RWDC2 = 0xFF16 ^ 4;
sbit MTTC2 = 0xFF16 ^ 5;
sbit ALECTL2 = 0xFF16 ^ 9;
sbit BUSACT2 = 0xFF16 ^ 10;
sbit RDYEN2 = 0xFF16 ^ 12;
sbit CSREN2 = 0xFF16 ^ 14;
sbit CSWEN2 = 0xFF16 ^ 15;
sbit RWDC3 = 0xFF18 ^ 4;
sbit MTTC3 = 0xFF18 ^ 5;
sbit ALECTL3 = 0xFF18 ^ 9;
sbit BUSACT3 = 0xFF18 ^ 10;
sbit RDYEN3 = 0xFF18 ^ 12;
sbit CSREN3 = 0xFF18 ^ 14;
sbit CSWEN3 = 0xFF18 ^ 15;
sbit RWDC4 = 0xFF1A ^ 4;
sbit MTTC4 = 0xFF1A ^ 5;
sbit ALECTL4 = 0xFF1A ^ 9;
sbit BUSACT4 = 0xFF1A ^ 10;
sbit RDYEN4 = 0xFF1A ^ 12;
sbit CSREN4 = 0xFF1A ^ 14;
sbit CSWEN4 = 0xFF1A ^ 15;
sbit ILLBUS = 0xFFAC ^ 0;
sbit ILLINA = 0xFFAC ^ 1;
sbit ILLOPA = 0xFFAC ^ 2;
sbit PRTFLT = 0xFFAC ^ 3;
sbit UNDOPC = 0xFFAC ^ 7;
sbit STKUF = 0xFFAC ^ 13;
sbit STKOF = 0xFFAC ^ 14;
sbit NMI = 0xFFAC ^ 15;

 sfr EXICON = 0xF1C0;
 sfr EXISEL = 0xF1DA;



 sfr PECC0 = 0xFEC0;
 sfr PECC1 = 0xFEC2;
 sfr PECC2 = 0xFEC4;
 sfr PECC3 = 0xFEC6;
 sfr PECC4 = 0xFEC8;
 sfr PECC5 = 0xFECA;
 sfr PECC6 = 0xFECC;
 sfr PECC7 = 0xFECE;
#line 356
 sfr DP0L = 0xF100;
 sfr DP0H = 0xF102;
 sfr DP1L = 0xF104;
 sfr DP1H = 0xF106;
 sfr DP2 = 0xFFC2;
 sfr DP3 = 0xFFC6;
 sfr DP4 = 0xFFCA;
 sfr DP6 = 0xFFCE;
 sfr DP7 = 0xFFD2;
 sfr DP8 = 0xFFD6;

 sfr P0L = 0xFF00;
 sfr P0H = 0xFF02;
 sfr P1L = 0xFF04;
 sfr P1H = 0xFF06;
 sfr P2 = 0xFFC0;
 sfr P3 = 0xFFC4;
 sfr P4 = 0xFFC8;
 sfr P5 = 0xFFA2;
 sfr P6 = 0xFFCC;
 sfr P7 = 0xFFD0;
 sfr P8 = 0xFFD4;
 sfr P5DIDIS = 0xFFA4;
 sfr ODP2 = 0xF1C2;
 sfr ODP3 = 0xF1C6;
 sfr ODP4 = 0xF1CA;
 sfr ODP6 = 0xF1CE;
 sfr ODP7 = 0xF1D2;
 sfr ODP8 = 0xF1D6;
 sfr RP0H = 0xF108;
 sfr PICON = 0xF1C4;



 sfr S0BG = 0xFEB4;
 sfr S0CON = 0xFFB0;
 sfr S0EIC = 0xFF70;
 sfr S0RBUF = 0xFEB2;
 sfr S0RIC = 0xFF6E;
 sfr S0TBUF = 0xFEB0;
 sfr S0TIC = 0xFF6C;
 sfr S0TBIC = 0xF19C;
sbit S0STP = 0xFFB0 ^ 3;
sbit S0REN = 0xFFB0 ^ 4;
sbit S0PEN = 0xFFB0 ^ 5;
sbit S0FEN = 0xFFB0 ^ 6;
sbit S0OEN = 0xFFB0 ^ 7;
sbit S0PE = 0xFFB0 ^ 8;
sbit S0FE = 0xFFB0 ^ 9;
sbit S0OE = 0xFFB0 ^ 10;
sbit S0ODD = 0xFFB0 ^ 12;
sbit S0BRS = 0xFFB0 ^ 13;
sbit S0LB = 0xFFB0 ^ 14;
sbit S0R = 0xFFB0 ^ 15;
sbit S0TIE = 0xFF6C ^ 6;
sbit S0TIR = 0xFF6C ^ 7;
sbit S0TBIE = 0xF19C ^ 6;
sbit S0TBIR = 0xF19C ^ 7;
sbit S0RIE = 0xFF6E ^ 6;
sbit S0RIR = 0xFF6E ^ 7;
sbit S0EIE = 0xFF70 ^ 6;
sbit S0EIR = 0xFF70 ^ 7;

 sfr SSCTIC = 0xFF72;
 sfr SSCRIC = 0xFF74;
 sfr SSCEIC = 0xFF76;
 sfr SSCTB = 0xF0B0;
 sfr SSCRB = 0xF0B2;
 sfr SSCBR = 0xF0B4;
 sfr SSCCON = 0xFFB2;
sbit SSCHB = 0xFFB2 ^ 4;
sbit SSCPH = 0xFFB2 ^ 5;
sbit SSCPO = 0xFFB2 ^ 6;
sbit SSCTE = 0xFFB2 ^ 8;
sbit SSCTEN = 0xFFB2 ^ 8;
sbit SSCRE = 0xFFB2 ^ 9;
sbit SSCREN = 0xFFB2 ^ 9;
sbit SSCPE = 0xFFB2 ^ 10;
sbit SSCPEN = 0xFFB2 ^ 10;
sbit SSCBE = 0xFFB2 ^ 11;
sbit SSCBEN = 0xFFB2 ^ 11;
sbit SSCBSY = 0xFFB2 ^ 12;
sbit SSCMS = 0xFFB2 ^ 14;
sbit SSCEN = 0xFFB2 ^ 15;
sbit SSCTIR = 0xFF72 ^ 7;
sbit SSCTIE = 0xFF72 ^ 6;
sbit SSCRIR = 0xFF74 ^ 7;
sbit SSCRIE = 0xFF74 ^ 6;
sbit SSCEIR = 0xFF76 ^ 7;
sbit SSCEIE = 0xFF76 ^ 6;


 sfr CAPREL = 0xFE4A;
 sfr CRIC = 0xFF6A;
 sfr T2 = 0xFE40;
 sfr T2CON = 0xFF40;
 sfr T2IC = 0xFF60;
 sfr T3 = 0xFE42;
 sfr T3CON = 0xFF42;
 sfr T3IC = 0xFF62;
 sfr T4 = 0xFE44;
 sfr T4CON = 0xFF44;
 sfr T4IC = 0xFF64;
 sfr T5 = 0xFE46;
 sfr T5CON = 0xFF46;
 sfr T5IC = 0xFF66;
 sfr T6 = 0xFE48;
 sfr T6CON = 0xFF48;
 sfr T6IC = 0xFF68;
 sfr WDT = 0xFEAE;
 sfr WDTCON = 0xFFAE;
sbit CRIE = 0xFF6A ^ 6;
sbit CRIR = 0xFF6A ^ 7;
sbit T2R = 0xFF40 ^ 6;
sbit T2UD = 0xFF40 ^ 7;
sbit T2UDE = 0xFF40 ^ 8;
sbit T2IE = 0xFF60 ^ 6;
sbit T2IR = 0xFF60 ^ 7;
sbit T3R = 0xFF42 ^ 6;
sbit T3UD = 0xFF42 ^ 7;
sbit T3UDE = 0xFF42 ^ 8;
sbit T3OE = 0xFF42 ^ 9;
sbit T3OTL = 0xFF42 ^ 10;
sbit T3IE = 0xFF62 ^ 6;
sbit T3IR = 0xFF62 ^ 7;
sbit T4R = 0xFF44 ^ 6;
sbit T4UD = 0xFF44 ^ 7;
sbit T4UDE = 0xFF44 ^ 8;
sbit T4IE = 0xFF64 ^ 6;
sbit T4IR = 0xFF64 ^ 7;
sbit T5R = 0xFF46 ^ 6;
sbit T5UD = 0xFF46 ^ 7;
sbit T5UDE = 0xFF46 ^ 8;
sbit T5CLR = 0xFF46 ^ 14;
sbit T5SC = 0xFF46 ^ 15;
sbit T5IE = 0xFF66 ^ 6;
sbit T5IR = 0xFF66 ^ 7;
sbit T6R = 0xFF48 ^ 6;
sbit T6UD = 0xFF48 ^ 7;
sbit T6UDE = 0xFF48 ^ 8;
sbit T6OE = 0xFF48 ^ 9;
sbit T6OTL = 0xFF48 ^ 10;
sbit T6SR = 0xFF48 ^ 15;
sbit T6IE = 0xFF68 ^ 6;
sbit T6IR = 0xFF68 ^ 7;
sbit T0IN = 0xFFC4 ^ 0;
sbit T2IN = 0xFFC4 ^ 7;
sbit T3IN = 0xFFC4 ^ 6;
sbit T4IN = 0xFFC4 ^ 5;
sbit T5IN = 0xFFA2 ^ 13;
sbit T6IN = 0xFFA2 ^ 12;
sbit T2EUD = 0xFFA2 ^ 15;
sbit T3EUD = 0xFFC4 ^ 4;
sbit T4EUD = 0xFFA2 ^ 14;
sbit T5EUD = 0xFFA2 ^ 11;
sbit T6EUD = 0xFFA2 ^ 10;
sbit T3OUT = 0xFFC4 ^ 3;
sbit CAPIN = 0xFFC4 ^ 2;
sbit T6OUT = 0xFFC4 ^ 1;
sbit WDTIN = 0xFFAE ^ 0;
sbit WDTR = 0xFFAE ^ 1;
sbit SWR = 0xFFAE ^ 2;
sbit SHWR = 0xFFAE ^ 3;
sbit LHWR = 0xFFAE ^ 4;
sbit PONR = 0xFFAE ^ 5;
sbit WDTPRE = 0xFFAE ^ 7;


 sfr PWMCON0 = 0xFF30;
 sfr PWMCON1 = 0xFF32;
 sfr PW0 = 0xFE30;
 sfr PW1 = 0xFE32;
 sfr PW2 = 0xFE34;
 sfr PW3 = 0xFE36;
 sfr PWMIC = 0xF17E;
 sfr PT0 = 0xF030;
 sfr PT1 = 0xF032;
 sfr PT2 = 0xF034;
 sfr PT3 = 0xF036;
 sfr PP0 = 0xF038;
 sfr PP1 = 0xF03A;
 sfr PP2 = 0xF03C;
 sfr PP3 = 0xF03E;
sbit PTR0 = 0xFF30 ^ 0;
sbit PTR1 = 0xFF30 ^ 1;
sbit PTR2 = 0xFF30 ^ 2;
sbit PTR3 = 0xFF30 ^ 3;
sbit PTI0 = 0xFF30 ^ 4;
sbit PTI1 = 0xFF30 ^ 5;
sbit PTI2 = 0xFF30 ^ 6;
sbit PTI3 = 0xFF30 ^ 7;
sbit PIE0 = 0xFF30 ^ 8;
sbit PIE1 = 0xFF30 ^ 9;
sbit PIE2 = 0xFF30 ^ 10;
sbit PIE3 = 0xFF30 ^ 11;
sbit PIR0 = 0xFF30 ^ 12;
sbit PIR1 = 0xFF30 ^ 13;
sbit PIR2 = 0xFF30 ^ 14;
sbit PIR3 = 0xFF30 ^ 15;
sbit PEN0 = 0xFF32 ^ 0;
sbit PEN1 = 0xFF32 ^ 1;
sbit PEN2 = 0xFF32 ^ 2;
sbit PEN3 = 0xFF32 ^ 3;
sbit PM0 = 0xFF32 ^ 4;
sbit PM1 = 0xFF32 ^ 5;
sbit PM2 = 0xFF32 ^ 6;
sbit PM3 = 0xFF32 ^ 7;
sbit PB01 = 0xFF32 ^ 12;
sbit PS2 = 0xFF32 ^ 14;
sbit PS3 = 0xFF32 ^ 15;
sbit PWMIR = 0xF17E ^ 7;
sbit PWMIE = 0xF17E ^ 6;


 sfr IDCHIP = 0xF07C;
 sfr IDMANUF = 0xF07E;
 sfr IDMEM = 0xF07A;
 sfr IDPROG = 0xF078;


 sfr IDX0 = 0xFF08;
 sfr IDX1 = 0xFF0A;
 sfr MAH = 0xFE5E;
 sfr MAL = 0xFE5C;
 sfr MCW = 0xFFDC;
 sfr MRW = 0xFFDA;
 sfr MSW = 0xFFDE;
 sfr QR0 = 0xF004;
 sfr QR1 = 0xF006;
 sfr QX0 = 0xF000;
 sfr QX1 = 0xF002;

sbit MS = 0xFFDC ^ 9;
sbit MP = 0xFFDC ^ 10;
sbit CW = 0xFFDC ^ 11;
sbit VM = 0xFFDC ^ 12;
sbit EM = 0xFFDC ^ 13;
sbit LM = 0xFFDC ^ 14;
sbit MIE = 0xFFDC ^ 15;

sbit MIR = 0xFFDE ^ 15;
sbit MSL = 0xFFDE ^ 13;
sbit ME = 0xFFDE ^ 12;
sbit MSV = 0xFFDE ^ 11;
sbit MC = 0xFFDE ^ 10;
sbit MZ = 0xFFDE ^ 9;
sbit MN = 0xFFDE ^ 8;




 sfr XP0IC = 0xF186;
 sfr XP1IC = 0xF18E;
 sfr XP2IC = 0xF196;
 sfr XP3IC = 0xF19E;
sbit XP0IR = 0xF186 ^ 7;
sbit XP0IE = 0xF186 ^ 6;
sbit XP1IR = 0xF18E ^ 7;
sbit XP1IE = 0xF18E ^ 6;
sbit XP2IR = 0xF196 ^ 7;
sbit XP2IE = 0xF196 ^ 6;
sbit XP3IR = 0xF19E ^ 7;
sbit XP3IE = 0xF19E ^ 6;



 sfr EMUCON = 0xFE0A;
#line 53 "..\\..\\SRC\\GENERAL\\io_declare.h"
 sfr BLOWER_CMD = 0xFE30;
sbit CONS_VIT = 0xFFD0 ^ 0;
sbit DEF_TURB = 0xFFC0 ^ 2;
sbit ENABLE_TURB = 0xFFC0 ^ 3;
sbit BRAKE_BLOWER = 0xFFC0 ^ 1;
sbit SPEED_BLOWER_PIN = 0xFFC0 ^ 0;




 sfr VALVE_CMD = 0xFE32;
sbit CD_VALVE = 0xFFD0 ^ 1;




 sfr VANNE_O2_CMD = 0xFE34;
sbit CD_VANNE_FIO2 = 0xFFD0 ^ 2;




 sfr PWM_BUZ = 0xFE36;
 sfr FREQ_BUZ = 0xF03E;




sbit ALIM_FAILURE_3_3V = 0xFFC0 ^ 5;
sbit ALIM_FAILURE_5VREF = 0xFFC0 ^ 6;
sbit ALIM_FAILURE_10VREF = 0xFFC0 ^ 7;




sbit USB_BUSY = 0xFFC0 ^ 10;
sbit RESET_USB = 0xFFC4 ^ 5;




sbit ALARM_REMOTE_STATE = 0xFFC0 ^ 12;
sbit RAPPEL_ALARM = 0xFFC0 ^ 14;




sbit WDOG = 0xFFC0 ^ 4;




sbit ARRET_INVOLONTAIRE = 0xFFC0 ^ 13;




sbit BUSY_MEM1 = 0xFFC0 ^ 8;
sbit BUSY_MEM2 = 0xFFC0 ^ 9;
sbit CMD_ME1 = 0xFFC0 ^ 15;
sbit ALE_ME1 = 0xFFC4 ^ 15;




sbit BHE = 0xFFC4 ^ 12;




sbit RF = 0xFFC4 ^ 7;
sbit IRQ_UART = 0xFFD4 ^ 5;




sbit TX_UART_ST = 0xFFC4 ^ 10;
sbit RX_UART_ST = 0xFFC4 ^ 11;
#line 136
sbit MRST_SPI_ALIM = 0xFFCC ^ 7;
sbit MTSR_SPI_ALIM = 0xFFCC ^ 6;
sbit CLK_SPI_ALIM = 0xFFCC ^ 5;

sbit MRST_SPI_CPU = 0xFFC4 ^ 8;
sbit MTSR_SPI_CPU = 0xFFC4 ^ 9;
sbit SCLK_SPI_CPU = 0xFFC4 ^ 13;
#line 155
sbit JUMPER_JP8 = 0xFFD4 ^ 2;
sbit JUMPER_JP7 = 0xFFD4 ^ 3;




sbit SEC_BUZ = 0xFFD0 ^ 5;




sbit MASTERBUSY = 0xFFC0 ^ 11;
#line 172
sbit INHIB_DETECTED = 0xFFC4 ^ 6;
#line 182
sbit LED_ALARME_ROUGE = 0xFFD0 ^ 7;
sbit LED_ALARME_ORANGE = 0xFFD0 ^ 6;

sbit AC_SELECT = 0xFFD4 ^ 0;
sbit DC_SELECT = 0xFFD4 ^ 1;
#line 77 "..\\..\\SRC\\HMI\\HMI_Controller.cpp"
bool EraseFlag = ((bool)0);
static bool FirstCall = ((bool)1);
#line 2395
struct MenuControlNode *GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId( struct Controller *const this,  struct MenuControlNode *_StartNode, 
__Q2_10Controller5WayId _way)
{ auto const struct EventNode *__T51164920; auto struct __T50731308 *__T51165912; auto UWORD16 (*__T51166616)(const struct EventNode *const);


auto PtrFunct__GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId__L2590 MoveFunction;

auto struct MenuControlNode *NextValidNode; auto struct MenuControlNode *CurrentNode; auto struct MenuControlNode *NextNode;

auto e_BOOL Stop = 0;


switch ((int)_way) {

case 0: MoveFunction = __T50928924;
break;

case 1: MoveFunction = __T50928992;
break;

default: MoveFunction = __T50928924;
break;}



NextValidNode = _StartNode;
CurrentNode = _StartNode;
NextNode = (GetNodeAt__10ControllerFUi(this, (((__T51164920 = ((const struct EventNode *)(((char *)((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(CurrentNode)))) + ((MoveFunction.d))))) , (__T51166616 = ((UWORD16 (*)(const struct EventNode *const))((((int)((MoveFunction.i))) < 0) ? ((MoveFunction
#line 2422
.f)) : (((__T51165912 = (((*((struct __T50731308 **)(((char *)__T51164920) + ((short)((unsigned long)((MoveFunction.f)))))))) + ((MoveFunction.i)))) , (__T51164920 = ((const struct EventNode *)(((char *)__T51164920) + ((__T51165912->d)))))) , ((__T51165912->f))))))) , (__T51166616(__T51164920)))));

do
{ auto const struct EventNode *__T51166904; auto struct __T50731308 *__T51168008; auto UWORD16 (*__T51168712)(const struct EventNode *const);

CurrentNode = NextNode;
NextNode = (GetNodeAt__10ControllerFUi(this, (((__T51166904 = ((const struct EventNode *)(((char *)((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(CurrentNode)))) + ((MoveFunction.d))))) , (__T51168712 = ((UWORD16 (*)(const struct EventNode *const))((((int)((MoveFunction.i))) < 0) ? ((MoveFunction
#line 2428
.f)) : (((__T51168008 = (((*((struct __T50731308 **)(((char *)__T51166904) + ((short)((unsigned long)((MoveFunction.f)))))))) + ((MoveFunction.i)))) , (__T51166904 = ((const struct EventNode *)(((char *)__T51166904) + ((__T51168008->d)))))) , ((__T51168008->f))))))) , (__T51168712(__T51166904)))));


if (IsValid__15MenuControlNodeFv(CurrentNode))
{
NextValidNode = CurrentNode;
Stop = 1;
}
} while ((_StartNode != NextNode) && (!(Stop)));


return NextValidNode;
}
#line 2359
struct MenuControlNode *FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId( struct Controller *const this,  struct MenuControlNode *_StartNode, 
__Q2_10Controller5WayId _Beginway)
{
auto struct MenuControlNode *NextValidNode;

if (IsValid__15MenuControlNodeFv(_StartNode))
{
return _StartNode;
}
NextValidNode = (GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, _StartNode, _Beginway));
if (NextValidNode == _StartNode)
{

auto __Q2_10Controller5WayId Way = ((__Q2_10Controller5WayId)0);
if (((int)Way) == ((int)_Beginway))
{
Way = eGoDown__10Controller;
}
NextValidNode = (GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, _StartNode, Way));
}
return NextValidNode;
}
#line 2303
void MoveToOtherNode__10ControllerFQ2_10Controller5WayId( struct Controller *const this,  __Q2_10Controller5WayId _way)
{
auto struct MenuControlNode *PtrNode;
auto struct MenuControlNode *PtrNodeTarget = ((struct MenuControlNode *)0);
#line 2305
PtrNode = (GetCurrentNode__10ControllerFv(this));



switch ((int)_way) {

case 2: PtrNodeTarget = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))))));



PtrNodeTarget = (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, PtrNodeTarget, eGoDown__10Controller));

break;

case 4: PtrNodeTarget = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))))));



PtrNodeTarget = (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, PtrNodeTarget, eGoDown__10Controller));

break;

case 0:

case 1: PtrNodeTarget = (GetNextValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, PtrNode, _way));
break;
default:
break;}



if (!(IsValid__15MenuControlNodeFv(PtrNodeTarget)))
{
PtrNodeTarget = PtrNode;
}


MoveCurrentNode__10ControllerFP15MenuControlNode(this, PtrNodeTarget); return;
}
#line 3328
void ManageLegendState__10ControllerFQ2_10Controller11LegendState( struct Controller *const this,  __Q2_10Controller11LegendState State)
{
auto UWORD16 CFrame;

switch ((int)State) {

case 0:
if (!(IsLastShutDownError__10ControllerFv(this)))
{
SetCurrentFrame__10ControllerFUi(this, 2U);
StartTimer__6VTimerFUlUii((&this->Timer), 7000UL, 0U, 0);
SetLState__10ControllerFQ2_10Controller11LegendState(this, eOnStart__10Controller);
}

else  {

SetCurrentFrame__10ControllerFUi(this, 4U);
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 2U)), eGoDown__10Controller)));
SetLState__10ControllerFQ2_10Controller11LegendState(this, eOnWait__10Controller);
}
SetMonitoringMode__10ControllerFi(this, 0);
break;

case 1:
if ((GetCurrentFrame__10ControllerFv(this)) == 2U)
{
if (IsLockOn__10ControllerFv(this))
{
auto UWORD16 _FrameId;
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_FrameId), 97U, CONFIG);
if (_FrameId == 6U) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 78U))); } else  {

MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 49U))); }
} else  {

MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 2U)), eGoDown__10Controller))); }
} else  {

MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 2U)), eGoDown__10Controller))); }

ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(this, 1, ((UBYTE *)(cMSG_StartVentil[(GetLanguage__10ControllerFv(this))])), VENTIL);
SetMonitoringMode__10ControllerFi(this, 0);
SetLState__10ControllerFQ2_10Controller11LegendState(this, eOnWait__10Controller);

ErazePage__13InterfaceCppCSFUi(3U);
break;

case 2: if (((int)(GetLState__10ControllerFv(this))) == 0)
{
ManageTimerEvent__10ControllerSFUi(0U);
}
StopTimer__6VTimerFUi((&this->Timer), 0U);


ForceQExpCalibrationStop__10ControllerFv(this);

ForceFiO2CalibrationStop__10ControllerFv(this);


HideMessageFrame__10ControllerFv(this);

CFrame = (GetCurrentFrame__10ControllerFv(this));
if (CFrame == 12U) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 2U)), eGoDown__10Controller))); }

ShowMonitoring__10ControllerFv(this);
SetLState__10ControllerFQ2_10Controller11LegendState(this, eStartVentil__10Controller);

break;

case 3:
StopAllMenuAction__10ControllerFv(this);
ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(this, 1, ((UBYTE *)(cMSG_StartVentil[(GetLanguage__10ControllerFv(this))])), VENTIL);

SetMonitoringMode__10ControllerFi(this, 0);
SetLState__10ControllerFQ2_10Controller11LegendState(this, eStopVentil__10Controller);

CFrame = (GetCurrentFrame__10ControllerFv(this));
if (CFrame == 20U) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 0U)), eGoDown__10Controller))); }
#line 3417
break;
default:
break;} return;


}
#line 4024
void GoToTopBottomFrame__10ControllerFUiQ2_10Controller5WayId( struct Controller *const this,  UWORD16 Frame,  __Q2_10Controller5WayId Way)
{
if (!(IsModifNodeOn__10ControllerFv(this)))
{
switch ((int)Way) {

case 0:
switch (Frame) {

case 4U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 0U)), eGoDown__10Controller))); break;
case 6U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 50U)), eGoDown__10Controller))); break;
case 12U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 117U)), eGoDown__10Controller))); break;
case 22U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 195U)), eGoDown__10Controller))); break;
case 26U: if (!(IsUsbCmdInProgress__10ControllerFv(this))) { MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetCurrentNode__10ControllerFv(this)), eGoDown__10Controller))); } break;
default: break;}

break;
case 1:
switch (Frame) {

case 4U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 47U)), eGoUp__10Controller))); break;
case 6U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 79U)), eGoUp__10Controller))); break;
case 12U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 134U)), eGoDown__10Controller))); break;
case 22U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 207U)), eGoDown__10Controller))); break;
case 26U: if (!(IsUsbCmdInProgress__10ControllerFv(this))) { MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetCurrentNode__10ControllerFv(this)), eGoUp__10Controller))); } break;
default: break;}

break;
default:
break;}

} return;
}
#line 5260
void SendNodeModify__10ControllerFUii( struct Controller *const this,  UWORD16 IdNode,  e_BOOL IsNotTO)
{ auto struct __T50731308 *__T51717052; auto struct __T50731308 *__T51722472; auto struct __T50731308 *__T51725596; auto struct __T50731308 *__T51726648; auto struct __T50731308 *__T51727668; auto struct __T50731308 *__T51729708; auto struct __T50731308 *__T51730728; auto struct __T50731308 *
#line 5261
__T51732832; auto struct __T50731308 *__T51736084; auto struct __T50731308 *__T51738188; auto struct __T50731308 *__T51744900;
auto UWORD16 Val;

switch (IdNode) {


case 0U:
ManageModeChange__10ControllerFv(this);
break;


case 2U:
if (IsNotTO)
{
(__T51717052 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((
#line 5275
__T51717052->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))) + ((__T51717052->d))))));
(__T51717052 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((
#line 5276
__T51717052->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))) + ((__T51717052->d))))));
(__T51717052 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 5277
__T51717052->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl)))) + ((__T51717052->d))))));
(__T51717052 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((
#line 5278
__T51717052->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))) + ((__T51717052->d))))));
(__T51717052 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 5279
__T51717052->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl)))) + ((__T51717052->d))))));
}
break;

case 12U:
if (IsNotTO)
{
(__T51722472 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51722472->f)))(((struct LabelTabOneValue 
#line 5286
*)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))) + ((__T51722472->d))))));
(__T51722472 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((__T51722472->f)))(((struct LabelTabTwoValue 
#line 5287
*)(((char *)((struct LabelTabTwoValue *)(&this->LOVPiMbar))) + ((__T51722472->d))))));
(__T51722472 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51722472->f)))(((struct 
#line 5288
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51722472->d))))));
}
break;
case 22U:
if (IsNotTO)
{
(__T51725596 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelOneValueDefault *)(&this->LOVApnee)))))))).__vptr)) + 15)) , (((void (*)(struct LabelOneValue *const))((__T51725596->f)))(((struct LabelOneValue *)(((
#line 5294
char *)((struct LabelOneValue *)((struct LabelOneValueDefault *)(&this->LOVApnee)))) + ((__T51725596->d))))));
}
break;
case 4U:
case 6U:
if (IsNotTO)
{

(__T51726648 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVPiMax)))))).__vptr)) + 15)) , (((void (*)(struct LabelOneValue *const))((__T51726648->f)))(((struct LabelOneValue *)(((char *)(&this->LOVPiMax)) + ((__T51726648->d))))));

if (IdNode == 6U)
{
(__T51727668 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51727668->f)))(((struct LabelTabOneValue 
#line 5306
*)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))) + ((__T51727668->d))))));
(__T51727668 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((__T51727668->f)))(((struct LabelTabTwoValue 
#line 5307
*)(((char *)((struct LabelTabTwoValue *)(&this->LOVPiMbar))) + ((__T51727668->d))))));
}
}
break;
case 8U:
case 10U:
if (IsNotTO)
{

(__T51729708 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVPiMax)))))).__vptr)) + 15)) , (((void (*)(struct LabelOneValue *const))((__T51729708->f)))(((struct LabelOneValue *)(((char *)(&this->LOVPiMax)) + ((__T51729708->d))))));

if (IdNode == 10U)
{
(__T51730728 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51730728->f)))(((struct LabelTabOneValue 
#line 5320
*)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))) + ((__T51730728->d))))));
(__T51730728 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((__T51730728->f)))(((struct LabelTabTwoValue 
#line 5321
*)(((char *)((struct LabelTabTwoValue *)(&this->LOVPiMbar))) + ((__T51730728->d))))));
}
}
break;
case 16U:
if (IsNotTO)
{
(__T51732832 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51732832->f)))(((struct 
#line 5328
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51732832->d))))));
(__T51732832 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((
#line 5329
__T51732832->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))) + ((__T51732832->d))))));
(__T51732832 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 5330
__T51732832->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS)))) + ((__T51732832->d))))));
}
break;
case 14U:
if (IsNotTO)
{
(__T51736084 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51736084->f)))(((struct LabelTabOneValue 
#line 5336
*)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))) + ((__T51736084->d))))));
(__T51736084 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((__T51736084->f)))(((struct LabelTabTwoValue 
#line 5337
*)(((char *)((struct LabelTabTwoValue *)(&this->LOVPiMbar))) + ((__T51736084->d))))));
}
break;

case 20U:
if (IsNotTO)
{
(__T51738188 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51738188->f)))(((struct 
#line 5344
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51738188->d))))));
}
break;

case 24U:
if (IsNotTO)
{ auto struct __T50731308 *__T51739272; auto struct __T50731308 *__T51741520;

auto UWORD16 Value; Value = (GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LOVTrigI))));

(__T51739272 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFRMini)))))).__vptr)) + 19)) , (((void (*)(struct LabelOneValue *const))((__T51739272->f)))(((struct LabelOneValue *)(((char *)(&this->LOVFRMini)) + ((__T51739272->d))))));
if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFRMini)))))) { auto struct __T50731308 *__T51740356; (__T51740356 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVFRMini)))))).
#line 5355
__vptr)) + 16)) , (((void (*)(struct LabelOneValue *const))((__T51740356->f)))(((struct LabelOneValue *)(((char *)(&this->LOVFRMini)) + ((__T51740356->d)))))); }

if ((((int)(GetCurrentMode__10ControllerFv(this))) == 0) || (((int)(GetCurrentMode__10ControllerFv(this))) == 1))
{
ChangeNameMode__10ControllerFi(this, ((e_BOOL)Value));
}

if (IsNodeInTree__10ControllerF12e_MODE_TYPESUiN22(this, ((this->CurrentMode)), 70U, 50U, 78U))
{

(__T51741520 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51741520->f)))(((struct 
#line 5365
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51741520->d))))));
}
}
break;

case 34U: if (IsNotTO)
{ auto struct __T50731308 *__T51742636;


auto UWORD16 Value;
#line 5372
(__T51742636 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((__T51742636->f)))(((struct 
#line 5372
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51742636->d))))));
(__T51742636 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((
#line 5373
__T51742636->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))) + ((__T51742636->d))))));

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), (GetIdFlag__17LabelOneValueFlagFv((&this->LOVFSecu))), (GetDbIdFlag__17LabelOneValueFlagFv((&this->LOVFSecu))));


if (((int)(GetCurrentMode__10ControllerFv(this))) == 2)
{
ChangeNameMode__10ControllerFi(this, ((e_BOOL)(!(Value))));
}
SetFSecuEnable__10ControllerFv(this);
}
break;


case 40U:
if (IsNotTO)
{
(__T51744900 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((
#line 5390
__T51744900->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))) + ((__T51744900->d))))));
(__T51744900 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 5391
__T51744900->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl)))) + ((__T51744900->d))))));
(__T51744900 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 41)) , (((void (*)(struct LabelTabOneValue *const))((
#line 5392
__T51744900->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))) + ((__T51744900->d))))));
(__T51744900 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 5393
__T51744900->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl)))) + ((__T51744900->d))))));

SetVtCibleEnable__10ControllerFv(this);
}
break;

case 26U:
if (IsNotTO)
{

SetSoupirEnable__10ControllerFv(this);
}
break;

case 47U:
if (IsNotTO)
{
auto e_BOOL ChangeMode;


ChangeMode = ((e_BOOL)(GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTVChgtModeV)))));
if (ChangeMode)
{
StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetConsultMode__10ControllerFv(this)));

Val = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 2U, CONTROL);
}

else  {
StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetCurrentMode__10ControllerFv(this)));
}
}

else  {
StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetCurrentMode__10ControllerFv(this)));
}
break;


case 50U:
ManageModeChange__10ControllerFv(this);
break;

case 79U:
if (IsNotTO)
{
auto e_BOOL ChangeMode;

ChangeMode = ((e_BOOL)(GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LOVChgtModeA)))));
if (ChangeMode)
{


auto UWORD16 Val;
#line 5445
StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetConsultMode__10ControllerFv(this)));

Val = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 2U, CONTROL);

}

else  {
StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetCurrentMode__10ControllerFv(this)));
}

}

else  {

StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetCurrentMode__10ControllerFv(this)));
}
break;


case 84U:
if (IsNotTO)
{
auto UWORD16 Language;

Language = (GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LVSLanguage))));
if (Language != (GetLanguage__10ControllerFv(this)))
{
ChangeLanguage__10ControllerFUi(this, Language);
}
}
break;

case 86U:
if (IsNotTO)
{

auto UWORD16 Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 6U, RTC);
}
break;

case 90U:
if (IsNotTO)
{

auto UWORD16 Value = 2U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 6U, RTC);
}
break;

case 109U:
if (IsNotTO)
{

auto e_BOOL _ModeCycl; _ModeCycl = ((e_BOOL)(GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&(*(GetInstance__10HMI_Setup1SFv())).LVSModeCycl)))));
SetMCycl__10ControllerFi(this, _ModeCycl);
}
break;

case 96U:
if (IsNotTO)
{

auto UWORD16 _Val; _Val = (GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LVSPressureUnit))));
SetPressureUnit__10ControllerFUi(this, _Val);
}
break;

case 113U:
if (IsNotTO)
{

auto e_BOOL _ConvTrigE; _ConvTrigE = ((e_BOOL)(GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&(*(GetInstance__10HMI_Setup1SFv())).LVSConvTrigE)))));
SetConvTrigE__10ControllerFi(this, _ConvTrigE);
}
break;



case 119U:
if (IsNotTO)
{
SetBrightness__10ControllerFUi(this, ((this->LastBrightness)));
}
break;

case 125U:
if (IsNotTO)
{
auto e_BOOL _ApneaAlarm; _ApneaAlarm = ((e_BOOL)(GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LVSApneaAlarm)))));
SetInhibApneaOk__10ControllerFi(this, ((e_BOOL)(!(_ApneaAlarm == 1))));
}
break;

default: break;} return;

}
#line 5553
void ChangeNameMode__10ControllerFi( struct Controller *const this,  e_BOOL IsLongNameMode)
{
auto e_BOOL Refresh = 0;
if (!(IsModeChange__10ControllerFv(this)))
{
if (IsLongNameMode)
{
Refresh = (IsNameMode2Display__9LabelModeFv((&this->LModeVent)));
SetNameMode2Display__9LabelModeFi((&this->LModeAlarm), 0);
SetNameMode2Display__9LabelModeFi((&this->LModeVent), 0);
SetNameMode2Display__10FrameGraphFi((&this->FGraph), 0);
}

else  {
Refresh = ((e_BOOL)(!(IsNameMode2Display__9LabelModeFv((&this->LModeVent)))));
SetNameMode2Display__9LabelModeFi((&this->LModeAlarm), 1);
SetNameMode2Display__9LabelModeFi((&this->LModeVent), 1);
SetNameMode2Display__10FrameGraphFi((&this->FGraph), 1);
}

if (Refresh)
{ auto struct __T50731308 *__T51753888;
(__T51753888 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)(&this->LModeAlarm))))).__vptr)) + 19)) , (((void (*)(struct LabelMode *const))((__T51753888->f)))(((struct LabelMode *)(((char *)(&this->LModeAlarm)) + ((__T51753888->d))))));
(__T51753888 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)(&this->LModeVent))))).__vptr)) + 19)) , (((void (*)(struct LabelMode *const))((__T51753888->f)))(((struct LabelMode *)(((char *)(&this->LModeVent)) + ((__T51753888->d))))));
(__T51753888 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)(&this->LModeAlarm))))).__vptr)) + 16)) , (((void (*)(struct LabelMode *const))((__T51753888->f)))(((struct LabelMode *)(((char *)(&this->LModeAlarm)) + ((__T51753888->d))))));
(__T51753888 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)(&this->LModeVent))))).__vptr)) + 16)) , (((void (*)(struct LabelMode *const))((__T51753888->f)))(((struct LabelMode *)(((char *)(&this->LModeVent)) + ((__T51753888->d))))));
}
} return;
}
#line 4003
void ShowBattery__10ControllerFi( struct Controller *const this,  e_BOOL Visible)
{
SetBatVisible__16FrameVentilationFiT1((&this->FVentilation), Visible, ((e_BOOL)(!(IsModeChange__10ControllerFv(this)))));
SetBatVisible__11FrameAlarmeFiT1((&this->FAlarme), Visible, ((e_BOOL)(!(IsModeChange__10ControllerFv(this)))));
if ((GetCurrentFrame__10ControllerFv(this)) == 18U) {
IsBatVisible__16FrameVoltControlFv((&this->FVoltControl)); }
IsBatVisible__10FrameGraphFv((&this->FGraph)); return;
}
#line 7507
void ShowTempBattery__10ControllerFi( struct Controller *const this,  e_BOOL Flag)
{ auto struct __T50731308 *__T51973432;
if (Flag)
{ auto struct __T50731308 *__T51972364;
(__T51972364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVTempBat)))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T51972364->f)))(((struct LabelOneValue *)(((char *)(&this->LOVTempBat)) + ((__T51972364->d))))));
}

else  {
(__T51973432 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVTempBat)))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T51973432->f)))(((struct LabelOneValue *)(((char *)(&this->LOVTempBat)) + ((__T51973432->d))))));
} return;
}
#line 487
void SetHighPressAlarmToBeRemoved__10ControllerFi( struct Controller *const this,  e_BOOL _ToBeRemoved)
{
(this->HighPressAlarmToBeRemoved) = _ToBeRemoved; return;
}

e_BOOL HasHighPressAlarmToBeRemoved__10ControllerFv( struct Controller *const this)
{
return (this->HighPressAlarmToBeRemoved);
}
#line 331
e_BOOL IsVtCibleEnable__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 47U, ADJUST);
return (e_BOOL)Val;
}
#line 349
void SetVtCibleEnable__10ControllerFv( struct Controller *const this)
{
ManageLineMenuVentil__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 40U))); return;
}
#line 292
e_BOOL IsFSecuEnable__10ControllerFv( struct Controller *const this)
{
auto e_BOOL rc = 0;


if (((int)((this->CurrentMode))) == 5) {
rc = 0; } else  {
if ((((int)((this->CurrentMode))) == 3) || (((int)((this->CurrentMode))) == 4)) {
rc = 1; }

else  {
auto UWORD16 Val;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 36U, ADJUST);

rc = ((e_BOOL)(!(Val)));
} }
return rc;
}

void SetFSecuEnable__10ControllerFv( struct Controller *const this)
{
ManageLineMenuVentil__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 34U))); return;
}

e_BOOL IsSoupirEnable__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 51U, ADJUST);
return (e_BOOL)Val;
}

void SetSoupirEnable__10ControllerFv( struct Controller *const this)
{
ManageLineMenuVentil__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 26U))); return;
}
#line 340
e_BOOL IsInhibApneaEnable__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 92U, CONFIG);
return (e_BOOL)Val;
}
#line 4227
UWORD16 RebuildEventNodeTree__10ControllerF12e_MODE_TYPESUiT2( struct Controller *const this,  e_MODE_TYPES Mode, 
UWORD16 FirstNode, 
UWORD16 LastNode)
{
auto struct MenuControlNode *Node;
auto struct MenuControlNode *BackUpNode;
auto UWORD16 NodeId; auto UWORD16 Order; auto UWORD16 PreviousId; auto UWORD16 NextId;
auto UWORD16 FirstNodeId; auto UWORD16 LastNodeId;
auto UWORD16 count = 0U;


FirstNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, FirstNode)))))));
LastNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, LastNode)))))));


Node = (GetNodeAt__10ControllerFUi(this, FirstNode));
BackUpNode = Node;
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
Order = (GetOrderWithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, Mode));

do
{
if (!(IsModifyNode__5ToolsSFUi(NodeId)))
{
if (Order >= 1U)
{
PreviousId = (GetIdFromOrder__5ToolsSFUi12e_MODE_TYPESN21((Order - 1U), Mode, FirstNodeId, LastNodeId));
SetIdNodeOnUp__9EventNodeFUi((GetEventNode__15MenuControlNodeFv(Node)), (GetNodeIdFromEventId__10ControllerFUi(this, PreviousId)));
}

NextId = (GetIdFromOrder__5ToolsSFUi12e_MODE_TYPESN21((Order + 1U), Mode, FirstNodeId, LastNodeId));
SetIdNodeOnDown__9EventNodeFUi((GetEventNode__15MenuControlNodeFv(Node)), (GetNodeIdFromEventId__10ControllerFUi(this, NextId)));
BackUpNode = Node;
count++;
}

Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
Order = (GetOrderWithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, Mode));
} while (Node != (GetNodeAt__10ControllerFUi(this, LastNode)));



SetIdNodeOnUp__9EventNodeFUi((GetEventNode__15MenuControlNodeFv(Node)), (GetNodeIdFromEventId__10ControllerFUi(this, (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(BackUpNode))))))));

return count;
}
#line 4286
void RebuildEventNodeTreeForAllModes__10ControllerFUiT1( struct Controller *const this,  UWORD16 FirstNode, 
UWORD16 LastNode)
{
auto UWORD16 i;

for (i = 0U; (i < 6U); i++)
{
RebuildEventNodeTree__10ControllerF12e_MODE_TYPESUiT2(this, ((e_MODE_TYPES)i), FirstNode, LastNode);
} return;
}
#line 4357
UWORD16 GetNodeIdFromEventId__10ControllerFUi( struct Controller *const this,  UWORD16 _Id)
{
auto UWORD16 i;
for (i = 0U; (i < 222U); i++)
{
if ((GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, i))))))) == _Id) {
return GetLinkedMenuControlNodeId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, i)))))); }
}
return 0U;
}
#line 4314
UWORD32 IsNodeInTree__10ControllerF12e_MODE_TYPESUiN22( struct Controller *const this,  e_MODE_TYPES Mode, 
UWORD16 NodeToFind, 
UWORD16 FirstNode, 
UWORD16 LastNode)
{
auto struct MenuControlNode *Node;
auto UWORD16 NodeId; auto UWORD16 Order;


Node = (GetNodeAt__10ControllerFUi(this, FirstNode));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));

do
{
if (!(IsModifyNode__5ToolsSFUi(NodeId)))
{
if (NodeId == NodeToFind)
{
Order = (GetOrderWithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, Mode));
return 2147483648UL | ((unsigned long)Order);
}
}

Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
} while (Node != (GetNodeAt__10ControllerFUi(this, LastNode)));


return 0UL;
}
#line 726
void SetMCycl__10ControllerFi( struct Controller *const this,  e_BOOL _ModeCycl)
{

SetIESelected__16FrameVentilationFi((&this->FVentilation), _ModeCycl);
SetIESelected__11FrameAlarmeFi((&this->FAlarme), _ModeCycl);
SetIESelected__10FrameGraphFi((&this->FGraph), _ModeCycl); return;
}
#line 671
void SetPressureUnit__10ControllerFUi( struct Controller *const this,  UWORD16 _Val)
{ auto struct __T50731308 *__T50986192;
auto e_BOOL _IsVisible;
auto UWORD16 _SizeName; auto UWORD16 _SizeName2;



auto UBYTE **_PressureUnit;
#line 677
SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LVSPressureUnit)), _Val);
_PressureUnit = (GetItem__17LabelStringNItemsFUi((&this->LVSPressureUnit), _Val));


SetNameUnit__13LabelOneValueFPPUc((&this->LOVPi), _PressureUnit);
SetNameUnit__13LabelOneValueFPPUc((&this->LOVPSupport), _PressureUnit);
SetNameUnit__13LabelOneValueFPPUc((&this->LOVPControl), _PressureUnit);
SetNameUnit__13LabelOneValueFPPUc((&this->LOVPi2), _PressureUnit);
SetNameUnit__13LabelOneValueFPPUc(((struct LabelOneValue *)((struct LabelOneValueDefault *)(&this->LOVPe))), _PressureUnit);
SetNameUnit__13LabelOneValueFPPUc((&this->LOVPiMax), _PressureUnit);

_IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)(&this->LOVPatientPressure)))))))));
(__T50986192 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)(&this->LOVPatientPressure))))))))).__vptr)) + 13)) , (((void (*)(struct ManualCalibTwoValue *const, e_BOOL))((
#line 689
__T50986192->f)))(((struct ManualCalibTwoValue *)(((char *)(&this->LOVPatientPressure)) + ((__T50986192->d)))), 0));
SetNameUnit__13LabelOneValueFPPUc(((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)(&this->LOVPatientPressure)))), _PressureUnit);
SetNameUnit2__19ManualCalibTwoValueFPPUc((&this->LOVPatientPressure), _PressureUnit);
(__T50986192 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)(&this->LOVPatientPressure))))))))).__vptr)) + 13)) , (((void (*)(struct ManualCalibTwoValue *const, e_BOOL))((
#line 692
__T50986192->f)))(((struct ManualCalibTwoValue *)(((char *)(&this->LOVPatientPressure)) + ((__T50986192->d)))), _IsVisible));

_IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVValvePressure)))))));
(__T50986192 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVValvePressure))))))).__vptr)) + 13)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T50986192->f)))(((struct LabelOneValue *)(((char *)((struct 
#line 695
LabelOneValue *)(&this->LOVValvePressure))) + ((__T50986192->d)))), 0));
SetNameUnit__13LabelOneValueFPPUc(((struct LabelOneValue *)(&this->LOVValvePressure)), _PressureUnit);
(__T50986192 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVValvePressure))))))).__vptr)) + 13)) , (((void (*)(struct LabelOneValue *const, e_BOOL))((__T50986192->f)))(((struct LabelOneValue *)(((char *)((struct 
#line 697
LabelOneValue *)(&this->LOVValvePressure))) + ((__T50986192->d)))), _IsVisible));

SetNameUnit__13LabelOneValueFPPUc(((struct LabelOneValue *)(&this->LOVPMax)), _PressureUnit);

SetNameLabel2__25LabelTabTwoValueTwoLabelsFPPUc((&this->LOVPiMbar), _PressureUnit);
_SizeName = (GetStringPixelSize__5ToolsSFPUcUi(((__T50986192 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 30)) , (((UBYTE *(*)(struct Label *const))((
#line 702
__T50986192->f)))(((struct Label *)(((char *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))) + ((__T50986192->d))))))), (GetFontLabel__5LabelFv(((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct 
#line 702
LabelTabTwoValue *)(&this->LOVPiMbar)))))))));
_SizeName2 = (GetStringPixelSize__5ToolsSFPUcUi((GetNameLabel2__25LabelTabTwoValueTwoLabelsFv((&this->LOVPiMbar))), (GetFontLabel__5LabelFv(((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))));
if ((_SizeName + _SizeName2) >= 54U)
{

SetLabel2LineOffset__25LabelTabTwoValueTwoLabelsFUi((&this->LOVPiMbar), 12U);
SetLabel2ColOffset__25LabelTabTwoValueTwoLabelsFUi((&this->LOVPiMbar), 12U);
}

else  {

SetLabel2LineOffset__25LabelTabTwoValueTwoLabelsFUi((&this->LOVPiMbar), 0U);
SetLabel2ColOffset__25LabelTabTwoValueTwoLabelsFUi((&this->LOVPiMbar), (_SizeName + 2U));
}



SetPressureUnit__16FrameVentilationFPPUc((&this->FVentilation), _PressureUnit);
SetPressureUnit__10FrameGraphFPPUc((&this->FGraph), _PressureUnit);
SetPressureUnit__11FrameAlarmeFPPUc((&this->FAlarme), _PressureUnit);
SetPressureUnit__13FrameTendanceFPPUc((&this->FTendance), _PressureUnit); return;

}
#line 752
void SetValve__10ControllerFi( struct Controller *const this,  e_BOOL _ValveDetected)
{

auto e_MODE_TYPES Mode;
auto UWORD16 Val; auto UWORD16 i;

auto UWORD16 FuiteNodeId; auto UWORD16 VteNodeId;


if (((this->ValveDetected)) != _ValveDetected)
{ auto struct Controller *__T51001084; auto __Q2_10Controller11PController __T51001484; auto struct __T50731308 *__T51002316; auto void (*__T51003020)(struct Controller *const);__Q2_10Controller11PController __T51001292;

((__T51001084 = ((struct Controller *)(((char *)this) + ((__T51001292 = (__T51001484 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this))))).OnTimeOut))), __T51001292.d))))) , (__T51003020 = ((void (*)(struct Controller *const))((((int)((__T51001484.i))) < 0) ? ((
#line 764
__T51001484.f)) : (((__T51002316 = (((*((struct __T50731308 **)(((char *)__T51001084) + ((short)((unsigned long)((__T51001484.f)))))))) + ((__T51001484.i)))) , (__T51001084 = ((struct Controller *)(((char *)__T51001084) + ((__T51002316->d)))))) , ((__T51002316->f))))))) , (__T51003020(__T51001084));



ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 1U, CONFIG);
Mode = ((e_MODE_TYPES)Val);

FuiteNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 63U)))))));
VteNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 58U)))))));


HideAlarm__10ControllerF12e_MODE_TYPESUi(this, Mode, FuiteNodeId);
HideAlarm__10ControllerF12e_MODE_TYPESUi(this, Mode, VteNodeId);


for (i = 0U; (i < 6U); i++)
{


if ((((i) && (i != 3U)) && (i != 4U)) && (i != 5U)) {
SwitchDisplayConfigForOneMode__5ToolsSFUiT112e_MODE_TYPES(FuiteNodeId, VteNodeId, ((e_MODE_TYPES)i)); }
}


RebuildEventNodeTree__10ControllerF12e_MODE_TYPESUiT2(this, Mode, 50U, 78U);


ShowAlarm__10ControllerF12e_MODE_TYPESUi(this, Mode, FuiteNodeId);
ShowAlarm__10ControllerF12e_MODE_TYPESUi(this, Mode, VteNodeId);


if ((GetCurrentFrame__10ControllerFv(this)) == 6U)
{
if (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, FuiteNodeId)))) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, FuiteNodeId))); }
if (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, VteNodeId)))) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, VteNodeId))); }
}

(this->ValveDetected) = _ValveDetected;

if ((this->MonitoringMode))
{

SetMonitoringMode__10ControllerFi(this, 1);
}
} return;
}
#line 843
void SendInfoValve__10ControllerFi( struct Controller *const this,  e_BOOL _ValveDetected)
{
SetValve__16FrameVentilationFiT1((&this->FVentilation), _ValveDetected, ((e_BOOL)(!(IsModeChange__10ControllerFv(this)))));
SetValve__11FrameAlarmeFiT1((&this->FAlarme), _ValveDetected, ((e_BOOL)(!(IsModeChange__10ControllerFv(this)))));
SetValve__10FrameGraphFiT1((&this->FGraph), _ValveDetected, ((e_BOOL)(((this->CurrentVirtualFrame)) == 20U)));
SetValve__10ControllerFi(this, _ValveDetected); return;
}

void SetPressConvention__10ControllerFi( struct Controller *const this,  e_BOOL _Conv)
{

if (_Conv)
{

SetOnButtonUp__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 5U)))), __T50909376);
SetOnButtonDown__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 5U)))), __T50909444);


SetOnButtonUp__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 7U)))), __T50909376);
SetOnButtonDown__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 7U)))), __T50909444);


SetOnButtonUp__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 43U)))), __T50909376);
SetOnButtonDown__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 43U)))), __T50909444);


SetOnButtonUp__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 9U)))), __T50909376);
SetOnButtonDown__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 9U)))), __T50909444);


SetOnButtonUp__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 11U)))), __T50909376);
SetOnButtonDown__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 11U)))), __T50909444);


SetOnButtonUp__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 15U)))), __T50909512);
SetOnButtonDown__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 15U)))), __T50909580);
}

SetPressConvention__16FrameVentilationFi((&this->FVentilation), _Conv); return;
}

void SendInfoBlocExpi__10ControllerFi( struct Controller *const this,  e_BOOL _BlocExpiDetected)
{
SetBlocExpi__10FrameGraphFiT1((&this->FGraph), _BlocExpiDetected, ((e_BOOL)(((this->CurrentVirtualFrame)) == 20U))); return;
}
#line 3609
void SetExhalFlowUsed__10ControllerFi( struct Controller *const this,  e_BOOL Flag)
{ auto struct __T50731308 *__T51441732;
SetExhalFlowUsed__16FrameVentilationFiT1((&this->FVentilation), Flag, ((e_BOOL)(4U == (GetCurrentFrame__10ControllerFv(this)))));
SetExhalFlowUsed__10FrameGraphFiT1((&this->FGraph), Flag, ((e_BOOL)(20U == ((this->CurrentVirtualFrame)))));

(this->ExhalFlowUsed) = Flag;


if (IsRefreshObject__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl)))))))))
{
if (Flag) { auto struct __T50731308 *__T51440472;
(__T51440472 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3620
__T51440472->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))) + ((__T51440472->d)))))); } else  {

(__T51441732 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3622
__T51441732->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))) + ((__T51441732->d)))))); }
} return;
}
#line 889
void SendInfoFio2Sensor__10ControllerFi( struct Controller *const this,  e_BOOL _IsOk)
{
if ((IsVentilOn__10ControllerFv(this)) || ((GetCurrentFrame__10ControllerFv(this)) == 14U))
{
Fio2MonitorEnabled__16FrameVentilationFi((&this->FVentilation), _IsOk);
Fio2MonitorEnabled__11FrameAlarmeFi((&this->FAlarme), _IsOk);
Fio2MonitorEnabled__10FrameGraphFiT1((&this->FGraph), _IsOk, ((e_BOOL)(!((GetCurrentFrame__10ControllerFv(this)) == 20U))));
Fio2MonitorEnabled__10ControllerFi(this, _IsOk);
}

else  {
Fio2MonitorEnabled__16FrameVentilationFi((&this->FVentilation), 0);
Fio2MonitorEnabled__11FrameAlarmeFi((&this->FAlarme), 0);
Fio2MonitorEnabled__10FrameGraphFiT1((&this->FGraph), 0, ((e_BOOL)(!((GetCurrentFrame__10ControllerFv(this)) == 20U))));
Fio2MonitorEnabled__10ControllerFi(this, 0);
} return;
}

void SendInfoSpo2Sensor__10ControllerFi( struct Controller *const this,  e_BOOL _IsOk)
{
if (_IsOk)
{
if (IsVentilOn__10ControllerFv(this))
{
Spo2MonitorEnabled__16FrameVentilationFi((&this->FVentilation), _IsOk);
Spo2MonitorEnabled__11FrameAlarmeFi((&this->FAlarme), _IsOk);
Spo2MonitorEnabled__10FrameGraphFiT1((&this->FGraph), _IsOk, ((e_BOOL)(!((GetCurrentFrame__10ControllerFv(this)) == 20U))));

Spo2MonitorEnabled__10ControllerFi(this, _IsOk);
}
}

else  {
Spo2MonitorEnabled__16FrameVentilationFi((&this->FVentilation), _IsOk);
Spo2MonitorEnabled__11FrameAlarmeFi((&this->FAlarme), _IsOk);
Spo2MonitorEnabled__10FrameGraphFiT1((&this->FGraph), _IsOk, ((e_BOOL)(!((GetCurrentFrame__10ControllerFv(this)) == 20U))));

Spo2MonitorEnabled__10ControllerFi(this, _IsOk);
} return;
}

void SendInfoBadSupplyCheck__10ControllerFi( struct Controller *const this,  e_BOOL _IsBad)
{
BadSupplyCheck__16FrameBatteryMenuFi((&this->FBatteryMenu), _IsBad); return;
}
#line 1043
void UsbMoveCurrentNode__10ControllerFP15MenuControlNodei( struct Controller *const this,  struct MenuControlNode *_CurrentNode,  e_BOOL _forced)
{
auto UWORD16 Val1; auto UWORD16 Val2;
auto e_BOOL active;



ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val1), 8U, USB);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val2), 9U, USB);
active = (IsOneAlarmActive__13InterfaceCppCSFv());

if (((((Val1 == 1U) && (Val2 == 1U)) && (!(IsModeChange__10ControllerFv(this)))) && (!(active))) || (_forced))




{
auto UWORD16 _IdNode; _IdNode = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if (IsModifyNode__5ToolsSFUi(_IdNode))
{ auto struct Controller *__T51045600; auto __Q2_10Controller11PController __T51046000; auto struct __T50731308 *__T51046832; auto void (*__T51047536)(struct Controller *const);__Q2_10Controller11PController __T51045808;


((__T51045600 = ((struct Controller *)(((char *)this) + ((__T51045808 = (__T51046000 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this))))).OnTimeOut))), __T51045808.d))))) , (__T51047536 = ((void (*)(struct Controller *const))((((int)((__T51046000.i))) < 0) ? ((
#line 1065
__T51046000.f)) : (((__T51046832 = (((*((struct __T50731308 **)(((char *)__T51045600) + ((short)((unsigned long)((__T51046000.f)))))))) + ((__T51046000.i)))) , (__T51045600 = ((struct Controller *)(((char *)__T51045600) + ((__T51046832->d)))))) , ((__T51046832->f))))))) , (__T51047536(__T51045600));
StopTimer__10ControllerFUi(this, 3U);
}
MoveCurrentNode__10ControllerFP15MenuControlNode(this, _CurrentNode);
} return;
}

void UsbUpdateNavigNodes__10ControllerFUi( struct Controller *const this,  UWORD16 _NodeId)
{
SetIdNodeOnMonitor__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 194U)))), _NodeId);
SetIdNodeOnMonitor__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 81U)))), _NodeId);
SetIdNodeOnDown__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 81U)))), _NodeId);
SetIdNodeOnUp__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 81U)))), _NodeId); return;
}
#line 835
void Spo2MonitorEnabled__10ControllerFi( struct Controller *const this,  e_BOOL _IsOk)
{ auto struct __T50731308 *__T51016364;
if (_IsOk) { auto struct __T50731308 *__T51015104;
(__T51015104 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 838
__T51015104->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))) + ((__T51015104->d)))))); } else  {

(__T51016364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 840
__T51016364->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))) + ((__T51016364->d)))))); } return;
}
#line 813
void Fio2MonitorEnabled__10ControllerFi( struct Controller *const this,  e_BOOL _IsOk)
{ auto struct __T50731308 *__T51008292; auto struct __T50731308 *__T51009408; auto struct __T50731308 *__T51010524; auto struct __T50731308 *__T51011672;
if (_IsOk)
{ auto struct __T50731308 *__T51007064;
(__T51007064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 817
__T51007064->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))) + ((__T51007064->d))))));
if ((GetCurrentFrame__10ControllerFv(this)) == 14U) {
(__T51008292 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)(&this->LOVFiO2Concent)))))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T51008292->f)))(((struct LabelOneValue *)(((
#line 819
char *)((struct LabelOneValue *)((struct AutoCalibValue *)(&this->LOVFiO2Concent)))) + ((__T51008292->d)))))); }
}

else  {
(__T51009408 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 823
__T51009408->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))) + ((__T51009408->d))))));
if ((GetCurrentFrame__10ControllerFv(this)) == 14U) {
(__T51010524 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)(&this->LOVFiO2Concent)))))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T51010524->f)))(((struct LabelOneValue *)(((
#line 825
char *)((struct LabelOneValue *)((struct AutoCalibValue *)(&this->LOVFiO2Concent)))) + ((__T51010524->d)))))); }
}

if (IsNodeInTree__10ControllerF12e_MODE_TYPESUiN22(this, ((this->CurrentMode)), 65U, 50U, 78U))
{
(__T51011672 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))))))).__vptr)) + 17)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 830
__T51011672->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2)))) + ((__T51011672->d))))));
(__T51011672 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))))))).__vptr)) + 16)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 831
__T51011672->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2)))) + ((__T51011672->d))))));
} return;
}
#line 375
e_BOOL IsFio2Sensor__10ControllerFv( struct Controller *const this)
{

auto UWORD16 Value = 0U;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 77U, CONTROL);
return (e_BOOL)Value;
}

e_BOOL IsSpo2Sensor__10ControllerFv( struct Controller *const this)
{

auto UWORD16 Value = 0U;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 76U, CONTROL);
return (e_BOOL)(!(Value));
}
#line 734
void SetConvTrigE__10ControllerFi( struct Controller *const this,  e_BOOL _ConvTrigE)
{


SetTrigEPosSelected__10ControllerFi(this, _ConvTrigE); return;
}

void SetInhibApneaOk__10ControllerFi( struct Controller *const this,  e_BOOL _ApneaAlarm)
{

SetInhibApneaOk__16FrameVentilationFi((&this->FVentilation), _ApneaAlarm);
SetInhibApneaOk__11FrameAlarmeFi((&this->FAlarme), _ApneaAlarm);
IsInhibApneaAlarmVisible__10FrameGraphFv((&this->FGraph));


ChangeMenuWithMode__10ControllerF12e_MODE_TYPES(this, ((this->CurrentMode))); return;
}
#line 1080
void SetTrigEPosSelected__10ControllerFi( struct Controller *const this,  e_BOOL _TrigEPosSelected)
{
auto e_MODE_TYPES Mode;
auto UWORD16 Val;

auto UWORD16 TrigEPosNodeId; auto UWORD16 TrigENegNodeId;

if (((this->TrigEPosSelected)) != _TrigEPosSelected)
{

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 1U, CONFIG);
Mode = ((e_MODE_TYPES)Val);

TrigEPosNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 32U)))))));
TrigENegNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 44U)))))));


HideVentil__10ControllerF12e_MODE_TYPESUi(this, Mode, TrigEPosNodeId);
HideVentil__10ControllerF12e_MODE_TYPESUi(this, Mode, TrigENegNodeId);


SwitchDisplayConfigForAllModes__5ToolsSFUiT1(TrigEPosNodeId, TrigENegNodeId);


RebuildEventNodeTree__10ControllerF12e_MODE_TYPESUiT2(this, Mode, 0U, 46U);


ShowVentil__10ControllerF12e_MODE_TYPESUi(this, Mode, TrigEPosNodeId);
ShowVentil__10ControllerF12e_MODE_TYPESUi(this, Mode, TrigENegNodeId);

(this->TrigEPosSelected) = _TrigEPosSelected;
} return;
}
#line 4433
void HideVentil__10ControllerF12e_MODE_TYPES( struct Controller *const this,  e_MODE_TYPES Mode)
{
auto struct MenuControlNode *Node;
auto UWORD16 NodeId;
Mode = Mode;

if ((GetImpactDisplay__10ControllerFv(this)) && (GetEndOfInit__10ControllerFv(this)))
{
Node = (GetNodeAt__10ControllerFUi(this, 0U));
SetVisible__15MenuControlNodeFi(Node, 1);
do
{
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
if (((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 0U)) && (NodeId < 46U))
{
SetVisible__15MenuControlNodeFi(Node, 0);
}
Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
} while (Node != (GetNodeAt__10ControllerFUi(this, 46U)));

} return;
}
#line 4466
void HideVentil__10ControllerF12e_MODE_TYPESUi( struct Controller *const this,  e_MODE_TYPES Mode,  UWORD16 NodeId)
{
auto struct MenuControlNode *Node;
Mode = Mode;

Node = (GetNodeAt__10ControllerFUi(this, NodeId));

if ((GetImpactDisplay__10ControllerFv(this)) && (GetEndOfInit__10ControllerFv(this)))
{
if (((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 0U)) && (NodeId < 46U))
{
SetVisible__15MenuControlNodeFi(Node, 0);
}
} return;
}
#line 4493
void ShowVentil__10ControllerFUiT112e_MODE_TYPES( struct Controller *const this,  UWORD16 FirstLine, 
UWORD16 Increment, 
e_MODE_TYPES Mode)
{ auto struct __T50731308 *__T51617640; auto struct DisplayObject *__T51618056;
auto struct MenuControlNode *Node;
auto UWORD16 NodeId;
auto UWORD16 LineVentil;
auto UWORD16 IncVentil;
auto e_BOOL NodeVisible = 0;
#line 4499
LineVentil = FirstLine;
IncVentil = Increment;


if (GetImpactDisplay__10ControllerFv(this))
{
Node = (GetNodeAt__10ControllerFUi(this, 0U));
SetVisible__15MenuControlNodeFi(Node, 1);
do
{

NodeVisible = 0;
Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));

if ((((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 0U)) && (NodeId < 46U)) && (IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, Mode)))
{
switch (NodeId) { auto struct __T50731308 *__T51615712; auto struct DisplayObject *__T51616240; auto struct DisplayObject *__T51617100;

case 38U: NodeVisible = ((e_BOOL)((IsFSecuEnable__10ControllerFv(this)) || (IsInhibApneaEnable__10ControllerFv(this)))); break;
case 42U: NodeVisible = (IsVtCibleEnable__10ControllerFv(this)); break;

case 28U:
#line 4520
case 30U:
NodeVisible = (IsSoupirEnable__10ControllerFv(this)); break;
case 32U:
(__T51615712 = ((((*((struct MenuObject *)(__T51616240 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 44U))))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51615712->f)))(((struct DisplayObject *)(((char *)__T51616240) + ((__T51615712->d)))), LineVentil
#line 4523
));
NodeVisible = 1;
break;
case 44U:
(__T51615712 = ((((*((struct MenuObject *)(__T51617100 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 32U))))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51615712->f)))(((struct DisplayObject *)(((char *)__T51617100) + ((__T51615712->d)))), LineVentil
#line 4527
));
NodeVisible = 1;
break;

default: NodeVisible = 1; break;}

if (NodeVisible)
{
(__T51617640 = ((((*((struct MenuObject *)(__T51618056 = (GetObject__15MenuControlNodeFv(Node))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51617640->f)))(((struct DisplayObject *)(((char *)__T51618056) + ((__T51617640->d)))), LineVentil));
SetVisible__15MenuControlNodeFi(Node, 1);
LineVentil += IncVentil;
}
}
} while (Node != (GetNodeAt__10ControllerFUi(this, 46U)));

} return;
}
#line 4555
void ShowVentil__10ControllerF12e_MODE_TYPESUi( struct Controller *const this,  e_MODE_TYPES Mode,  UWORD16 NodeId)
{
auto struct MenuControlNode *Node;

if (GetImpactDisplay__10ControllerFv(this))
{
Node = (GetNodeAt__10ControllerFUi(this, NodeId));
if ((((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 0U)) && (NodeId < 46U)) && (IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, Mode)))
{
SetVisible__15MenuControlNodeFi(Node, 1);
}
} return;
}
#line 4703
void ShowMaintCalib__10ControllerFv( struct Controller *const this)
{
auto struct MenuControlNode *Node;
auto UWORD16 NodeId; auto UWORD16 NodeLimitId;
auto UWORD16 DisplayLine;
auto UWORD16 DisplayInc = 17U;


NodeId = (GetIdNodeOnUp__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 138U)))))));
DisplayLine = ((GetLine__13DisplayObjectFv((GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, NodeId)))))) + DisplayInc);


NodeLimitId = (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 183U)))))));

Node = (GetNodeAt__10ControllerFUi(this, 138U));
do
{

Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));

if ((((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 138U)) && (NodeId < 183U)) && (IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, ((this->CurrentMode)))))



{ auto struct __T50731308 *__T51639728; auto struct DisplayObject *__T51640256;
(__T51639728 = ((((*((struct MenuObject *)(__T51640256 = (GetObject__15MenuControlNodeFv(Node))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51639728->f)))(((struct DisplayObject *)(((char *)__T51640256) + ((__T51639728->d)))), DisplayLine));
SetVisible__15MenuControlNodeFi(Node, 1);
DisplayLine += DisplayInc;
}
} while (Node != (GetNodeAt__10ControllerFUi(this, NodeLimitId))); return;

}
#line 4377
void HideAlarm__10ControllerF12e_MODE_TYPES( struct Controller *const this,  e_MODE_TYPES Mode)
{
auto struct MenuControlNode *Node;
auto UWORD16 NodeId;
Mode = Mode;

if ((GetImpactDisplay__10ControllerFv(this)) && (GetEndOfInit__10ControllerFv(this)))
{
Node = (GetNodeAt__10ControllerFUi(this, 50U));
do
{
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
if (((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 50U)) && (NodeId < 78U))
{
SetVisible__15MenuControlNodeFi(Node, 0);
}
Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
} while (Node != (GetNodeAt__10ControllerFUi(this, 78U)));

} return;
}
#line 4409
void HideAlarm__10ControllerF12e_MODE_TYPESUi( struct Controller *const this,  e_MODE_TYPES Mode,  UWORD16 NodeId)
{
auto struct MenuControlNode *Node;
Mode = Mode;

if ((GetImpactDisplay__10ControllerFv(this)) && (GetEndOfInit__10ControllerFv(this)))
{
Node = (GetNodeAt__10ControllerFUi(this, NodeId));
if (((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 50U)) && (NodeId < 78U))
{
SetVisible__15MenuControlNodeFi(Node, 0);
}
} return;
}
#line 4580
void ShowAlarm__10ControllerFUiT112e_MODE_TYPES( struct Controller *const this,  UWORD16 FirstLine, 
UWORD16 Increment, 
e_MODE_TYPES Mode)
{ auto struct __T50731308 *__T51629028; auto struct DisplayObject *__T51629444;
auto struct MenuControlNode *Node;
auto UWORD16 NodeId;
auto UWORD16 LineVentil;
auto UWORD16 IncVentil;
auto e_BOOL NodeVisible = 0;
#line 4586
LineVentil = FirstLine;
IncVentil = Increment;


if (GetImpactDisplay__10ControllerFv(this))
{
Node = (GetNodeAt__10ControllerFUi(this, 50U));
do
{

NodeVisible = 0;
Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));

if ((((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 50U)) && (NodeId < 78U)) && (IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, Mode)))
{
switch (NodeId) { auto struct __T50731308 *__T51627100; auto struct DisplayObject *__T51627628; auto struct DisplayObject *__T51628488;

case 75U:
LineVentil++;
NodeVisible = 1;
break;
case 58U:
(__T51627100 = ((((*((struct MenuObject *)(__T51627628 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 63U))))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51627100->f)))(((struct DisplayObject *)(((char *)__T51627628) + ((__T51627100->d)))), LineVentil
#line 4609
));
NodeVisible = 1;
break;
case 63U:
(__T51627100 = ((((*((struct MenuObject *)(__T51628488 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 58U))))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51627100->f)))(((struct DisplayObject *)(((char *)__T51628488) + ((__T51627100->d)))), LineVentil
#line 4613
));
NodeVisible = 1;
break;

default: NodeVisible = 1; break;}

if (NodeVisible)
{
(__T51629028 = ((((*((struct MenuObject *)(__T51629444 = (GetObject__15MenuControlNodeFv(Node))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51629028->f)))(((struct DisplayObject *)(((char *)__T51629444) + ((__T51629028->d)))), LineVentil));
SetVisible__15MenuControlNodeFi(Node, 1);
LineVentil += IncVentil;
}
}

} while (Node != (GetNodeAt__10ControllerFUi(this, 78U)));


Node = (GetNodeAt__10ControllerFUi(this, 50U));
SetVisible__15MenuControlNodeFi(Node, 1);
} return;
}
#line 4645
void ShowAlarm__10ControllerF12e_MODE_TYPESUi( struct Controller *const this,  e_MODE_TYPES Mode,  UWORD16 NodeId)
{
auto struct MenuControlNode *Node;

if (GetImpactDisplay__10ControllerFv(this))
{
Node = (GetNodeAt__10ControllerFUi(this, NodeId));

if ((((!(IsModifyNode__5ToolsSFUi(NodeId))) && (NodeId > 50U)) && (NodeId < 78U)) && (IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, Mode)))
{
SetVisible__15MenuControlNodeFi(Node, 1);
}
} return;
}
#line 4671
void DisplayAlarmTable__10ControllerFUi12e_MODE_TYPES( struct Controller *const this,  UWORD16 _NbParam,  e_MODE_TYPES _Mode)
{
auto UWORD32 _PresentAndOrder;
auto UWORD16 Order = 0U;

if (GetImpactDisplay__10ControllerFv(this))
{
if (GetEndOfInit__10ControllerFv(this)) {
HideTable__11FrameAlarmeFv((&this->FAlarme)); }
SetTableSize__11FrameAlarmeFUc((&this->FAlarme), ((UBYTE)_NbParam));
_PresentAndOrder = (IsNodeInTree__10ControllerF12e_MODE_TYPESUiN22(this, _Mode, 75U, 50U, 78U));
if (_PresentAndOrder)
{
Order = ((UWORD16)(_PresentAndOrder & 2147483647UL));
ClearBoldLinesOfTable__11FrameAlarmeFv((&this->FAlarme));
SetBoldLineOfTable__11FrameAlarmeFUi((&this->FAlarme), (Order - 1U));
}
ShowTable__11FrameAlarmeFv((&this->FAlarme));
} return;
}
#line 935
void SendInfoUsbErrorCodeReady__10ControllerFi( struct Controller *const this,  e_BOOL _ErrorCodeReady)
{



auto UWORD16 _ErrorCode; auto UWORD16 _NodeId; auto UWORD16 Val;
auto struct MenuControlNode *_ProcessingNode;
auto UBYTE *_StringToDisplay;
auto e_BOOL _Lock;

if (_ErrorCodeReady)
{

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_ErrorCode), 13U, USB);


_Lock = (ManageErrorCode__8FrameUSBFUiPPUc((&this->FUsb), _ErrorCode, (&_StringToDisplay)));


if ((_ErrorCode != 21U) || ((_ErrorCode == 21U) && (((((this->PreviousErrorCode)) == 0U) || (((this->PreviousErrorCode)) == 14U)) || (((this->PreviousErrorCode)) == 10U))))




{
AddMessageToQueue__14MessageDelayedFPUcUli((&this->UsbDelayed), _StringToDisplay, 2000UL, ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U)));
#line 967
}

else  {

}


Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 12U, USB);


Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 13U, USB);

_ProcessingNode = (GetUsbProcessingNode__10ControllerFv(this));

if (_ProcessingNode != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51041176; auto struct DisplayObject *__T51041704;


(__T51041176 = ((((*((struct MenuObject *)(__T51041704 = (GetObject__15MenuControlNodeFv(_ProcessingNode))))).__vptr)) + 15)) , (((void (*)(struct DisplayObject *const))((__T51041176->f)))(((struct DisplayObject *)(((char *)__T51041704) + ((__T51041176->d))))));
}
if (_Lock)
{


if (_ErrorCode == 24U)
{
SetUsbProcessingNode__10ControllerFP15MenuControlNode(this, ((struct MenuControlNode *)0));
UsbUpdateNavigNodes__10ControllerFUi(this, 0U);
if ((!(GetNbOfMessagesInQueue__14MessageDelayedFv((&this->UsbDelayed)))) || (((this->PreviousErrorCode)) == 21U)) {
UsbMoveCurrentNode__10ControllerFP15MenuControlNodei(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 0U)), eGoDown__10Controller)), ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U))); }
}

else  {
UsbUpdateNavigNodes__10ControllerFUi(this, 209U);
UsbMoveCurrentNode__10ControllerFP15MenuControlNodei(this, (GetNodeAt__10ControllerFUi(this, 209U)), ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U)));
ManageUsbLock__10ControllerFi(this, 1);
}
}

else  {


ManageUsbLock__10ControllerFi(this, 0);
if ((GetUsbProcessingNode__10ControllerFv(this)) != ((struct MenuControlNode *)0))
{


_NodeId = (GetIdNodeOnTimeOut__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(_ProcessingNode)))));
UsbMoveCurrentNode__10ControllerFP15MenuControlNodei(this, (GetNodeAt__10ControllerFUi(this, _NodeId)), ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U)));
UsbUpdateNavigNodes__10ControllerFUi(this, _NodeId);
}

else  {




UsbUpdateNavigNodes__10ControllerFUi(this, 210U);
UsbMoveCurrentNode__10ControllerFP15MenuControlNodei(this, (GetNodeAt__10ControllerFUi(this, 210U)), ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U)));
}

ShortBipRequest__5ToolsSFv();
}
(this->PreviousErrorCode) = _ErrorCode;


SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 218U)), 0);


SetUsbCmdInProgress__10ControllerFi(this, 0);
} return;

}
#line 252
void SetUsbLock__10ControllerFi( struct Controller *const this,  e_BOOL _UsbLock)
{
(this->UsbLock) = _UsbLock; return;
}

e_BOOL GetUsbLock__10ControllerFv( struct Controller *const this)
{
return (this->UsbLock);
}

void SetUsbKeyDetected__10ControllerFi( struct Controller *const this,  e_BOOL _UsbKeyDetected)
{
(this->UsbKeyDetected) = _UsbKeyDetected; return;
}

e_BOOL GetUsbKeyDetected__10ControllerFv( struct Controller *const this)
{
return (this->UsbKeyDetected);
}
#line 282
void SetUsbCmdInProgress__10ControllerFi( struct Controller *const this,  e_BOOL _UsbCmdInProgress)
{
(this->UsbCmdInProgress) = _UsbCmdInProgress; return;
}

e_BOOL IsUsbCmdInProgress__10ControllerFv( struct Controller *const this)
{
return (this->UsbCmdInProgress);
}
#line 144
e_BOOL GetEndOfInit__10ControllerFv( struct Controller *const this)
{
this;

return EndOfInit__13DisplayObject;
}

void SetEndOfInit__10ControllerFi( struct Controller *const this,  e_BOOL _EndOfInit)
{
this;

EndOfInit__13DisplayObject = _EndOfInit; return;
}
#line 178
e_BOOL GetImpactDisplay__10ControllerFv( struct Controller *const this)
{
return (this->ImpactDisplay);
}

void SetImpactDisplay__10ControllerFi( struct Controller *const this,  e_BOOL _ImpactDisplay)
{
(this->ImpactDisplay) = _ImpactDisplay; return;
}
#line 497
void UpdateMode__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;


Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 25U, USB);


ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 26U, USB);

if (IsVentilOn__10ControllerFv(this))
{
if (((unsigned)(GetCurrentMode__10ControllerFv(this))) != Val)
{

SetModifMode__9LabelModeF12e_MODE_TYPES((&this->LModeVent), ((e_MODE_TYPES)Val));
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 0U)));

ManageModeChange__10ControllerFv(this);

} else  {

SetCurrentMode__10ControllerF12e_MODE_TYPES(this, ((e_MODE_TYPES)Val)); }
} else  {


SetCurrentMode__10ControllerF12e_MODE_TYPES(this, ((e_MODE_TYPES)Val)); } return;
}
#line 3505
void ShowMonitoring__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51399704;
(__T51399704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 46)) , (((void (*)(struct FrameVentilation *const))((__T51399704->f)))(((struct FrameVentilation *)(((char *)(&this->FVentilation)) + ((__T51399704->d))))));
(__T51399704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 46)) , (((void (*)(struct FrameAlarme *const))((__T51399704->f)))(((struct FrameAlarme *)(((char *)(&this->FAlarme)) + ((__T51399704->d))))));
(__T51399704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 46)) , (((void (*)(struct VFrame *const))((__T51399704->f)))(((struct VFrame *)(((char *)((struct VFrame *)(&this->FGraph))) + ((__T51399704->d)))))); return;
}
#line 5825
void ForceQExpCalibrationStop__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
auto UWORD16 Id; Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode)))))));

if (Id == 62U)
{ auto struct __T50731308 *__T51778524;

Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 7U, CONTROL);


(this->SegmentNumber) = 1U;

StopTimer__6VTimerFUi((&this->Timer), 20U);


Val = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 78U, ALARMS);




if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0); }


MoveToNextModifNode__10ControllerFv(this);

(__T51778524 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51778524->f)))(((struct LabelValueString *)(((char *)((struct 
#line 5854
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51778524->d))))));
RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 1);
ForceRefresh__16LabelTabOneValueFv(((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl)))));

ReturnToNodeTOLoupe__10ControllerFv(this);
} return;
}
#line 5871
void ForceFiO2CalibrationStop__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
auto UWORD16 Id; Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode)))))));

if ((Id == 69U) && (!(IsVentilOn__10ControllerFv(this))))
{ auto struct __T50731308 *__T51784144;

Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 80U, CONTROL);


(this->SegmentNumber) = 1U;
(this->StartCalib) = 0;
(this->StartVerif) = 0;

StopTimer__6VTimerFUi((&this->Timer), 21U);


Val = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 88U, ALARMS);




if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0); }

(__T51784144 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51784144->f)))(((struct LabelValueString *)(((char *)((struct 
#line 5899
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51784144->d))))));
RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 1);
ForceRefresh__16LabelTabOneValueFv(((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2)))));


ReturnToNodeToCalibNodeAlCalibFiO2__10ControllerFv(this);
ReturnToNodeTOLoupe__10ControllerFv(this);
} return;
}
#line 1551
void StartSavingUsbSettings__10ControllerSFv(void)
{
auto struct Controller *Cont;

auto UWORD16 _Val = 15U;
auto UBYTE *_StringToDisplay;
#line 1553
Cont = (GetInstance__10ControllerSFv());
#line 1559
ManageErrorCode__8FrameUSBFUiPPUc((&Cont->FUsb), _Val, (&_StringToDisplay));


AddMessageToQueue__14MessageDelayedFPUcUli((&Cont->UsbDelayed), _StringToDisplay, 2000UL, ((e_BOOL)((GetCurrentFrame__10ControllerFv(Cont)) == 26U))); return;



}
#line 5674
void DecreaseBlowerStep__10ControllerFv( struct Controller *const this)
{

auto UWORD16 _CurrentNodeId; _CurrentNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));

if ((((_CurrentNodeId >= 138U) && (_CurrentNodeId <= 183U)) || (_CurrentNodeId == 184U)) || (_CurrentNodeId == 185U))



{
if (((int)((this->StepLevel))) == 1)
{
(this->StepLevel) = eSTEP_LEVEL_LOW__10Controller;
((cDB_TEST_CONTROL_DB[CALIB_ADJUST_CMD_U16]).step) /= 5U;
}
} return;
}
#line 5702
void IncreaseBlowerStep__10ControllerFv( struct Controller *const this)
{

auto UWORD16 _CurrentNodeId; _CurrentNodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));

if ((((_CurrentNodeId >= 138U) && (_CurrentNodeId <= 183U)) || (_CurrentNodeId == 184U)) || (_CurrentNodeId == 185U))



{
if (((int)((this->StepLevel))) == 0)
{
(this->StepLevel) = eSTEP_LEVEL_HIGH__10Controller;
((cDB_TEST_CONTROL_DB[CALIB_ADJUST_CMD_U16]).step) *= 5U;
}
} return;
}
#line 158
e_BOOL GetLongUpKeyDetected__10ControllerFv( struct Controller *const this)
{
return (this->LongUpKeyDetected);
}

e_BOOL GetLongDownKeyDetected__10ControllerFv( struct Controller *const this)
{
return (this->LongDownKeyDetected);
}

void SetLongUpKeyDetected__10ControllerFi( struct Controller *const this,  e_BOOL _LongUpDetected)
{
(this->LongUpKeyDetected) = _LongUpDetected; return;
}

void SetLongDownKeyDetected__10ControllerFi( struct Controller *const this,  e_BOOL _LongDownDetected)
{
(this->LongDownKeyDetected) = _LongDownDetected; return;
}
#line 467
e_BOOL IsVentButtonOn__10ControllerFv( struct Controller *const this)
{
return (this->VentButtonOn);
}

void SetVentButtonOn__10ControllerFi( struct Controller *const this,  e_BOOL _VentButtonOn)
{
(this->VentButtonOn) = _VentButtonOn; return;
}
#line 418
void SetDifferMonitoring__10ControllerFi( struct Controller *const this,  e_BOOL _differ)
{
(this->DifferMonitoringStart) = _differ; return;
}

e_BOOL IsDifferMonitoring__10ControllerFv( struct Controller *const this)
{
return (this->DifferMonitoringStart);
}
void SetBuzzerVoltRefreshReq__10ControllerFi( struct Controller *const this,  e_BOOL _refresh_request)
{
(this->BuzzerVoltRefreshReq) = _refresh_request; return;
}

e_BOOL IsBuzzerVoltRefreshReq__10ControllerFv( struct Controller *const this)
{
return (this->BuzzerVoltRefreshReq);
}
#line 198
void InsertDoubleMessage__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val = 2U;

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 69U, ALARMS); return;
}

void RemoveDoubleMessage__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val = 0U;

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 69U, ALARMS); return;
}
#line 7769
struct MenuControlNode *GetPressureNode__10ControllerFv( struct Controller *const this)
{
auto e_BOOL found = 0;
auto e_BOOL found_pcontrol = 0;
auto UWORD16 value1; auto UWORD16 value2;
auto struct MenuControlNode *node = ((struct MenuControlNode *)0);

if ((!(found)) && (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 4U)))))
{
node = (GetNodeAt__10ControllerFUi(this, 4U));
found = 1;
}
if ((!(found)) && (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 6U)))))
{
node = (GetNodeAt__10ControllerFUi(this, 6U));
found = 1;
}
if ((!(found)) && (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 8U)))))
{
node = (GetNodeAt__10ControllerFUi(this, 8U));
found = 1;
found_pcontrol = 1;
}
if ((!(found)) && (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 10U)))))
{
node = (GetNodeAt__10ControllerFUi(this, 10U));
found = 1;
}
if ((found_pcontrol) && (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 10U)))))
{ auto struct __T50731308 *__T52010168; auto struct LabelOneValue *__T52010696; auto struct LabelOneValue *__T52011652;
value1 = ((__T52010168 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(__T52010696 = ((struct LabelOneValue *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 10U))))))))))).__vptr)) + 12)) , (((UWORD16 (*)(struct LabelOneValue *
#line 7799
const))((__T52010168->f)))(((struct LabelOneValue *)(((char *)__T52010696) + ((__T52010168->d)))))));
value2 = ((__T52010168 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(__T52011652 = ((struct LabelOneValue *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 8U))))))))))).__vptr)) + 12)) , (((UWORD16 (*)(struct LabelOneValue *const
#line 7800
))((__T52010168->f)))(((struct LabelOneValue *)(((char *)__T52011652) + ((__T52010168->d)))))));
node = ((value1 >= value2) ? (GetNodeAt__10ControllerFUi(this, 10U)) : (GetNodeAt__10ControllerFUi(this, 8U)));
}

return node;
}
#line 7738
void BuildPressureMessage__10ControllerFP15MenuControlNodeT1PUc( struct Controller *const this,  struct MenuControlNode *node1, 
struct MenuControlNode *node2, 
UBYTE *buffer)
{
auto UWORD16 Value;
if ((node1 != ((struct MenuControlNode *)0)) && (node2 != ((struct MenuControlNode *)0)))
{ auto struct __T50731308 *__T51999548; auto struct LabelOneValue *__T52000076; auto struct LabelOneValue *__T52001032; auto struct Label *__T52001988; auto struct __T50731308 *__T52002592; auto struct Label *__T52003008;
Value = ((__T51999548 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(__T52000076 = ((struct LabelOneValue *)(GetObject__15MenuControlNodeFv(node1))))))))).__vptr)) + 12)) , (((UWORD16 (*)(struct LabelOneValue *const))((__T51999548->f)))(((struct 
#line 7745
LabelOneValue *)(((char *)__T52000076) + ((__T51999548->d)))))));
Value += ((__T51999548 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(__T52001032 = ((struct LabelOneValue *)(GetObject__15MenuControlNodeFv(node2))))))))).__vptr)) + 12)) , (((UWORD16 (*)(struct LabelOneValue *const))((__T51999548->f)))(((struct 
#line 7746
LabelOneValue *)(((char *)__T52001032) + ((__T51999548->d)))))));
sprintf(((char *)buffer), ((const char *)"%s + %s|= %2d %s"), ((__T51999548 = ((((*((struct MenuObject *)((struct DisplayObject *)(__T52001988 = ((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(GetObject__15MenuControlNodeFv(node1))))))))).__vptr)) + 30)) , (((UBYTE *(*)(struct 
#line 7747
Label *const))((__T51999548->f)))(((struct Label *)(((char *)__T52001988) + ((__T51999548->d))))))), ((__T52002592 = ((((*((struct MenuObject *)((struct DisplayObject *)(__T52003008 = ((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(GetObject__15MenuControlNodeFv(node2))))))))).
#line 7747
__vptr)) + 30)) , (((UBYTE *(*)(struct Label *const))((__T52002592->f)))(((struct Label *)(((char *)__T52003008) + ((__T52002592->d))))))), Value, (GetNameUnit__13LabelOneValueFv(((struct LabelOneValue *)(GetObject__15MenuControlNodeFv(node2))))));
#line 7753
}

else  {
(buffer[0]) = ((UBYTE)0U);
} return;

}
#line 7856
UWORD16 UpdateCalibrationPoints__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
auto UWORD16 PointsNb;
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 98U, CONFIG);
if (Val)
{
PointsNb = 7U;
SetOnTimeOut__9EventNodeFM10ControllerFv_v((&EventNodeMaintFlowExp7), __T51255184);
}

else  {
PointsNb = 8U;
SetOnTimeOut__9EventNodeFM10ControllerFv_v((&EventNodeMaintFlowExp7), __T51255252);
}

SetNbSegment__14AutoCalibValueFUi((&this->LOVFlowExp), PointsNb);
return PointsNb;
}
#line 83
struct Controller *__ct__10ControllerFv( struct Controller *this)

{  if ((this != ((struct Controller *)0)) || ((this = ((struct Controller *)(__nw__FUi(64480U)))) != ((struct Controller *)0))) { __ct__13MessageDialogFv((&this->TopMessage)); __ct__10BlinkTableFv((&this->BTable)); __ct__12RefreshTableFv((&this->RTable)); __ct__10AlarmTableFv((&this->ATable)); 
#line 85
__ct__12ParameterSpyFv((&this->PSpy)); __ct__12AlarmManagerFv((&this->AManager)); __ct__6VTimerFv((&this->Timer)); __ct__13DisplayObjectFv((&this->GhostObject)); __ct__12FrameWelcomeFv((&this->FWelcome)); __ct__8FrameUSBFv((&this->FUsb)); __ct__14MessageDelayedFv((&this->UsbDelayed)); __ct__5LabelFv
#line 85
((&this->LStopUsb)); __ct__19LabelStringTwoItemsFv((&this->LVSEraseKey)); __ct__19LabelStringTwoItemsFv((&this->LVSContRecord)); __ct__17LabelOneValueFlagFv((&this->LOVFTransfMonit)); __ct__17LabelOneValueFlagFv((&this->LOVFTransfTrend)); __ct__13FrameTendanceFv((&this->FTendance)); __ct__5LabelFv((
#line 85
&this->LRTendance)); __ct__18FrameConfigurationFv((&this->FConfiguration)); __ct__5LabelFv((&this->LMaintenance)); __ct__5LabelFv((&this->LRVentil)); __ct__5LabelFv((&this->LNextPage)); __ct__5VTimeFv((&this->VTConf)); __ct__5VDateFv((&this->VDConf)); __ct__13LabelLanguageFv((&this->LVSLanguage)); 
#line 85
__ct__19LabelStringTwoItemsFv((&this->LVSVoluntaryStopAlarm)); __ct__17LabelStringNItemsFv((&this->LVSPressureUnit)); __ct__19LabelStringTwoItemsFv((&this->LVSAlarmTone)); __ct__13LabelTwoValueFv((&this->LOVPatientHrs)); __ct__13LabelOneValueFv((&this->LOVMachineHrs)); __ct__19LabelStringTwoItemsFv(
#line 85
(&this->LVSSResetPatientHrs)); __ct__24LabelOneValueFourDefaultFv((&this->LOVFDAjustKeyTone)); __ct__19LabelStringTwoItemsFv((&this->LVSSRestoreDefaultSettings)); __ct__15FramePreferenceFv((&this->FPreference)); __ct__19LabelStringTwoItemsFv((&this->LVSScreenSave)); __ct__19LabelStringTwoItemsFv((&
#line 85
this->LVSKeySound)); __ct__19LabelStringTwoItemsFv((&this->LVSWaveformDisplay)); __ct__19LabelStringTwoItemsFv((&this->LVSBaroCorrector)); __ct__19LabelStringTwoItemsFv((&this->LVSApneaAlarm)); __ct__19LabelStringTwoItemsFv((&this->LVSPediatricCircuit)); __ct__16LabelProgressBarFv((&this->
#line 85
LPBSoundLevel)); __ct__16LabelProgressBarFv((&this->LPBBrightness)); __ct__5LabelFv((&this->LRVentilMenu)); __ct__5LabelFv((&this->LCurveConfiguration)); __ct__5LabelFv((&this->LTrendMenu)); __ct__17LabelOneValueFlagFv((&this->LOVFDisconnectionAlarm)); (this->FCircuitCheck) = (
#line 85
GetInstance__17FrameCircuitCheckSFv()); __ct__5LabelFv((&this->LCircuitLeak)); __ct__16FrameMaintenanceFv((&this->FMaintenance)); __ct__17LabelOneValueDbRTFv((&this->LOVPwmBlower)); __ct__5LabelFv((&this->LHistoAnom)); __ct__5LabelFv((&this->LVoltCtrl)); __ct__5LabelFv((&this->LSensorCal)); 
#line 85
__ct__5LabelFv((&this->LRConfMaint)); __ct__14AutoCalibValueFv((&this->LOVFlowExp)); __ct__14AutoCalibValueFv((&this->LOVValvePressure)); __ct__16ManualCalibValueFv((&this->LOVFlowIns)); __ct__16ManualCalibValueFv((&this->LOVFlowO2)); __ct__16ManualCalibValueFv((&this->LOVPressO2)); 
#line 85
__ct__16ManualCalibValueFv((&this->LOVFiO2Concent)); __ct__19ManualCalibTwoValueFv((&this->LOVPatientPressure)); __ct__13FrameHistoAnoFv((&this->FHistoAno)); __ct__5LabelFv((&this->LRMaintAno)); __ct__16FrameVoltControlFv((&this->FVoltControl)); __ct__5LabelFv((&this->LRMaintTension)); 
#line 85
__ct__5LabelFv((&this->LOVBuzzSec)); __ct__5LabelFv((&this->LBackupBuzzer)); __ct__5LabelFv((&this->LBatteryMenu)); __ct__5LabelFv((&this->LRMaintBattery)); __ct__13LabelOneValueFv((&this->LOVBuzzerVoltage)); __ct__13LabelOneValueFv((&this->LOVBuzz)); __ct__13LabelOneValueFv((&this->LOVTempBat)); 
#line 85
__ct__16FrameBatteryMenuFv((&this->FBatteryMenu)); __ct__16FrameVentilationFv((&this->FVentilation)); __ct__19LabelStringTwoItemsFv((&this->LSTVChgtModeV)); __ct__19LabelStringTwoItemsFv((&this->LSTVSoupir)); __ct__9LabelModeFv((&this->LModeVent)); __ct__13LabelOneValueFv((&this->LOVVT)); 
#line 85
__ct__13LabelOneValueFv((&this->LOVPi)); __ct__13LabelOneValueFv((&this->LOVPControl)); __ct__13LabelOneValueFv((&this->LOVPSupport)); __ct__13LabelOneValueFv((&this->LOVPi2)); __ct__13LabelOneValueFv((&this->LOVFVaci)); __ct__13LabelOneValueFv((&this->LOVFRMini)); __ct__13LabelOneValueFv((&this->
#line 85
LOVIT)); __ct__13LabelOneValueFv((&this->LOVInspTime)); __ct__13LabelOneValueFv((&this->LOVPiMax)); __ct__13LabelOneValueFv((&this->LOVCptSoupir)); __ct__13LabelOneValueFv((&this->LOVFiO2)); __ct__17LabelOneValueSignFv((&this->LOVSVtSoupir)); __ct__21LabelOneValueSignFlagFv((&this->LOVSTrigE)); 
#line 85
__ct__17LabelOneValueFlagFv((&this->LOVTrigE)); __ct__5LabelFv((&this->LIE)); __ct__25LabelOneValueThreeDefaultFv((&this->LOVTDSupport)); __ct__17LabelOneValueFlagFv((&this->LOVPe)); __ct__17LabelOneValueFlagFv((&this->LOVApnee)); __ct__17LabelOneValueFlagFv((&this->LOVVTCible)); 
#line 85
__ct__17LabelOneValueFlagFv((&this->LOVFSecu)); __ct__17LabelStringNItemsFv((&this->LOVTrigI)); __ct__8RiseTimeFv((&this->LOVPente)); __ct__5RampeFv((&this->LOVRampe)); __ct__5LabelFv((&this->LPreferences)); __ct__11FrameAlarmeFv((&this->FAlarme)); __ct__19LabelStringTwoItemsFv((&this->LOVChgtModeA)
#line 85
); __ct__5LabelFv((&this->LHistoAlarm)); __ct__9LabelModeFv((&this->LModeAlarm)); __ct__20LabelTabOneValueFlagFv((&this->LOVFrCMin)); __ct__20LabelTabOneValueFlagFv((&this->LTOVFuiteLMin)); __ct__25LabelTabTwoValueTwoLabelsFv((&this->LOVPiMbar)); __ct__20LabelTabTwoValueFlagFv((&this->LOVVteMl)); 
#line 85
__ct__20LabelTabTwoValueFlagFv((&this->LOVVtiMl)); __ct__20LabelTabTwoValueFlagFv((&this->LTTVTiS)); __ct__20LabelTabTwoValueFlagFv((&this->LTTVSpO2)); __ct__20LabelTabTwoValueFlagFv((&this->LTTVFiO2)); __ct__19LabelStringTwoItemsFv((&this->LSTICalibQExp)); __ct__19LabelStringTwoItemsFv((&this->
#line 85
LSTICalibFiO2)); __ct__16FrameHistoAlarmeFv((&this->FHistoAlarme)); __ct__5LabelFv((&this->LRAlarmeA)); __ct__5LabelFv((&this->LCancelledAlarm)); __ct__10FrameGraphFv((&this->FGraph)); __ct__16FrameGraphConfigFv((&this->FGraphConfig)); __ct__20LabelOneValueDefaultFv((&this->LOVPMax)); 
#line 85
__ct__20LabelOneValueDefaultFv((&this->LOVQMax)); __ct__20LabelOneValueDefaultFv((&this->LOVVtMax)); __ct__20LabelOneValueDefaultFv((&this->LOVTMax)); __ct__19LabelStringTwoItemsFv((&this->LVSVisu)); __ct__19LabelStringTwoItemsFv((&this->LVSRepresentation)); __ct__5LabelFv((&this->LRGraphPref)); 
#line 85
__ct__13MessageDialogFv((&this->BottomMessage));
(this->EraseFlag) = ((bool)0);
FirstCall = ((bool)1);
SetHighPressAlarmToBeRemoved__10ControllerFi(this, 0);

(this->IESelected) = 1;
(this->ValveDetected) = 1;
(this->TrigEPosSelected) = 0;
(this->UsbProcessingNode) = ((struct MenuControlNode *)0);
(this->UsbCmdInProgress) = 0;
SetUsbLock__10ControllerFi(this, 0);
SetImpactDisplay__10ControllerFi(this, 0);
(this->PreviousErrorCode) = 0U;
(this->OnWait) = 0;

(this->SegmentNumber) = 1U;
(this->StartCalib) = 0;
(this->StartVerif) = 0;
(this->DifferMonitoringStart) = 0;
(this->MonitoringMode) = 0;
(this->ExhalFlowUsed) = 0;
(this->VentButtonOn) = 0;
(this->BuzzerVoltRefreshReq) = 0;
(this->IsDoubleMessageTimerStarted) = 0;

SetLongUpKeyDetected__10ControllerFi(this, 0);
SetLongDownKeyDetected__10ControllerFi(this, 0);
(this->StepLevel) = eSTEP_LEVEL_LOW__10Controller;

(this->LeakTestRunning) = 0; } return this;
}
#line 666
void SetCurrentNode__10ControllerFP15MenuControlNode( struct Controller *const this,  struct MenuControlNode *_CurrentNode)
{
(this->CurrentNode) = _CurrentNode; return;
}
#line 661
struct MenuControlNode *GetCurrentNode__10ControllerFv( struct Controller *const this)
{
return (this->CurrentNode);
}
#line 527
void SetCurrentMode__10ControllerF12e_MODE_TYPES( struct Controller *const this,  e_MODE_TYPES _CurrentMode)
{ auto struct __T50731308 *__T50961364;

auto UWORD16 Val; Val = ((UWORD16)_CurrentMode);

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 1U, CONFIG);


(this->CurrentMode) = _CurrentMode;


SetActifMode__9LabelModeF12e_MODE_TYPES(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U))))), ((this->CurrentMode)));
ShowNominalView__9LabelModeFv(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U))))));
SetActifMode__9LabelModeF12e_MODE_TYPES(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 50U))))), ((this->CurrentMode)));
ShowNominalView__9LabelModeFv(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 50U))))));


SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 47U)), 0);
SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 79U)), 0);


SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 46U)), 1);
SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 78U)), 1);


if ((((int)((this->CurrentMode))) == 5) && (((GetLanguage__10ControllerFv(this)) == 6U) || ((GetLanguage__10ControllerFv(this)) == 2U))) {


SetName__5LabelFPPUc(((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelOneValueDefault *)(&this->LOVPe))))), ((UBYTE **)cMSG_CpapPressure)); } else  {

SetName__5LabelFPPUc(((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct LabelOneValueDefault *)(&this->LOVPe))))), ((UBYTE **)cMSG_ExhalationPressure)); }


ChangeMenuWithMode__10ControllerF12e_MODE_TYPES(this, ((this->CurrentMode)));


switch ((int)((this->CurrentMode))) {

case 0: SendNodeModify__10ControllerFUii(this, 20U, 1);
SendNodeModify__10ControllerFUii(this, 22U, 1);
SendNodeModify__10ControllerFUii(this, 24U, 1);
break;
case 1: SendNodeModify__10ControllerFUii(this, 20U, 1);
SendNodeModify__10ControllerFUii(this, 22U, 1);
SendNodeModify__10ControllerFUii(this, 24U, 1);
break;
case 2: SendNodeModify__10ControllerFUii(this, 20U, 1);
SendNodeModify__10ControllerFUii(this, 22U, 1);
SendNodeModify__10ControllerFUii(this, 34U, 1);
SendNodeModify__10ControllerFUii(this, 40U, 1);
break;
case 3: SendNodeModify__10ControllerFUii(this, 20U, 1);
SendNodeModify__10ControllerFUii(this, 22U, 1);
break;
case 5: SendNodeModify__10ControllerFUii(this, 20U, 1);
SendNodeModify__10ControllerFUii(this, 22U, 1);
break;
default: SendNodeModify__10ControllerFUii(this, 20U, 1);
SendNodeModify__10ControllerFUii(this, 22U, 1);
break;}



RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U)))));
RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 50U)))));
RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 47U)))));
RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 79U)))));


(__T50961364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 45)) , (((void (*)(struct FrameVentilation *const, e_MODE_TYPES))((__T50961364->f)))(((struct FrameVentilation *)(((char *)(&this->FVentilation)) + ((__T50961364->d)))), ((this->
#line 596
CurrentMode))));
(__T50961364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 45)) , (((void (*)(struct FrameAlarme *const, e_MODE_TYPES))((__T50961364->f)))(((struct FrameAlarme *)(((char *)(&this->FAlarme)) + ((__T50961364->d)))), ((this->CurrentMode))));
(__T50961364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 45)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50961364->f)))(((struct FrameGraph *)(((char *)(&this->FGraph)) + ((__T50961364->d)))), ((this->CurrentMode)))); return;
}

e_MODE_TYPES GetCurrentMode__10ControllerFv( struct Controller *const this)
{
return (this->CurrentMode);
}

void SetConsultMode__10ControllerF12e_MODE_TYPES( struct Controller *const this,  e_MODE_TYPES _ConsultMode)
{ auto struct __T50731308 *__T50972356;

auto UWORD16 Val; Val = ((UWORD16)_ConsultMode);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 1U, CONFIG);

(this->ConsultMode) = _ConsultMode;
ChangeMenuWithMode__10ControllerF12e_MODE_TYPES(this, ((this->ConsultMode)));


SetActifMode__9LabelModeF12e_MODE_TYPES(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U))))), (GetCurrentMode__10ControllerFv(this)));
SetModifMode__9LabelModeF12e_MODE_TYPES(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U))))), ((this->ConsultMode)));
ShowMultiModeView__9LabelModeFv(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U))))));
SetActifMode__9LabelModeF12e_MODE_TYPES(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 50U))))), (GetCurrentMode__10ControllerFv(this)));
SetModifMode__9LabelModeF12e_MODE_TYPES(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 50U))))), ((this->ConsultMode)));
ShowMultiModeView__9LabelModeFv(((struct LabelMode *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 50U))))));


SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 46U)), 0);
SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 78U)), 0);


SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 47U)), 1);
SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 79U)), 1);


SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 47U))))), 1U);
SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 79U))))), 1U);


AddElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U)))));
AddElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 50U)))));
AddElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 47U)))));
AddElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 79U)))));


(__T50972356 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 45)) , (((void (*)(struct FrameAlarme *const, e_MODE_TYPES))((__T50972356->f)))(((struct FrameAlarme *)(((char *)(&this->FAlarme)) + ((__T50972356->d)))), ((this->ConsultMode))));
(__T50972356 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 45)) , (((void (*)(struct FrameVentilation *const, e_MODE_TYPES))((__T50972356->f)))(((struct FrameVentilation *)(((char *)(&this->FVentilation)) + ((__T50972356->d)))), ((this->
#line 643
ConsultMode)))); return;
}

e_MODE_TYPES GetConsultMode__10ControllerFv( struct Controller *const this)
{
return (this->ConsultMode);
}
#line 120
void SetCurrentFrame__10ControllerFUi( struct Controller *const this,  UWORD16 _CurrentFrame)
{
(this->CurrentFrame) = _CurrentFrame;
ShowFrame__10ControllerFUi(this, _CurrentFrame); return;
}

UWORD16 GetCurrentFrame__10ControllerFv( struct Controller *const this)
{
return (this->CurrentFrame);
}
#line 1129
struct Controller *GetInstance__10ControllerSFv(void)
{ static int __T50915344;

static struct Controller Control;
#line 1130
if (__T50915344 == 0) { __T50915344 = 1;

__ct__10ControllerFv((&Control)); }

if (((int)FirstCall) == 1)
{
Init__10ControllerFv((&Control));
FirstCall = ((bool)0);
}
return &Control;
#line 1151
}
#line 1164
void RemoveInstance__10ControllerSFv(void)
{  return;
#line 1178
}
#line 2083
struct MenuControlNode *GetNodeAt__10ControllerFUi( struct Controller *const this,  UWORD16 _index)
{
if (_index > 222U)
{
return ((struct MenuControlNode *)0);
}

else  {
return ((this->ArrayNode)) + _index;
}
}
#line 2454
void ShowFrame__10ControllerFUi( struct Controller *const this,  UWORD16 _NewFrameId)
{ auto struct __T50731308 *__T51260996; auto struct __T50731308 *__T51264500; auto struct FrameConfiguration *__T51271096; auto struct VFrame *__T51272020; auto struct __T50731308 *__T51284632;
auto UWORD16 Val1; auto UWORD16 Val2;


auto struct VFrame *Frame; Frame = (GetFrameObject__10ControllerFUi(this, _NewFrameId));

if (Frame == ((struct VFrame *)0)) {
return; }

if ((((GetPage__13DisplayObjectFv(((struct DisplayObject *)Frame))) == 3U) && (_NewFrameId != 20U)) || ((_NewFrameId == 20U) && (((this->CurrentVirtualFrame)) != 20U)))



{ auto struct __T50731308 *__T51259928;

(__T51259928 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 17)) , (((void (*)(struct FrameGraph *const))((__T51259928->f)))(((struct FrameGraph *)(((char *)(&this->FGraph)) + ((__T51259928->d))))));


ErazePage__13InterfaceCppCSFUi(3U);
}
DisplayPage__13InterfaceCppCSFUi((GetPage__13DisplayObjectFv(((struct DisplayObject *)Frame))));


ResetTable__12RefreshTableFv((&this->RTable));


switch (_NewFrameId) {

case 2U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FWelcome))))).__vptr)) + 16)) , (((void (*)(struct FrameWelcome *const))((__T51260996->f)))(((struct FrameWelcome *)(((char *)(&this->FWelcome)) + ((__T51260996->d))))));
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FWelcome))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameWelcome *const))((__T51260996->f)))(((struct FrameWelcome *)(((char *)(&
#line 2485
this->FWelcome)) + ((__T51260996->d))))))));
break;

case 4U:
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameVentilation *const))((__T51260996->f)))(((struct FrameVentilation *)
#line 2489
(((char *)(&this->FVentilation)) + ((__T51260996->d))))))));
MakeRefreshInsp__12RefreshTableFv((&this->RTable));
MakeRefreshExp__12RefreshTableFv((&this->RTable));


StopTimer__6VTimerFUi((&this->Timer), 4U);


StopTimer__6VTimerFUi((&this->Timer), 5U);
break;

case 6U:
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((struct DisplayObject **)(&this->RefreshTableAlarm)));
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameAlarme *const))((__T51260996->f)))(((struct FrameAlarme *)(((char *)(&
#line 2502
this->FAlarme)) + ((__T51260996->d))))))));
MakeRefreshInsp__12RefreshTableFv((&this->RTable));
MakeRefreshExp__12RefreshTableFv((&this->RTable));
if (!(IsModeChange__10ControllerFv(this))) {
(__T51264500 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LHistoAlarm)))).__vptr)) + 16)) , (((void (*)(struct Label *const))((__T51264500->f)))(((struct Label *)(((char *)(&this->LHistoAlarm)) + ((__T51264500->d)))))); }
break;

case 8U:
ManageHistoAlarmSeek__10ControllerFv(this);
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FHistoAlarme))))).__vptr)) + 16)) , (((void (*)(struct FrameHistoAlarme *const))((__T51260996->f)))(((struct FrameHistoAlarme *)(((char *)(&this->FHistoAlarme)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 82U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FHistoAlarme))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((__T51260996->f)))(((struct VFrame *)(((char *)((struct 
#line 2513
VFrame *)(&this->FHistoAlarme))) + ((__T51260996->d))))))));
break;

case 30U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 16)) , (((void (*)(struct FrameCircuitCheck *const))((__T51260996->f)))(((struct FrameCircuitCheck *)(((char *)((this->FCircuitCheck))) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 116U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((__T51260996->f)))(((struct VFrame *)(((char *)((struct 
#line 2519
VFrame *)((this->FCircuitCheck)))) + ((__T51260996->d))))))));
break;

case 10U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FConfiguration))))).__vptr)) + 16)) , (((void (*)(struct FrameConfiguration *const))((__T51260996->f)))(((struct FrameConfiguration *)(((char *)(&this->FConfiguration)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 84U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((struct DisplayObject **)(&this->RefreshTableConfig)));
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FConfiguration))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((__T51260996->f)))(((struct VFrame *)(((char *)((struct 
#line 2526
VFrame *)(&this->FConfiguration))) + ((__T51260996->d))))))));
break;
case 32U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(__T51271096 = (&(*(GetInstance__10HMI_Setup1SFv())).FConfiguration1)))))).__vptr)) + 16)) , (((void (*)(struct FrameConfiguration *const))((__T51260996->f)))(((struct FrameConfiguration *)(((char *)__T51271096) + (
#line 2529
(__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 109U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)(__T51272020 = ((struct VFrame *)(&(*(GetInstance__10HMI_Setup1SFv())).FConfiguration1)))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((
#line 2531
__T51260996->f)))(((struct VFrame *)(((char *)__T51272020) + ((__T51260996->d))))))));
break;
case 12U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FPreference))))).__vptr)) + 16)) , (((void (*)(struct FramePreference *const))((__T51260996->f)))(((struct FramePreference *)(((char *)(&this->FPreference)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 117U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FPreference))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((__T51260996->f)))(((struct VFrame *)(((char *)((struct 
#line 2536
VFrame *)(&this->FPreference))) + ((__T51260996->d))))))));
break;

case 14U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FMaintenance))))).__vptr)) + 16)) , (((void (*)(struct FrameMaintenance *const))((__T51260996->f)))(((struct FrameMaintenance *)(((char *)(&this->FMaintenance)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 135U);
ShowMaintCalib__10ControllerFv(this);
Fio2MonitorEnabled__10ControllerFi(this, (IsFio2Sensor__10ControllerFv(this)));
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((struct DisplayObject **)(&this->RefreshTableMaintenance)));
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FMaintenance))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameMaintenance *const))((__T51260996->f)))(((struct FrameMaintenance *)
#line 2545
(((char *)(&this->FMaintenance)) + ((__T51260996->d))))))));
break;

case 16U:
ManageHistoAnoSeek__10ControllerFv(this);
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FHistoAno))))).__vptr)) + 16)) , (((void (*)(struct FrameHistoAno *const))((__T51260996->f)))(((struct FrameHistoAno *)(((char *)(&this->FHistoAno)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 187U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FHistoAno))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((__T51260996->f)))(((struct VFrame *)(((char *)((struct 
#line 2552
VFrame *)(&this->FHistoAno))) + ((__T51260996->d))))))));
break;

case 18U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVoltControl))))).__vptr)) + 16)) , (((void (*)(struct FrameVoltControl *const))((__T51260996->f)))(((struct FrameVoltControl *)(((char *)(&this->FVoltControl)) + ((__T51260996->d))))));
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LRMaintTension)))).__vptr)) + 16)) , (((void (*)(struct Label *const))((__T51260996->f)))(((struct Label *)(((char *)(&this->LRMaintTension)) + ((__T51260996->d))))));
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVBuzzerVoltage)))))).__vptr)) + 16)) , (((void (*)(struct LabelOneValue *const))((__T51260996->f)))(((struct LabelOneValue *)(((char *)(&this->LOVBuzzerVoltage)) + ((__T51260996->d
#line 2558
))))));
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LBackupBuzzer)))).__vptr)) + 16)) , (((void (*)(struct Label *const))((__T51260996->f)))(((struct Label *)(((char *)(&this->LBackupBuzzer)) + ((__T51260996->d))))));
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LBatteryMenu)))).__vptr)) + 16)) , (((void (*)(struct Label *const))((__T51260996->f)))(((struct Label *)(((char *)(&this->LBatteryMenu)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 188U);
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVTempBat)))))).__vptr)) + 16)) , (((void (*)(struct LabelOneValue *const))((__T51260996->f)))(((struct LabelOneValue *)(((char *)(&this->LOVTempBat)) + ((__T51260996->d))))));
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LOVBuzzSec)))).__vptr)) + 16)) , (((void (*)(struct Label *const))((__T51260996->f)))(((struct Label *)(((char *)(&this->LOVBuzzSec)) + ((__T51260996->d))))));
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((struct DisplayObject **)(&this->RefreshTableVolt)));
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVoltControl))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameVoltControl *const))((__T51260996->f)))(((struct FrameVoltControl *)
#line 2565
(((char *)(&this->FVoltControl)) + ((__T51260996->d))))))));
break;

case 20U:
if (((this->CurrentVirtualFrame)) != 20U)
{
(__T51284632 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 16)) , (((void (*)(struct FrameGraph *const))((__T51284632->f)))(((struct FrameGraph *)(((char *)(&this->FGraph)) + ((__T51284632->d))))));
}

else  {


RefreshMode__10FrameGraphFv((&this->FGraph));
}
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameGraph *const))((__T51260996->f)))(((struct FrameGraph *)(((char *)(&this->
#line 2579
FGraph)) + ((__T51260996->d))))))));
MakeRefreshInsp__12RefreshTableFv((&this->RTable));
MakeRefreshExp__12RefreshTableFv((&this->RTable));
break;

case 22U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraphConfig))))).__vptr)) + 16)) , (((void (*)(struct FrameGraphConfig *const))((__T51260996->f)))(((struct FrameGraphConfig *)(((char *)(&this->FGraphConfig)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 195U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraphConfig))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((__T51260996->f)))(((struct VFrame *)(((char *)((struct 
#line 2587
VFrame *)(&this->FGraphConfig))) + ((__T51260996->d))))))));
break;

case 24U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FBatteryMenu))))).__vptr)) + 16)) , (((void (*)(struct FrameBatteryMenu *const))((__T51260996->f)))(((struct FrameBatteryMenu *)(((char *)(&this->FBatteryMenu)) + ((__T51260996->d))))));
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LRMaintBattery)))).__vptr)) + 16)) , (((void (*)(struct Label *const))((__T51260996->f)))(((struct Label *)(((char *)(&this->LRMaintBattery)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 208U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FBatteryMenu))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameBatteryMenu *const))((__T51260996->f)))(((struct FrameBatteryMenu *)
#line 2594
(((char *)(&this->FBatteryMenu)) + ((__T51260996->d))))))));
break;

case 26U:
Val1 = 1U;
Val2 = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val1), 8U, USB);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val2), 9U, USB);
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FUsb))))).__vptr)) + 16)) , (((void (*)(struct FrameUSB *const))((__T51260996->f)))(((struct FrameUSB *)(((char *)(&this->FUsb)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 210U);
if (!(IsUsbCmdInProgress__10ControllerFv(this))) {
SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 218U)), 0); }
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FUsb))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct FrameUSB *const))((__T51260996->f)))(((struct FrameUSB *)(((char *)(&this->FUsb)) 
#line 2606
+ ((__T51260996->d))))))));
break;

case 28U:
(__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FTendance))))).__vptr)) + 16)) , (((void (*)(struct FrameTendance *const))((__T51260996->f)))(((struct FrameTendance *)(((char *)(&this->FTendance)) + ((__T51260996->d))))));
ShowMenu__10ControllerFUi(this, 219U);
SetTable__12RefreshTableFPP13DisplayObject((&this->RTable), ((__T51260996 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FTendance))))).__vptr)) + 35)) , (((struct DisplayObject **(*)(struct VFrame *const))((__T51260996->f)))(((struct VFrame *)(((char *)((struct 
#line 2612
VFrame *)(&this->FTendance))) + ((__T51260996->d))))))));
break;
default:
break;}



switch (_NewFrameId) {

case 4U:
case 6U:
case 12U:
case 20U:
case 22U:
StartTimer__6VTimerFUlUii((&this->Timer), 1500UL, 11U, 1);


break;

case 8U:
break;

default:
if (_NewFrameId != 999U)
{
StopTimer__6VTimerFUi((&this->Timer), 11U);
ShowAlarm__10ControllerFiUiT2(this, 0, 0U, 0U);
}
break;}
#line 2646
if (_NewFrameId == 6U)
{
StopTimer__6VTimerFUi((&this->Timer), 18U);
}


if (_NewFrameId == 14U)
{
StopTimer__6VTimerFUi((&this->Timer), 19U);
}

if ((GetPage__13DisplayObjectFv(((struct DisplayObject *)Frame))) == 3U) {
(this->CurrentVirtualFrame) = _NewFrameId; } return;
}
#line 2673
void ManageSpyEvent__10ControllerSF7EventId( EventId _Spy)
{
auto struct Controller *Cont;


Cont = (GetInstance__10ControllerSFv());


switch ((int)_Spy) {
#line 2801
auto UWORD16 Val;
auto AlarmEvent *HighPressAlarmPtr;
#line 2686
case 2:
MakeRefreshInsp__12RefreshTableFv((&Cont->RTable));
break;

case 3:
ManageTrigger__10ControllerFUi(Cont, ((UWORD16)_Spy));
MakeRefreshInsp__12RefreshTableFv((&Cont->RTable));
break;

case 4:
ManageTrigger__10ControllerFUi(Cont, ((UWORD16)_Spy));
MakeRefreshExp__12RefreshTableFv((&Cont->RTable));
break;

case 5:
ShowBattery__10ControllerFi(Cont, 0);
ShowTempBattery__10ControllerFi(Cont, 1);
break;

case 8:
ShowBattery__10ControllerFi(Cont, 1);
ShowTempBattery__10ControllerFi(Cont, 0);
break;

case 6:

ManageLegendState__10ControllerFQ2_10Controller11LegendState(Cont, eStartVentil__10Controller);

SendInfoValve__10ControllerFi(Cont, ((Cont->ValveDetected)));
break;

case 7:

SendInfoValve__10ControllerFi(Cont, ((Cont->ValveDetected)));
break;

case 9:
SetInibOk__16FrameVentilationFiT1((&Cont->FVentilation), 1, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
SetInibOk__11FrameAlarmeFiT1((&Cont->FAlarme), 1, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
IsInibAlarmVisible__10FrameGraphFv((&Cont->FGraph));
break;

case 10:
SetInibOk__16FrameVentilationFiT1((&Cont->FVentilation), 0, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
SetInibOk__11FrameAlarmeFiT1((&Cont->FAlarme), 0, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
IsInibAlarmVisible__10FrameGraphFv((&Cont->FGraph));
break;

case 11:
SetCancelOk__16FrameVentilationFiT1((&Cont->FVentilation), 1, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
SetCancelOk__11FrameAlarmeFiT1((&Cont->FAlarme), 1, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
IsCancelAlarmVisible__10FrameGraphFv((&Cont->FGraph));
break;

case 12:
SetCancelOk__16FrameVentilationFiT1((&Cont->FVentilation), 0, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
SetCancelOk__11FrameAlarmeFiT1((&Cont->FAlarme), 0, ((e_BOOL)(!(IsModeChange__10ControllerFv(Cont)))));
IsCancelAlarmVisible__10FrameGraphFv((&Cont->FGraph));
break;

case 14:
SendInfoValve__10ControllerFi(Cont, 0);
break;

case 15:
SendInfoValve__10ControllerFi(Cont, 1);
break;

case 16:
SendInfoBlocExpi__10ControllerFi(Cont, 0);
break;

case 17:
SendInfoBlocExpi__10ControllerFi(Cont, 1);
break;

case 20:

{
SendInfoFio2Sensor__10ControllerFi(Cont, 1);
}
break;

case 21:
SendInfoFio2Sensor__10ControllerFi(Cont, 0);
break;

case 18:
if (IsVentilOn__10ControllerFv(Cont))
{
SendInfoSpo2Sensor__10ControllerFi(Cont, 1);
}
break;

case 19:
SendInfoSpo2Sensor__10ControllerFi(Cont, 0);
break;

case 22:
SendInfoBadSupplyCheck__10ControllerFi(Cont, 0);
break;

case 23:
SendInfoBadSupplyCheck__10ControllerFi(Cont, 1);
break;

case 26:
SendInfoUsbErrorCodeReady__10ControllerFi(Cont, 1);
break;

case 27:
UpdateMode__10ControllerFv(Cont);
break;

case 13:


HighPressAlarmPtr = (GetAlarmFromId__10AlarmTableFUi((&Cont->ATable), 2U));
if (HighPressAlarmPtr != ((AlarmEvent *)0))
{


auto AlarmEvent HighPressAlarm;
#line 2806
SetHighPressAlarmToBeRemoved__10ControllerFi(Cont, 1);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 2U, ALARMS);

(HighPressAlarm.id) = ((HighPressAlarmPtr->id));
(HighPressAlarm.action) = ((HighPressAlarmPtr->action));
(HighPressAlarm.day) = ((HighPressAlarmPtr->day));
(HighPressAlarm.month) = ((HighPressAlarmPtr->month));
(HighPressAlarm.year) = ((HighPressAlarmPtr->year));
(HighPressAlarm.hour) = ((HighPressAlarmPtr->hour));
(HighPressAlarm.min) = ((HighPressAlarmPtr->min));
AlarmDetect__10ControllerFiP10AlarmEvent(Cont, 0, (&HighPressAlarm));
SetHighPressAlarmToBeRemoved__10ControllerFi(Cont, 0);
}
break;

case 28:


if ((IsModifNodeOn__10ControllerFv(Cont)) || (IsVentButtonOn__10ControllerFv(Cont))) {
SetDifferMonitoring__10ControllerFi(Cont, 1); } else  {

SetDifferMonitoring__10ControllerFi(Cont, 0); }

SetMonitoringMode__10ControllerFi(Cont, 1);
break;

case 29:
SetSupplyBusFailure__10ControllerFi(Cont, 1);
break;
case 30:
SetSupplyBusFailure__10ControllerFi(Cont, 0);
break;
case 0:
SetExhalFlowUsed__10ControllerFi(Cont, 1);
break;
case 1:
SetExhalFlowUsed__10ControllerFi(Cont, 0);
break;

default:
break;} return;

}
#line 2862
void ManageTimerEvent__10ControllerSFUi( UWORD16 _Timer)
{ auto struct Controller *__T51330412; auto __Q2_10Controller11PController __T51330700; auto struct __T50731308 *__T51331532; auto void (*__T51332236)(struct Controller *const); auto struct Controller *__T51332492; auto __Q2_10Controller11PController __T51332780; auto struct __T50731308 *__T51333612
#line 2863
; auto void (*__T51334316)(struct Controller *const); auto struct Controller *__T51334572; auto __Q2_10Controller11PController __T51334860; auto struct __T50731308 *__T51335692; auto void (*__T51336396)(struct Controller *const); auto struct Controller *__T51336652; auto 
#line 2863
__Q2_10Controller11PController __T51336940; auto struct __T50731308 *__T51337772; auto void (*__T51338476)(struct Controller *const); auto struct __T50731308 *__T51339080; auto struct __T50731308 *__T51340896;
auto struct Controller *Cont;

Cont = (GetInstance__10ControllerSFv());


switch (_Timer) {__Q2_10Controller11PController __T51328364;__Q2_10Controller11PController __T51330508;__Q2_10Controller11PController __T51332588;__Q2_10Controller11PController __T51334668;__Q2_10Controller11PController __T51336748; auto struct Controller *__T51328156; auto 
#line 2869
__Q2_10Controller11PController __T51328556; auto struct __T50731308 *__T51329388; auto void (*__T51330092)(struct Controller *const);


case 12U: ManageTrigger__10ControllerFUi(Cont, _Timer); break;
case 2U: Blink__10BlinkTableFv((&Cont->BTable)); break;
case 3U: ((__T51328156 = ((struct Controller *)(((char *)Cont) + ((__T51328364 = (__T51328556 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51328364.d))))) , (__T51330092 = ((void (*)(struct Controller *const))((((int)((__T51328556.i))) < 0) ? ((
#line 2874
__T51328556.f)) : (((__T51329388 = (((*((struct __T50731308 **)(((char *)__T51328156) + ((short)((unsigned long)((__T51328556.f)))))))) + ((__T51328556.i)))) , (__T51328156 = ((struct Controller *)(((char *)__T51328156) + ((__T51329388->d)))))) , ((__T51329388->f))))))) , (__T51330092(__T51328156)); 
#line 2874
break;
case 7U: MakeRefresh__12RefreshTableFv((&Cont->RTable));
BuzzerVoltRefresh__10ControllerFv(Cont);
break;
case 16U: AddElement__10BlinkTableFP13DisplayObject((&Cont->BTable), (GetObject__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))); break;
case 0U: ManageLegendState__10ControllerFQ2_10Controller11LegendState(Cont, eOnWait__10Controller); break;
case 13U: Refresh__12ParameterSpyFv((&Cont->PSpy)); break;
case 8U: StopModifMode__10ControllerF12e_MODE_TYPES(Cont, (GetCurrentMode__10ControllerFv(Cont))); break;
case 9U: VerifAndManageCalibAuto__10ControllerFv(Cont); break;
case 10U: CallRefresh__12AlarmManagerFv((&Cont->AManager));
if (IsDoubleAlarmActive__12AlarmManagerFv((&Cont->AManager)))
{
if (!((Cont->IsDoubleMessageTimerStarted)))
{
(Cont->IsDoubleMessageTimerStarted) = 1;
StartTimer__6VTimerFUlUii((&Cont->Timer), 30000UL, 32U, 0);
}
}

else  {
(Cont->IsDoubleMessageTimerStarted) = 0;
StopTimer__6VTimerFUi((&Cont->Timer), 32U);
RemoveDoubleMessage__10ControllerFv(Cont);
}
break;
case 32U: InsertDoubleMessage__10ControllerFv(Cont);
break;
case 11U: Refresh__10AlarmTableFv((&Cont->ATable)); break;
case 4U: if ((GetCurrentFrame__10ControllerFv(Cont)) == 8U) { ((__T51330412 = ((struct Controller *)(((char *)Cont) + ((__T51330508 = (__T51330700 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51330508.d))))) , (__T51332236 = ((void (*)(struct 
#line 2902
Controller *const))((((int)((__T51330700.i))) < 0) ? ((__T51330700.f)) : (((__T51331532 = (((*((struct __T50731308 **)(((char *)__T51330412) + ((short)((unsigned long)((__T51330700.f)))))))) + ((__T51330700.i)))) , (__T51330412 = ((struct Controller *)(((char *)__T51330412) + ((__T51331532->d)))))) 
#line 2902
, ((__T51331532->f))))))) , (__T51332236(__T51330412)); } break;
case 5U: if ((GetCurrentFrame__10ControllerFv(Cont)) == 12U) { ((__T51332492 = ((struct Controller *)(((char *)Cont) + ((__T51332588 = (__T51332780 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51332588.d))))) , (__T51334316 = ((void (*)(struct 
#line 2903
Controller *const))((((int)((__T51332780.i))) < 0) ? ((__T51332780.f)) : (((__T51333612 = (((*((struct __T50731308 **)(((char *)__T51332492) + ((short)((unsigned long)((__T51332780.f)))))))) + ((__T51332780.i)))) , (__T51332492 = ((struct Controller *)(((char *)__T51332492) + ((__T51333612->d)))))) 
#line 2903
, ((__T51333612->f))))))) , (__T51334316(__T51332492)); } break;
case 6U: if ((GetCurrentFrame__10ControllerFv(Cont)) == 22U) { ((__T51334572 = ((struct Controller *)(((char *)Cont) + ((__T51334668 = (__T51334860 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51334668.d))))) , (__T51336396 = ((void (*)(struct 
#line 2904
Controller *const))((((int)((__T51334860.i))) < 0) ? ((__T51334860.f)) : (((__T51335692 = (((*((struct __T50731308 **)(((char *)__T51334572) + ((short)((unsigned long)((__T51334860.f)))))))) + ((__T51334860.i)))) , (__T51334572 = ((struct Controller *)(((char *)__T51334572) + ((__T51335692->d)))))) 
#line 2904
, ((__T51335692->f))))))) , (__T51336396(__T51334572)); } break;
case 28U: if ((GetCurrentFrame__10ControllerFv(Cont)) == 28U) { ((__T51336652 = ((struct Controller *)(((char *)Cont) + ((__T51336748 = (__T51336940 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51336748.d))))) , (__T51338476 = ((void (*)(struct 
#line 2905
Controller *const))((((int)((__T51336940.i))) < 0) ? ((__T51336940.f)) : (((__T51337772 = (((*((struct __T50731308 **)(((char *)__T51336652) + ((short)((unsigned long)((__T51336940.f)))))))) + ((__T51336940.i)))) , (__T51336652 = ((struct Controller *)(((char *)__T51336652) + ((__T51337772->d)))))) 
#line 2905
, ((__T51337772->f))))))) , (__T51338476(__T51336652)); } break;
case 18U: ManageHistoAlarmSeek__10ControllerFv(Cont); break;
case 19U: ManageHistoAnoSeek__10ControllerFv(Cont); break;
case 17U: ManageVerifPointCalib__10ControllerFM10ControllerFv_v(Cont, __T51202748); break;
case 20U: MoveToCalibAuto__10ControllerFv(Cont); break;
case 21U: MoveToCalibAutoFiO2__10ControllerFv(Cont); break;
case 15U: if (IsVentilOn__10ControllerFv(Cont))
{

HideMessageFrame__10ControllerFv(Cont);

(__T51339080 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&Cont->FVentilation))))).__vptr)) + 46)) , (((void (*)(struct FrameVentilation *const))((__T51339080->f)))(((struct FrameVentilation *)(((char *)(&Cont->FVentilation)) + ((__T51339080->d))))));
(__T51339080 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&Cont->FAlarme))))).__vptr)) + 46)) , (((void (*)(struct FrameAlarme *const))((__T51339080->f)))(((struct FrameAlarme *)(((char *)(&Cont->FAlarme)) + ((__T51339080->d))))));
goto __T51323852;
}
break;

case 14U:
ShowCurrentAlarme__16FrameVentilationFiUi((&Cont->FVentilation), 0, 0U);
ShowCurrentAlarme__11FrameAlarmeFiUi((&Cont->FAlarme), 0, 0U);
break;

case 1U:
if (!(IsVentilOn__10ControllerFv(Cont)))
{
ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(Cont, 1, ((UBYTE *)(cMSG_StartVentil[(GetLanguage__10ControllerFv(Cont))])), VENTIL);
}

else  {

(__T51340896 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&Cont->FAlarme))))).__vptr)) + 46)) , (((void (*)(struct FrameAlarme *const))((__T51340896->f)))(((struct FrameAlarme *)(((char *)(&Cont->FAlarme)) + ((__T51340896->d))))));
(__T51340896 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&Cont->FVentilation))))).__vptr)) + 46)) , (((void (*)(struct FrameVentilation *const))((__T51340896->f)))(((struct FrameVentilation *)(((char *)(&Cont->FVentilation)) + ((__T51340896->d))))));
}
break;
case 22U: TimerHandler__14MessageDelayedFi((&Cont->UsbDelayed), ((e_BOOL)((GetCurrentFrame__10ControllerFv(Cont)) == 26U)));
break;
case 23U: AnimateProcessingDots__8FrameUSBFi((&Cont->FUsb), ((e_BOOL)((GetCurrentFrame__10ControllerFv(Cont)) == 26U)));
break;
case 24U: Stop100FiO2__10ControllerFv(Cont);
break;
case 30U: SetLongDownKeyDetected__10ControllerFi(Cont, 0);
DecreaseBlowerStep__10ControllerFv(Cont);
break;
case 31U: SetLongUpKeyDetected__10ControllerFi(Cont, 0);
DecreaseBlowerStep__10ControllerFv(Cont);
break;
case 36U: CircuitLeakTestTimerCallback__10ControllerFv(Cont);
break;

default:
break;} __T51323852:; return;




}
#line 3013
void ManageKeyboardEvent__10ControllerSFUi( UWORD16 _Key)
{
auto UWORD16 CFrame;
auto struct Controller *Cont;
auto UWORD16 val = 0U;




auto UWORD16 Id;
#line 3018
val = val;

Cont = (GetInstance__10ControllerSFv());

Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont)))))));

if (((Id == 135U) && (((int)((Cont->EraseFlag))) == 1)) && (((int)(DRV_EVENT_TransStateFlash())) == 0))


{
(Cont->EraseFlag) = ((bool)0);
}

if (((int)((Cont->EraseFlag))) == 1) { return; }


switch (_Key) {__Q2_10Controller11PController __T51365168;__Q2_10Controller11PController __T51367216;__Q2_10Controller11PController __T51369136;__Q2_10Controller11PController __T51371024;__Q2_10Controller11PController __T51372912;__Q2_10Controller11PController __T51374800;
#line 3034
__Q2_10Controller11PController __T51376688;__Q2_10Controller11PController __T51378640; auto struct Controller *__T51364960; auto __Q2_10Controller11PController __T51365360; auto struct __T50731308 *__T51366192; auto void (*__T51366896)(struct Controller *const); auto __Q2_10Controller11PController 
#line 3034
__T51367408; auto __Q2_10Controller11PController __T51369328; auto __Q2_10Controller11PController __T51371216; auto __Q2_10Controller11PController __T51373104; auto __Q2_10Controller11PController __T51374992; auto __Q2_10Controller11PController __T51376880; auto __Q2_10Controller11PController 
#line 3034
__T51378832;


case 0U:

((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51365168 = (__T51365360 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnButtonUp))), __T51365168.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51365360.i))) < 0) ? ((
#line 3039
__T51365360.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51365360.f)))))))) + ((__T51365360.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));
if (GetLongUpKeyDetected__10ControllerFv(Cont))
{

StartTimer__6VTimerFUlUii((&Cont->Timer), 200UL, 31U, 0);
}

break;

case 1U:
((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51367216 = (__T51367408 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnButtonDown))), __T51367216.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51367408.i))) < 0) ? ((
#line 3049
__T51367408.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51367408.f)))))))) + ((__T51367408.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));
if (GetLongDownKeyDetected__10ControllerFv(Cont))
{

StartTimer__6VTimerFUlUii((&Cont->Timer), 200UL, 30U, 0);
}
break;

case 13U:
GoToTopBottomFrame__10ControllerFUiQ2_10Controller5WayId(Cont, (GetCurrentFrame__10ControllerFv(Cont)), eGoDown__10Controller);
SetLongDownKeyDetected__10ControllerFi(Cont, 1);
IncreaseBlowerStep__10ControllerFv(Cont);
break;

case 14U:
GoToTopBottomFrame__10ControllerFUiQ2_10Controller5WayId(Cont, (GetCurrentFrame__10ControllerFv(Cont)), eGoUp__10Controller);
SetLongUpKeyDetected__10ControllerFi(Cont, 1);
IncreaseBlowerStep__10ControllerFv(Cont);
break;

case 2U:
((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51369136 = (__T51369328 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnButtonValid))), __T51369136.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51369328.i))) < 0) ? ((
#line 3070
__T51369328.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51369328.f)))))))) + ((__T51369328.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));
break;

case 5U:
ManageLegendState__10ControllerFQ2_10Controller11LegendState(Cont, eOnStart__10Controller);
break;

case 6U:
break;

case 17U:
ManageInhibKey__10ControllerFi(Cont, 1);
break;

case 3U:
ManageInhibKey__10ControllerFi(Cont, 0);
break;

case 12U:
((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51371024 = (__T51371216 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnButtonLongValid))), __T51371024.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51371216.i))) < 0) ? ((
#line 3089
__T51371216.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51371216.f)))))))) + ((__T51371216.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));


break;

case 10U:
SetVentButtonOn__10ControllerFi(Cont, 1);
CFrame = (GetCurrentFrame__10ControllerFv(Cont));

StopTimer__6VTimerFUi((&Cont->Timer), 3U);

((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51372912 = (__T51373104 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51372912.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51373104.i))) < 0) ? ((
#line 3100
__T51373104.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51373104.f)))))))) + ((__T51373104.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));
if ((((CFrame == 8U) || (CFrame == 12U)) || (CFrame == 26U)) || (CFrame == 20U))



{
SetCurrentFrame__10ControllerFUi(Cont, 4U);
MoveCurrentNode__10ControllerFP15MenuControlNode(Cont, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(Cont, (GetNodeAt__10ControllerFUi(Cont, 0U)), eGoDown__10Controller)));




CFrame = (GetCurrentFrame__10ControllerFv(Cont));
}

if ((CFrame == 4U) || (CFrame == 6U))

{

ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(Cont, 1, ((UBYTE *)(cMSG_StopConfirmVentil[(GetLanguage__10ControllerFv(Cont))])), VENTIL);
}

StopTimer__6VTimerFUi((&Cont->Timer), 15U);
break;

case 9U:
SetVentButtonOn__10ControllerFi(Cont, 0);
SetDifferMonitoring__10ControllerFi(Cont, 0);

StopTimer__6VTimerFUi((&Cont->Timer), 3U);

((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51374800 = (__T51374992 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51374800.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51374992.i))) < 0) ? ((
#line 3131
__T51374992.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51374992.f)))))))) + ((__T51374992.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));
CFrame = (GetCurrentFrame__10ControllerFv(Cont));
if (((CFrame == 8U) || (CFrame == 12U)) || (CFrame == 20U))


{
SetCurrentFrame__10ControllerFUi(Cont, 4U);
MoveCurrentNode__10ControllerFP15MenuControlNode(Cont, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(Cont, (GetNodeAt__10ControllerFUi(Cont, 0U)), eGoDown__10Controller)));




CFrame = (GetCurrentFrame__10ControllerFv(Cont));
}

if ((CFrame == 4U) || (CFrame == 6U))

{
ManageLegendState__10ControllerFQ2_10Controller11LegendState(Cont, eStopVentil__10Controller);
}
break;

case 23U:
ManageLegendState__10ControllerFQ2_10Controller11LegendState(Cont, eOnWait__10Controller);
SetCurrentFrame__10ControllerFUi(Cont, 30U);
MoveCurrentNode__10ControllerFP15MenuControlNode(Cont, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(Cont, (GetNodeAt__10ControllerFUi(Cont, 116U)), eGoDown__10Controller)));




break;

case 4U:
ManageLegendState__10ControllerFQ2_10Controller11LegendState(Cont, eOnWait__10Controller);
SetCurrentFrame__10ControllerFUi(Cont, 10U);
MoveCurrentNode__10ControllerFP15MenuControlNode(Cont, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(Cont, (GetNodeAt__10ControllerFUi(Cont, 84U)), eGoDown__10Controller)));




break;

case 7U:

StopTimer__6VTimerFUi((&Cont->Timer), 3U);

((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51376688 = (__T51376880 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51376688.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51376880.i))) < 0) ? ((
#line 3177
__T51376880.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51376880.f)))))))) + ((__T51376880.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));
CFrame = (GetCurrentFrame__10ControllerFv(Cont));
if ((((CFrame == 8U) || (CFrame == 12U)) || (CFrame == 20U)) && (IsVentilOn__10ControllerFv(Cont)))



{
SetCurrentFrame__10ControllerFUi(Cont, 4U);
MoveCurrentNode__10ControllerFP15MenuControlNode(Cont, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(Cont, (GetNodeAt__10ControllerFUi(Cont, 0U)), eGoDown__10Controller)));



CFrame = (GetCurrentFrame__10ControllerFv(Cont));
}
if (((CFrame == 4U) || (CFrame == 6U)) && (IsVentilOn__10ControllerFv(Cont)))


{


ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(Cont, 1, ((UBYTE *)(cMSG_StopVentil[(GetLanguage__10ControllerFv(Cont))])), VENTIL);




}



StopTimer__6VTimerFUi((&Cont->Timer), 15U);
break;

case 8U:

StopTimer__6VTimerFUi((&Cont->Timer), 3U);

((__T51364960 = ((struct Controller *)(((char *)Cont) + ((__T51378640 = (__T51378832 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(Cont))))).OnTimeOut))), __T51378640.d))))) , (__T51366896 = ((void (*)(struct Controller *const))((((int)((__T51378832.i))) < 0) ? ((
#line 3213
__T51378832.f)) : (((__T51366192 = (((*((struct __T50731308 **)(((char *)__T51364960) + ((short)((unsigned long)((__T51378832.f)))))))) + ((__T51378832.i)))) , (__T51364960 = ((struct Controller *)(((char *)__T51364960) + ((__T51366192->d)))))) , ((__T51366192->f))))))) , (__T51366896(__T51364960));
if (IsVentilOn__10ControllerFv(Cont))
{


StartTimer__6VTimerFUlUii((&Cont->Timer), 1000UL, 15U, 0);

}
break;

case 11U:
CFrame = (GetCurrentFrame__10ControllerFv(Cont));
if (((CFrame == 4U) || (CFrame == 6U)) || (CFrame == 20U))
{
ManageLock__10ControllerFi(Cont, ((e_BOOL)(!(IsLockOn__10ControllerFv(Cont)))));
}
break;

case 15U:
if (!(IsVentilOn__10ControllerFv(Cont)))
{
ChangeBrightness__10ControllerFQ2_10Controller5WayId(Cont, eGoUp__10Controller);
}
break;

case 16U:
if (!(IsVentilOn__10ControllerFv(Cont)))
{
ChangeBrightness__10ControllerFQ2_10Controller5WayId(Cont, eGoDown__10Controller);
}
break;
#line 3274
case 19U:
ChangePages__10ControllerFv(Cont); break;

default:
break;} return;
#line 3284
}
#line 1191
void MoveCurrentNode__10ControllerFP15MenuControlNode( struct Controller *const this,  struct MenuControlNode *_CurrentNode)
{ auto struct __T50731308 *__T51058124; auto struct MenuObject *__T51058540;
#line 1203
auto UWORD16 Temp;
#line 1194
if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51057088; auto struct MenuObject *__T51057616;
(__T51057088 = ((((*(__T51057616 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 3)) , (((void (*)(struct MenuObject *const))((__T51057088->f)))(((struct MenuObject *)(((char *)__T51057616) + ((__T51057088->d))))));
}


SetCurrentNode__10ControllerFP15MenuControlNode(this, _CurrentNode);


Temp = (GetNumFrame__5ToolsSFUi((GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(_CurrentNode)))))));
if ((GetCurrentFrame__10ControllerFv(this)) != Temp)
{
SetCurrentFrame__10ControllerFUi(this, Temp);
}


(__T51058124 = ((((*(__T51058540 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(_CurrentNode))))).__vptr)) + 2)) , (((void (*)(struct MenuObject *const))((__T51058124->f)))(((struct MenuObject *)(((char *)__T51058540) + ((__T51058124->d)))))); return;
}
#line 4747
void ChangeMenuWithMode__10ControllerF12e_MODE_TYPES( struct Controller *const this,  e_MODE_TYPES Mode)
{
auto UWORD16 CurrentMode;
auto UWORD16 LineVentil = 40U;
auto UWORD16 IncVentil = 19U;
auto UWORD16 NbParam;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&CurrentMode), 1U, CONFIG);

if (GetImpactDisplay__10ControllerFv(this))
{

HideVentil__10ControllerF12e_MODE_TYPES(this, Mode);


HideAlarm__10ControllerF12e_MODE_TYPES(this, Mode);
}


RebuildEventNodeTree__10ControllerF12e_MODE_TYPESUiT2(this, Mode, 0U, 46U);


NbParam = (RebuildEventNodeTree__10ControllerF12e_MODE_TYPESUiT2(this, Mode, 50U, 78U));

if (GetImpactDisplay__10ControllerFv(this))
{

DisplayAlarmTable__10ControllerFUi12e_MODE_TYPES(this, NbParam, Mode);


ShowVentil__10ControllerFUiT112e_MODE_TYPES(this, LineVentil, IncVentil, Mode);


LineVentil = (GetFirstLineOfTable__11FrameAlarmeFv((&this->FAlarme)));


IncVentil = (GetSpacingOfTable__11FrameAlarmeFv((&this->FAlarme)));


ShowAlarm__10ControllerFUiT112e_MODE_TYPES(this, LineVentil, IncVentil, Mode);
} return;
}
#line 5045
void ManageLineMenuVentil__10ControllerFP15MenuControlNode( struct Controller *const this,  struct MenuControlNode *MasterNode)
{
auto struct MenuControlNode *Node;
auto UWORD16 LineVentil;
auto UWORD16 NodeId;
auto e_BOOL NodeVisible;
#line 5047
Node = MasterNode;
LineVentil = ((GetLine__13DisplayObjectFv((GetObject__15MenuControlNodeFv(MasterNode)))) + 19U);



if (IsVisible__15MenuControlNodeFv(MasterNode))
{

Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
do
{
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
if (!(IsModifyNode__5ToolsSFUi(NodeId)))
{
SetVisible__15MenuControlNodeFi(Node, 0);
}
Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
} while (Node != (GetNodeAt__10ControllerFUi(this, 46U)));




Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(MasterNode)))))));
do
{
NodeVisible = 0;
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
if (!(IsModifyNode__5ToolsSFUi(NodeId)))
{
switch (NodeId) {

case 38U: NodeVisible = ((e_BOOL)(((IsVisible__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 34U)))) && (IsFSecuEnable__10ControllerFv(this))) || (IsInhibApneaEnable__10ControllerFv(this)))); break;

case 42U: NodeVisible = ((e_BOOL)((IsVisible__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 40U)))) && (IsVtCibleEnable__10ControllerFv(this)))); break;


case 28U:
#line 5082
case 30U:
NodeVisible = ((e_BOOL)((IsVisible__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 26U)))) && (IsSoupirEnable__10ControllerFv(this)))); break;

default: if (!(IsModeChange__10ControllerFv(this)))
{
NodeVisible = (IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, (GetCurrentMode__10ControllerFv(this))));
}

else  {
NodeVisible = (IsVisibleWhithMode__5ToolsSFUi12e_MODE_TYPES(NodeId, (GetConsultMode__10ControllerFv(this))));
}
break;}


if (NodeVisible)
{ auto struct __T50731308 *__T51677472; auto struct DisplayObject *__T51678000;
(__T51677472 = ((((*((struct MenuObject *)(__T51678000 = (GetObject__15MenuControlNodeFv(Node))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51677472->f)))(((struct DisplayObject *)(((char *)__T51678000) + ((__T51677472->d)))), LineVentil));
SetVisible__15MenuControlNodeFi(Node, 1);
LineVentil += 19U;
}
}
Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
} while (Node != (GetNodeAt__10ControllerFUi(this, 46U)));


} return;
}
#line 1821
struct VFrame *GetFrameObject__10ControllerFUi( struct Controller *const this,  UWORD16 _id)
{
switch (_id) {

case 2U: return (struct VFrame *)(&this->FWelcome);
case 4U: return (struct VFrame *)(&this->FVentilation);
case 6U: return (struct VFrame *)(&this->FAlarme);
case 8U: return (struct VFrame *)(&this->FHistoAlarme);
case 10U: return (struct VFrame *)(&this->FConfiguration);
case 32U: return (struct VFrame *)(&(*(GetInstance__10HMI_Setup1SFv())).FConfiguration1);
case 12U: return (struct VFrame *)(&this->FPreference);
case 14U: return (struct VFrame *)(&this->FMaintenance);
case 16U: return (struct VFrame *)(&this->FHistoAno);
case 18U: return (struct VFrame *)(&this->FVoltControl);
case 20U: return (struct VFrame *)(&this->FGraph);
case 22U: return (struct VFrame *)(&this->FGraphConfig);
case 24U: return (struct VFrame *)(&this->FBatteryMenu);
case 26U: return (struct VFrame *)(&this->FUsb);
case 28U: return (struct VFrame *)(&this->FTendance);
case 30U: return (struct VFrame *)((this->FCircuitCheck));
default:
break;}

return ((struct VFrame *)0);
}
#line 212
void SetBrightness__10ControllerFUi( struct Controller *const this,  UWORD16 _Value)
{

auto UWORD16 Val; Val = _Value;

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 45U, CONFIG);

DisplayBrithness__13InterfaceCppCSFUi(_Value);

(this->LastBrightness) = _Value; return;
}

UWORD16 GetBrightness__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 45U, CONFIG);

return Val;
}
#line 131
UWORD16 GetLanguage__10ControllerFv( struct Controller *const this)
{
this;
return Language__13DisplayObject;
}

void SetLanguage__10ControllerFUi( struct Controller *const this,  UWORD16 _Lang)
{
this;
Language__13DisplayObject = _Lang;
SetFontConfigForLang__5ToolsSFUi(_Lang); return;
}
#line 4154
void ChangeLanguage__10ControllerFUi( struct Controller *const this,  UWORD16 NumLanguage)
{ auto struct __T50731308 *__T51510328; auto struct FrameConfiguration *__T51580820;
auto struct MenuControlNode *Node;


auto UWORD16 Val;
#line 4183
auto int i;
#line 4159
Val = NumLanguage;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 0U, CONFIG);

SetLanguage__10ControllerFUi(this, NumLanguage);


(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 19)) , (((void (*)(struct FrameVentilation *const))((__T51510328->f)))(((struct FrameVentilation *)(((char *)(&this->FVentilation)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 19)) , (((void (*)(struct FrameAlarme *const))((__T51510328->f)))(((struct FrameAlarme *)(((char *)(&this->FAlarme)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FHistoAlarme))))).__vptr)) + 19)) , (((void (*)(struct FrameHistoAlarme *const))((__T51510328->f)))(((struct FrameHistoAlarme *)(((char *)(&this->FHistoAlarme)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FConfiguration))))).__vptr)) + 19)) , (((void (*)(struct FrameConfiguration *const))((__T51510328->f)))(((struct FrameConfiguration *)(((char *)(&this->FConfiguration)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FPreference))))).__vptr)) + 19)) , (((void (*)(struct FramePreference *const))((__T51510328->f)))(((struct FramePreference *)(((char *)(&this->FPreference)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FMaintenance))))).__vptr)) + 19)) , (((void (*)(struct FrameMaintenance *const))((__T51510328->f)))(((struct FrameMaintenance *)(((char *)(&this->FMaintenance)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FHistoAno))))).__vptr)) + 19)) , (((void (*)(struct FrameHistoAno *const))((__T51510328->f)))(((struct FrameHistoAno *)(((char *)(&this->FHistoAno)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVoltControl))))).__vptr)) + 19)) , (((void (*)(struct FrameVoltControl *const))((__T51510328->f)))(((struct FrameVoltControl *)(((char *)(&this->FVoltControl)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FWelcome))))).__vptr)) + 19)) , (((void (*)(struct FrameWelcome *const))((__T51510328->f)))(((struct FrameWelcome *)(((char *)(&this->FWelcome)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 19)) , (((void (*)(struct FrameGraph *const))((__T51510328->f)))(((struct FrameGraph *)(((char *)(&this->FGraph)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraphConfig))))).__vptr)) + 19)) , (((void (*)(struct FrameGraphConfig *const))((__T51510328->f)))(((struct FrameGraphConfig *)(((char *)(&this->FGraphConfig)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FBatteryMenu))))).__vptr)) + 19)) , (((void (*)(struct FrameBatteryMenu *const))((__T51510328->f)))(((struct FrameBatteryMenu *)(((char *)(&this->FBatteryMenu)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FUsb))))).__vptr)) + 19)) , (((void (*)(struct FrameUSB *const))((__T51510328->f)))(((struct FrameUSB *)(((char *)(&this->FUsb)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FTendance))))).__vptr)) + 19)) , (((void (*)(struct FrameTendance *const))((__T51510328->f)))(((struct FrameTendance *)(((char *)(&this->FTendance)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 19)) , (((void (*)(struct FrameCircuitCheck *const))((__T51510328->f)))(((struct FrameCircuitCheck *)(((char *)((this->FCircuitCheck))) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(__T51580820 = (&(*(GetInstance__10HMI_Setup1SFv())).FConfiguration1)))))).__vptr)) + 19)) , (((void (*)(struct FrameConfiguration *const))((__T51510328->f)))(((struct FrameConfiguration *)(((char *)__T51580820) + (
#line 4180
(__T51510328->d))))));{


i = 0; for (; (((unsigned)i) <= 219U); i++)
{
Node = (GetNodeAt__10ControllerFUi(this, ((UWORD16)i)));


if ((!(IsModifyNode__5ToolsSFUi((GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))))) && (i != 52))
{ auto struct __T50731308 *__T51581360; auto struct DisplayObject *__T51581888;
(__T51581360 = ((((*((struct MenuObject *)(__T51581888 = (GetObject__15MenuControlNodeFv(Node))))).__vptr)) + 19)) , (((void (*)(struct DisplayObject *const))((__T51581360->f)))(((struct DisplayObject *)(((char *)__T51581888) + ((__T51581360->d))))));
}
}}

ErazePage__13InterfaceCppCSFUi(3U);


(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 16)) , (((void (*)(struct FrameAlarme *const))((__T51510328->f)))(((struct FrameAlarme *)(((char *)(&this->FAlarme)) + ((__T51510328->d))))));
(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 16)) , (((void (*)(struct FrameVentilation *const))((__T51510328->f)))(((struct FrameVentilation *)(((char *)(&this->FVentilation)) + ((__T51510328->d))))));


ShowMenu__10ControllerFUi(this, 0U);
ShowMenu__10ControllerFUi(this, 50U);

(__T51510328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FConfiguration))))).__vptr)) + 16)) , (((void (*)(struct FrameConfiguration *const))((__T51510328->f)))(((struct FrameConfiguration *)(((char *)(&this->FConfiguration)) + ((__T51510328->d))))));
ShowMenu__10ControllerFUi(this, 84U);


if (!(IsVentilOn__10ControllerFv(this)))
{
ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(this, 1, ((UBYTE *)(cMSG_StartVentil[(GetLanguage__10ControllerFv(this))])), VENTIL);
} return;
}
#line 651
e_BOOL IsVentilOn__10ControllerFv( struct Controller *const this)
{
auto UWORD16 VentilOn;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&VentilOn), 3U, CONFIG);

return (e_BOOL)(VentilOn == 1U);
}
#line 234
void SetLockOn__10ControllerFi( struct Controller *const this,  e_BOOL _Flag)
{


auto UWORD16 _Val;
auto UWORD16 _FrameId;
#line 236
(this->LockOn) = _Flag;

_Val = ((UWORD16)_Flag);
_FrameId = (GetCurrentFrame__10ControllerFv(this));

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 2U, CONFIG);

if ((_Flag) && (_FrameId)) {
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_FrameId), 97U, CONFIG); } return;
}

e_BOOL IsLockOn__10ControllerFv( struct Controller *const this)
{
return (e_BOOL)(((this->LockOn)) == 1);
}
#line 482
void SetPSupportNull__10ControllerFi( struct Controller *const this,  e_BOOL _Flag)
{
(this->PSupportNull) = _Flag; return;
}
#line 477
e_BOOL IsPSupportNull__10ControllerFv( struct Controller *const this)
{
return (e_BOOL)(((this->PSupportNull)) == 1);
}
#line 188
void SetLState__10ControllerFQ2_10Controller11LegendState( struct Controller *const this,  __Q2_10Controller11LegendState _State)
{
(this->LState) = _State; return;
}

__Q2_10Controller11LegendState GetLState__10ControllerFv( struct Controller *const this)
{
return (this->LState);
}
#line 4090
void ShowMessageFrame__10ControllerFiPUc8e_SYMBOL( struct Controller *const this,  e_BOOL Visible,  UBYTE *Message,  e_SYMBOL Symbol)
{
ShowMessage__16FrameVentilationFiPUc8e_SYMBOL((&this->FVentilation), Visible, Message, Symbol);
ShowMessage__11FrameAlarmeFiPUc8e_SYMBOL((&this->FAlarme), Visible, Message, Symbol); return;
}
#line 4104
void HideMessageFrame__10ControllerFv( struct Controller *const this)
{
ShowMessage__16FrameVentilationFiPUc8e_SYMBOL((&this->FVentilation), 0, ((UBYTE *)0), NO);
ShowMessage__11FrameAlarmeFiPUc8e_SYMBOL((&this->FAlarme), 0, ((UBYTE *)0), NO); return;
}
#line 4894
void ManageLock__10ControllerFi( struct Controller *const this,  e_BOOL Actif)
{
auto struct MenuControlNode *Node;
auto UWORD16 NodeId;
auto e_BOOL _HasToLock = 0;
#line 4896
Node = (GetNodeAt__10ControllerFUi(this, 0U));



if ((((GetCurrentFrame__10ControllerFv(this)) == 4U) || ((GetCurrentFrame__10ControllerFv(this)) == 6U)) || ((GetCurrentFrame__10ControllerFv(this)) == 0U))


{
_HasToLock = 1;
}

if (_HasToLock)
{
SetLockOn__10ControllerFi(this, Actif);


StopAllMenuAction__10ControllerFv(this);


SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 49U)), Actif);
SetLock__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 49U)), ((e_BOOL)(!(Actif))));
SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 194U)), Actif);
SetLock__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 194U)), ((e_BOOL)(!(Actif))));


if (Actif)
{
switch (GetCurrentFrame__10ControllerFv(this)) {

case 4U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 49U))); break;
case 6U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 78U)), eGoUp__10Controller))); break;
case 20U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 194U))); break;
default: break;}

}


SetLock__15MenuControlNodeFi(Node, Actif);
Node = (GetNodeAt__10ControllerFUi(this, 50U));
SetLock__15MenuControlNodeFi(Node, Actif);


Node = (GetNodeAt__10ControllerFUi(this, 0U));
do
{

Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
switch (NodeId) {

case 0U: break;
default: if (Actif)
{
SetLock__15MenuControlNodeFi(Node, (IsLockWhithLock__5ToolsSFUi(NodeId)));
}

else  {
SetLock__15MenuControlNodeFi(Node, 0);
} break;}

} while (Node != (GetNodeAt__10ControllerFUi(this, 46U)));




Node = (GetNodeAt__10ControllerFUi(this, 50U));
do
{

Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));
NodeId = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))));
switch (NodeId) {

case 50U: break;
case 79U: break;
case 78U: break;
default: if (Actif)
{
SetLock__15MenuControlNodeFi(Node, (IsLockWhithLock__5ToolsSFUi(NodeId)));
}

else  {
SetLock__15MenuControlNodeFi(Node, 0);
}
break;}

} while (Node != (GetNodeAt__10ControllerFUi(this, 78U)));




if (!(Actif))
{
switch (GetCurrentFrame__10ControllerFv(this)) {

case 4U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 2U)), eGoDown__10Controller))); break;
case 6U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 52U)), eGoDown__10Controller))); break;
case 20U: MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 194U))); break;
default: break;}

}
} return;
}
#line 5009
void ManageUsbLock__10ControllerFi( struct Controller *const this,  e_BOOL Actif)
{
auto struct MenuControlNode *Node;

if ((GetUsbLock__10ControllerFv(this)) != Actif)
{
SetUsbLock__10ControllerFi(this, Actif);
#line 5021
Node = (GetNodeAt__10ControllerFUi(this, 209U));
do
{
Node = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnDown__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(Node)))))));

if (Actif) {
SetLock__15MenuControlNodeFi(Node, 1); } else  {

SetLock__15MenuControlNodeFi(Node, 0); }
} while (Node != (GetNodeAt__10ControllerFUi(this, 214U)));

} return;
}
#line 4848
void StopModifMode__10ControllerF12e_MODE_TYPES( struct Controller *const this,  e_MODE_TYPES NewMode)
{


StopTimer__6VTimerFUi((&this->Timer), 8U);

SetModeChange__10ControllerFi(this, 0);


SetCurrentMode__10ControllerF12e_MODE_TYPES(this, NewMode);


if (!(IsModifNodeOn__10ControllerFv(this)))
{
if (((this->CurrentFrame)) == 4U)
{
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 0U)), eGoDown__10Controller)));
}

if (((this->CurrentFrame)) == 6U)
{
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 50U)), eGoUp__10Controller)));
}
}


ShowBatAndValve__16FrameVentilationFi((&this->FVentilation), 1);
ShowBatAndValve__11FrameAlarmeFi((&this->FAlarme), 1);
ShowPressConvention__16FrameVentilationFi((&this->FVentilation), 1);
ShowInibOk__16FrameVentilationFi((&this->FVentilation), 1);
ShowInhibApneaOk__16FrameVentilationFi((&this->FVentilation), 1);
ShowCancelOk__16FrameVentilationFi((&this->FVentilation), 1);
ShowInibOk__11FrameAlarmeFi((&this->FAlarme), 1);
ShowInhibApneaOk__11FrameAlarmeFi((&this->FAlarme), 1);
ShowCancelOk__11FrameAlarmeFi((&this->FAlarme), 1); return;
}
#line 354
e_BOOL IsModeChange__10ControllerFv( struct Controller *const this)
{
return (e_BOOL)(((this->ModeChangeOn)) == 1);
}

void SetModeChange__10ControllerFi( struct Controller *const this,  e_BOOL _Flag)
{
(this->ModeChangeOn) = _Flag; return;
}

e_BOOL IsLastShutDownError__10ControllerFv( struct Controller *const this)
{

auto UWORD16 Value = 0U;
this;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 3U, CONFIG);

return (e_BOOL)Value;
}
#line 395
e_BOOL IsModifNodeOn__10ControllerFv( struct Controller *const this)
{
return (e_BOOL)(((this->ModifNodeOn)) == 1);
}
#line 272
void SetUsbProcessingNode__10ControllerFP15MenuControlNode( struct Controller *const this,  struct MenuControlNode *_Node)
{
(this->UsbProcessingNode) = _Node; return;
}

struct MenuControlNode *GetUsbProcessingNode__10ControllerFv( struct Controller *const this)
{
return (this->UsbProcessingNode);
}
#line 400
void SetModifNodeOn__10ControllerFi( struct Controller *const this,  e_BOOL _Flag)
{




auto UWORD16 Val;
#line 402
(this->ModifNodeOn) = _Flag;



Val = ((UWORD16)_Flag);

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 94U, CONTROL);

if ((this->DifferMonitoringStart))
{
SetDifferMonitoring__10ControllerFi(this, 0);
SetMonitoringMode__10ControllerFi(this, 1);
} return;

}
#line 3697
void ManageInhibKey__10ControllerFi( struct Controller *const this,  e_BOOL IsLongKey)
{
if (IsLongKey)
{

auto UWORD16 Id; Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if (Id == 135U)
{

MaintEraseFlashMngt__13InterfaceCppCSFv();
EraseNANDFlashMngt__13InterfaceCppCSFv();
(this->EraseFlag) = ((bool)1);
}
} return;
}
#line 3723
void ChangePages__10ControllerFv( struct Controller *const this)
{
auto UWORD16 CFrame;

auto UWORD16 _WaveDisplay;
auto UWORD16 _MonitorNode;
#line 3766
auto UWORD16 Id;
#line 3725
CFrame = (GetCurrentFrame__10ControllerFv(this));
#line 3731
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_WaveDisplay), 78U, CONFIG);
#line 3739
if (((CFrame == 4U) || (CFrame == 6U)) && (!(IsModifNodeOn__10ControllerFv(this))))
{
if (CFrame == 4U)
{
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 52U)), eGoDown__10Controller)));
} else  {
if ((CFrame == 6U) && (!(IsModeChange__10ControllerFv(this))))
{
if ((!(IsVentilOn__10ControllerFv(this))) || (!(_WaveDisplay)))
{
_MonitorNode = (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 81U)))))));
if ((_MonitorNode == 209U) || (_MonitorNode == 218U)) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, _MonitorNode))); } else  {

MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, _MonitorNode)), eGoDown__10Controller))); }
}

else  {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 194U)));
}
} else  {
if (CFrame == 6U) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 2U)), eGoDown__10Controller))); } } }
return;
}


Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if ((IsVentilOn__10ControllerFv(this)) && ((Id == 1U) || (Id == 51U)))
{
return;
}

_MonitorNode = (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if ((_MonitorNode == 209U) || (_MonitorNode == 218U)) {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, _MonitorNode))); } else  { auto struct Controller *__T51465560; auto __Q2_10Controller11PController __T51465960; auto struct __T50731308 *__T51466792; auto void (*__T51467496)(struct Controller *const);
#line 3774
__Q2_10Controller11PController __T51465768;

((__T51465560 = ((struct Controller *)(((char *)this) + ((__T51465768 = (__T51465960 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this))))).OnButtonMonitor))), __T51465768.d))))) , (__T51467496 = ((void (*)(struct Controller *const))((((int)((__T51465960.i))) < 0) ? ((
#line 3776
__T51465960.f)) : (((__T51466792 = (((*((struct __T50731308 **)(((char *)__T51465560) + ((short)((unsigned long)((__T51465960.f)))))))) + ((__T51465960.i)))) , (__T51465560 = ((struct Controller *)(((char *)__T51465560) + ((__T51466792->d)))))) , ((__T51466792->f))))))) , (__T51467496(__T51465560)); 
#line 3776
} return;

}
#line 4067
void StopAllMenuAction__10ControllerFv( struct Controller *const this)
{
if (IsModifNodeOn__10ControllerFv(this))
{
ManageTimerEvent__10ControllerSFUi(3U);
}
if (IsModeChange__10ControllerFv(this))
{
StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetCurrentMode__10ControllerFv(this)));
} return;
}
#line 3521
void SetMonitoringMode__10ControllerFi( struct Controller *const this,  e_BOOL Flag)
{ auto struct __T50731308 *__T51414048; auto struct __T50731308 *__T51415132; auto struct __T50731308 *__T51419404; auto struct __T50731308 *__T51420488; auto struct __T50731308 *__T51422720; auto struct __T50731308 *__T51423900; auto struct __T50731308 *__T51424920;

if (Flag)
{

if (!((this->DifferMonitoringStart)))
{ auto struct __T50731308 *__T51412152;
(__T51412152 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 52)) , (((void (*)(struct FrameVentilation *const, e_BOOL, e_BOOL))((__T51412152->f)))(((struct FrameVentilation *)(((char *)(&this->FVentilation)) + ((__T51412152->d)))), (
#line 3529
IsFio2Sensor__10ControllerFv(this)), (IsSpo2Sensor__10ControllerFv(this))));
(__T51412152 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 52)) , (((void (*)(struct FrameAlarme *const, e_BOOL, e_BOOL))((__T51412152->f)))(((struct FrameAlarme *)(((char *)(&this->FAlarme)) + ((__T51412152->d)))), (
#line 3530
IsFio2Sensor__10ControllerFv(this)), (IsSpo2Sensor__10ControllerFv(this))));
}
(__T51414048 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 52)) , (((void (*)(struct FrameGraph *const, e_BOOL, e_BOOL, e_BOOL))((__T51414048->f)))(((struct FrameGraph *)(((char *)(&this->FGraph)) + ((__T51414048->d)))), (
#line 3532
IsFio2Sensor__10ControllerFv(this)), (IsSpo2Sensor__10ControllerFv(this)), ((e_BOOL)(((this->CurrentVirtualFrame)) == 20U))));



if ((this->ExhalFlowUsed)) {
(__T51415132 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3537
__T51415132->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))) + ((__T51415132->d)))))); }
(__T51414048 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((__T51414048->f)))(((struct 
#line 3538
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51414048->d))))));
(__T51414048 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3539
__T51414048->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))) + ((__T51414048->d))))));
(__T51414048 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((__T51414048->f)))(((struct LabelTabOneValue 
#line 3540
*)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))) + ((__T51414048->d))))));

if ((this->ValveDetected))
{
(__T51419404 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LTOVFuiteLMin)))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((__T51419404->f)))(((struct 
#line 3544
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LTOVFuiteLMin)))) + ((__T51419404->d))))));
SetOnButtonValid__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 63U)))), __T51207576);
}

else  {
(__T51420488 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LTOVFuiteLMin)))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((__T51420488->f)))(((struct 
#line 3549
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LTOVFuiteLMin)))) + ((__T51420488->d))))));
SetOnButtonValid__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 63U)))), __T51207644);
}

(__T51414048 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3553
__T51414048->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))) + ((__T51414048->d))))));

if (IsFio2Sensor__10ControllerFv(this)) {
(__T51422720 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3556
__T51422720->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))) + ((__T51422720->d)))))); }

if (IsSpo2Sensor__10ControllerFv(this)) {
(__T51423900 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))))))).__vptr)) + 22)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3559
__T51423900->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))) + ((__T51423900->d)))))); }
}

else  {

(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FVentilation))))).__vptr)) + 20)) , (((void (*)(struct FrameVentilation *const))((__T51424920->f)))(((struct FrameVentilation *)(((char *)(&this->FVentilation)) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FAlarme))))).__vptr)) + 20)) , (((void (*)(struct FrameAlarme *const))((__T51424920->f)))(((struct FrameAlarme *)(((char *)(&this->FAlarme)) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)(&this->FGraph))))).__vptr)) + 20)) , (((void (*)(struct FrameGraph *const))((__T51424920->f)))(((struct FrameGraph *)(((char *)(&this->FGraph)) + ((__T51424920->d))))));

(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3568
__T51424920->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((__T51424920->f)))(((struct 
#line 3569
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3570
__T51424920->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVtiMl))))) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((__T51424920->f)))(((struct LabelTabOneValue 
#line 3571
*)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)(&this->LOVPiMbar)))) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LTOVFuiteLMin)))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((__T51424920->f)))(((struct 
#line 3572
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LTOVFuiteLMin)))) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3573
__T51424920->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3574
__T51424920->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))) + ((__T51424920->d))))));
(__T51424920 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))))))).__vptr)) + 20)) , (((void (*)(struct LabelTabOneValue *const))((
#line 3575
__T51424920->f)))(((struct LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVSpO2))))) + ((__T51424920->d))))));


SetOnButtonValid__9EventNodeFM10ControllerFv_v((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 63U)))), __T51207644);
}

(this->MonitoringMode) = Flag; return;
}
#line 3594
void SetSupplyBusFailure__10ControllerFi( struct Controller *const this,  e_BOOL Flag)
{
SetSupplyBusFailure__16FrameVoltControlFiT1((&this->FVoltControl), Flag, ((e_BOOL)(18U == (GetCurrentFrame__10ControllerFv(this)))));
SetSupplyBusFailure__16FrameBatteryMenuFiT1((&this->FBatteryMenu), Flag, ((e_BOOL)(24U == (GetCurrentFrame__10ControllerFv(this))))); return;
}
#line 5132
void ManageCalibAuto__10ControllerFv( struct Controller *const this)
{ auto struct Controller *__T51679768; auto __Q2_10Controller11PController __T51680056; auto struct __T50731308 *__T51680888; auto void (*__T51681592)(struct Controller *const);__Q2_10Controller11PController __T51679864;

StartTimer__6VTimerFUlUii((&this->Timer), 1000UL, 9U, 0);
((__T51679768 = ((struct Controller *)(((char *)this) + ((__T51679864 = (__T51680056 = (((*(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this))))).OnTimeOut))), __T51679864.d))))) , (__T51681592 = ((void (*)(struct Controller *const))((((int)((__T51680056.i))) < 0) ? ((
#line 5136
__T51680056.f)) : (((__T51680888 = (((*((struct __T50731308 **)(((char *)__T51679768) + ((short)((unsigned long)((__T51680056.f)))))))) + ((__T51680056.i)))) , (__T51679768 = ((struct Controller *)(((char *)__T51679768) + ((__T51680888->d)))))) , ((__T51680888->f))))))) , (__T51681592(__T51679768)); 
#line 5136
return;
}
#line 5147
void ManageHistoAlarmSeek__10ControllerFv( struct Controller *const this)
{
if ((SeekEnd__16FrameHistoAlarmeFv((&this->FHistoAlarme))) == 0) {
StartTimer__6VTimerFUlUii((&this->Timer), 20UL, 18U, 0); } return;
}
#line 5162
void ManageHistoAnoSeek__10ControllerFv( struct Controller *const this)
{
if ((SeekEnd__13FrameHistoAnoFv((&this->FHistoAno))) == 0) {
StartTimer__6VTimerFUlUii((&this->Timer), 20UL, 19U, 0); } return;
}
#line 3793
void AlarmDetect__10ControllerFiP10AlarmEvent( struct Controller *const this,  e_BOOL Actif,  AlarmEvent *Alarm)
{
auto UWORD16 NewAlarmHighPrio;
auto AlarmEvent *Last;

if (Actif)
{
AddElement__10AlarmTableFP10AlarmEventi((&this->ATable), Alarm, (IsAlarmValid__12AlarmManagerFP10AlarmEvent((&this->AManager), Alarm)));

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&NewAlarmHighPrio), 30U, CONTROL);


if (((e_BOOL)NewAlarmHighPrio) == 1)
{
NewAlarmHighPrio = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&NewAlarmHighPrio), 30U, CONTROL);


if (((this->CurrentFrame)) == 8U)
{

StopTimer__6VTimerFUi((&this->Timer), 4U);
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 52U)), eGoDown__10Controller)));
} else  {
if ((((this->CurrentFrame)) == 12U) && (!(IsModifNodeOn__10ControllerFv(this))))
{

StopTimer__6VTimerFUi((&this->Timer), 5U);
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 2U)), eGoDown__10Controller)));
} else  {
if (((this->CurrentFrame)) == 28U)
{

StopTimer__6VTimerFUi((&this->Timer), 28U);
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 52U)), eGoDown__10Controller)));
} else  {
if ((((this->CurrentFrame)) == 20U) && (!(IsModifNodeOn__10ControllerFv(this))))
{
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 52U)), eGoDown__10Controller)));
} else  {
if ((((this->CurrentFrame)) == 26U) && (!(IsModifNodeOn__10ControllerFv(this))))
{
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, (GetNodeAt__10ControllerFUi(this, 52U)), eGoDown__10Controller)));
} } } } }
}
}

else  {
if (GetNbAlarm__10AlarmTableFv((&this->ATable)))
{


if (((Alarm->id)) == 2U)
{
if (HasHighPressAlarmToBeRemoved__10ControllerFv(this))
{
RemoveAlarm__16FrameVentilationFUi((&this->FVentilation), ((Alarm->id)));
RemoveAlarm__11FrameAlarmeFUi((&this->FAlarme), ((Alarm->id)));
RemoveElement__10AlarmTableFP10AlarmEventi((&this->ATable), Alarm, (IsAlarmValid__12AlarmManagerFP10AlarmEvent((&this->AManager), Alarm)));
}
}

else  {
RemoveAlarm__16FrameVentilationFUi((&this->FVentilation), ((Alarm->id)));
RemoveAlarm__11FrameAlarmeFUi((&this->FAlarme), ((Alarm->id)));
RemoveElement__10AlarmTableFP10AlarmEventi((&this->ATable), Alarm, (IsAlarmValid__12AlarmManagerFP10AlarmEvent((&this->AManager), Alarm)));
}

if ((GetNbAlarm__10AlarmTableFv((&this->ATable))) == 0U)
{

StopTimer__6VTimerFUi((&this->Timer), 14U);

ShowAlarm__10ControllerFiUiT2(this, 0, ((Alarm->id)), ((Alarm->action)));

Last = (GetLastAlarm__10AlarmTableFv((&this->ATable)));
ShowLastAlarme__11FrameAlarmeFP10AlarmEvent((&this->FAlarme), Last);

RemoveAllAlarms__16FrameVentilationFv((&this->FVentilation));
RemoveAllAlarms__11FrameAlarmeFv((&this->FAlarme));
}
}
} return;
}
#line 3889
void ShowAlarm__10ControllerFiUiT2( struct Controller *const this,  e_BOOL Actif,  UWORD16 AlarmId,  UWORD16 Action)
{
Action = Action;
if (Actif)
{

StartTimer__6VTimerFUlUii((&this->Timer), 800UL, 14U, 0);


ShowCurrentAlarme__16FrameVentilationFiUi((&this->FVentilation), 1, AlarmId);
ShowCurrentAlarme__11FrameAlarmeFiUi((&this->FAlarme), 1, AlarmId);
}

else  {

HideCurrentAlarme__16FrameVentilationFv((&this->FVentilation));
HideCurrentAlarme__11FrameAlarmeFv((&this->FAlarme));
} return;
}
#line 3920
void SettingBlockDetect__10ControllerFv( struct Controller *const this)
{
auto UBYTE *Limit1 = ((UBYTE *)0);
auto UBYTE *Limit2 = ((UBYTE *)0);

auto UBYTE MessageString[60];

auto UWORD16 Nb_Block = 0U;


auto UWORD16 i;{ i = 32U; for (; (i < 57U); i++)
{
auto UWORD16 Value;
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), i, CONTROL);

if (Value == 1U)
{
Nb_Block++;
if (Nb_Block == 1U)
{

Limit1 = ((UBYTE *)(((const UBYTE *const huge *)(cMSG_BlockedSetting + ((i - 31U) - 1U)))[(GetLanguage__10ControllerFv(this))]));
}

else  {

Limit2 = ((UBYTE *)(((const UBYTE *const huge *)(cMSG_BlockedSetting + ((i - 31U) - 1U)))[(GetLanguage__10ControllerFv(this))]));
goto __T51485260;
}
}
}} __T51485260:;


if (Nb_Block == 0U)
{

if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0);
}
} else  {

if (Nb_Block > 0U)
{

if (Nb_Block == 1U)
{

sprintf(((char *)((UBYTE *)MessageString)), ((const char *)"%s|%s"), ((char *)(cMSG_SettingBlock[(GetLanguage__10ControllerFv(this))])), Limit1);



}


else  {

sprintf(((char *)((UBYTE *)MessageString)), ((const char *)"%s|%s / %s"), ((char *)(cMSG_SettingBlock[(GetLanguage__10ControllerFv(this))])), Limit1, Limit2);




}

if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)MessageString));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
}
} } return;
}
#line 5178
void ManageTrigger__10ControllerFUi( struct Controller *const this,  UWORD16 Event)
{
static e_BOOL HideTriggerEnable = 0;
static e_BOOL MustHideTrigger = 1;
static e_BOOL IsInsTrigger = 0;

switch (Event) {

case 3U:
if (MustHideTrigger == 1)
{

HideTriggerEnable = 0;
MustHideTrigger = 0;
IsInsTrigger = 1;
StartTimer__6VTimerFUlUii((&this->Timer), 2000UL, 12U, 0);

SetVisibleTrigger__10ControllerFi(this, 1);
}
break;
case 4U:
if (IsInsTrigger == 1)
{
MustHideTrigger = 1;
IsInsTrigger = 0;
if (HideTriggerEnable)
{

SetVisibleTrigger__10ControllerFi(this, 0);
}
}
break;
case 12U:
HideTriggerEnable = 1;
if (MustHideTrigger)
{

SetVisibleTrigger__10ControllerFi(this, 0);
HideTriggerEnable = 0;
}
break;
default: break;} return;

}
#line 5233
void SetVisibleTrigger__10ControllerFi( struct Controller *const this,  e_BOOL Flag)
{
if (Flag)
{
ShowTrigger__16FrameVentilationFv((&this->FVentilation));
ShowTrigger__11FrameAlarmeFv((&this->FAlarme));
ShowTrigger__10FrameGraphFv((&this->FGraph));
}

else  {
HideTrigger__16FrameVentilationFv((&this->FVentilation));
HideTrigger__11FrameAlarmeFv((&this->FAlarme));
HideTrigger__10FrameGraphFv((&this->FGraph));
} return;
}
#line 1859
void StartBlowerBurnTest__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51121000;
#line 1866
auto UWORD16 MAX_SPEED_BLOWER;


auto UWORD16 Value;
#line 1862
(__T51121000 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T51121000->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 1862
*)(&this->LOVPwmBlower))) + ((__T51121000->d))))));
RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))), 1);


MAX_SPEED_BLOWER = 50000U;


Value = 50000U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 14U, CONTROL);


Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 99U, CONTROL); return;
}
#line 1889
void StopBlowerBurnTest__10ControllerFv( struct Controller *const this)
{

auto UWORD16 Value = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 14U, CONTROL);


WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 99U, CONTROL);


RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))), 0); return;
}
#line 1914
void StartCircuitLeakTest__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51128532;
if ((this->LeakTestRunning))
{
AbortCircuitLeakTest__10ControllerFv(this);
}

else  { auto struct __T50731308 *__T51127576;
#line 1927
auto UWORD16 Value;
#line 1935
auto UWORD16 BLOWER_SPEED_RPM;
#line 1922
(this->LeakTestRunning) = 1;
(__T51127576 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 52)) , (((void (*)(struct FrameCircuitCheck *const))((__T51127576->f)))(((struct FrameCircuitCheck *)(((char *)((this->FCircuitCheck))) + ((__T51127576->d))))));

(this->LeakTestTimerCount) = 0U;

Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 61U, CONTROL);



StartTimer__6VTimerFUlUii((&this->Timer), 2000UL, 36U, 0);


BLOWER_SPEED_RPM = 30000U;


Value = 30000U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 14U, CONTROL);


Value = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 9U, CONTROL);

Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 5U, CONTROL);

Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 84U, COMPUTE);
}

(__T51128532 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 15)) , (((void (*)(struct FrameCircuitCheck *const))((__T51128532->f)))(((struct FrameCircuitCheck *)(((char *)((this->FCircuitCheck))) + ((__T51128532->d)))))); return;
}
#line 1966
void StopCircuitLeakTest__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51131300;

auto UWORD16 Value = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 14U, CONTROL);


Value = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 9U, CONTROL);

Value = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 5U, CONTROL);

(this->LeakTestRunning) = 0;
(__T51131300 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 16)) , (((void (*)(struct FrameCircuitCheck *const))((__T51131300->f)))(((struct FrameCircuitCheck *)(((char *)((this->FCircuitCheck))) + ((__T51131300->d)))))); return;
}
#line 1994
void AbortCircuitLeakTest__10ControllerFv( struct Controller *const this)
{
if (((this->LeakTestRunning)) == 1)
{ auto struct __T50731308 *__T51133788;


auto UWORD16 TestResult;
#line 1998
StopCircuitLeakTest__10ControllerFv(this);

TestResult = 2U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&TestResult), 84U, COMPUTE);

(__T51133788 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 15)) , (((void (*)(struct FrameCircuitCheck *const))((__T51133788->f)))(((struct FrameCircuitCheck *)(((char *)((this->FCircuitCheck))) + ((__T51133788->d))))));
} return;
}
#line 2018
void CircuitLeakTestTimerCallback__10ControllerFv( struct Controller *const this)
{
if (((this->LeakTestRunning)) == 1)
{ auto struct __T50731308 *__T51139104;

auto UWORD16 Value;
auto UWORD16 FilterQi;
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&FilterQi), 9U, COMPUTE);


if (((SWORD16)FilterQi) < 0)
{
FilterQi = 0U;
}
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&FilterQi), 83U, COMPUTE);

(this->LeakTestTimerCount)++;

if (((this->LeakTestTimerCount)) < 5U)
{

Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 61U, CONTROL);



StartTimer__6VTimerFUlUii((&this->Timer), 2000UL, 36U, 0);
}

else  {
#line 2053
auto UWORD16 TestResult;
#line 2049
Value = 2U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 61U, CONTROL);




if (((SWORD16)FilterQi) > 10)
{
TestResult = 4U;
}

else  {
TestResult = 3U;
}
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&TestResult), 84U, COMPUTE);

StopCircuitLeakTest__10ControllerFv(this);
}

(__T51139104 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)((this->FCircuitCheck)))))).__vptr)) + 15)) , (((void (*)(struct FrameCircuitCheck *const))((__T51139104->f)))(((struct FrameCircuitCheck *)(((char *)((this->FCircuitCheck))) + ((__T51139104->d))))));
} return;
}
#line 3435
void ShowMenu__10ControllerFUi( struct Controller *const this,  UWORD16 FirstNodeId)
{
auto UWORD16 Id; auto UWORD16 TempNodeId; auto UWORD16 NumFrame;

auto struct MenuControlNode *PtrNode; PtrNode = (GetNodeAt__10ControllerFUi(this, FirstNodeId));
Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))));
NumFrame = (GetNumFrame__5ToolsSFUi(Id));
TempNodeId = FirstNodeId;

if ((NumFrame == 4U) || (NumFrame == 6U))
{
while ((GetNumFrame__5ToolsSFUi(Id)) == NumFrame)
{
if ((!(IsModifyNode__5ToolsSFUi(Id))) && (IsVisible__15MenuControlNodeFv(PtrNode)))
{ auto struct __T50731308 *__T51397576; auto struct DisplayObject *__T51398104;
(__T51397576 = ((((*((struct MenuObject *)(__T51398104 = (GetObject__15MenuControlNodeFv(PtrNode))))).__vptr)) + 16)) , (((void (*)(struct DisplayObject *const))((__T51397576->f)))(((struct DisplayObject *)(((char *)__T51398104) + ((__T51397576->d))))));
}


TempNodeId++;
PtrNode = (GetNodeAt__10ControllerFUi(this, TempNodeId));
Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))));
}
} else  {
if (NumFrame == 14U)
{
while ((GetNumFrame__5ToolsSFUi(Id)) == NumFrame)
{
if (!(IsModifyNode__5ToolsSFUi(Id)))
{


if ((Id < 138U) || (Id > 183U)) {
SetVisible__15MenuControlNodeFi(PtrNode, 1); }
}


TempNodeId++;
PtrNode = (GetNodeAt__10ControllerFUi(this, TempNodeId));
Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))));
}

}

else  {
while ((GetNumFrame__5ToolsSFUi(Id)) == NumFrame)
{
if (!(IsModifyNode__5ToolsSFUi(Id)))
{
SetVisible__15MenuControlNodeFi(PtrNode, 1);
}


TempNodeId++;
PtrNode = (GetNodeAt__10ControllerFUi(this, TempNodeId));
Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))));
}
} } return;
}
#line 5917
void ManageVerifPointCalib__10ControllerFM10ControllerFv_v( struct Controller *const this,  __Q2_10Controller11PController CallFct)
{
static __Q2_10Controller11PController CallFctReff; auto struct __T50731308 *__T51788940; auto struct Controller *__T51790744; auto struct __T50731308 *__T51791736; auto void (*__T51792440)(struct Controller *const); auto struct __T50731308 *__T51793140; auto struct Controller *__T51793748; auto 
#line 5919
struct __T50731308 *__T51794740; auto void (*__T51795444)(struct Controller *const);
#line 5925
auto struct ManualCalibTwoValue *AutoCalibVal;
#line 5921
if (!((this->OnWait)))
{
CallFctReff = CallFct;
}
AutoCalibVal = ((struct ManualCalibTwoValue *)(GetObject__15MenuControlNodeFv(((this->CurrentNode)))));

if ((__T51788940 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)AutoCalibVal)))))))).__vptr)) + 47)) , (((e_BOOL (*)(struct ManualCalibValue *const))((__T51788940->f)))(((
#line 5927
struct ManualCalibValue *)(((char *)((struct ManualCalibValue *)AutoCalibVal)) + ((__T51788940->d)))))))
{ auto struct __T50731308 *__T51789992;
(this->OnWait) = 0;
if ((__T51789992 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)AutoCalibVal)))))))).__vptr)) + 46)) , (((e_BOOL (*)(struct AutoCalibValue *const))((__T51789992->f)))(((
#line 5930
struct AutoCalibValue *)(((char *)((struct AutoCalibValue *)((struct ManualCalibValue *)AutoCalibVal))) + ((__T51789992->d)))))))
{
((__T51790744 = ((struct Controller *)(((char *)this) + ((CallFctReff.d))))) , (__T51792440 = ((void (*)(struct Controller *const))((((int)((CallFctReff.i))) < 0) ? ((CallFctReff.f)) : (((__T51791736 = (((*((struct __T50731308 **)(((char *)__T51790744) + ((short)((unsigned long)((CallFctReff.f))))))
#line 5932
)) + ((CallFctReff.i)))) , (__T51790744 = ((struct Controller *)(((char *)__T51790744) + ((__T51791736->d)))))) , ((__T51791736->f))))))) , (__T51792440(__T51790744));
}

else  {
if (!((__T51793140 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)AutoCalibVal)))))))).__vptr)) + 48)) , (((e_BOOL (*)(struct ManualCalibValue *const))((__T51793140->f)))(
#line 5936
((struct ManualCalibValue *)(((char *)((struct ManualCalibValue *)AutoCalibVal)) + ((__T51793140->d))))))))
{
((__T51793748 = ((struct Controller *)(((char *)this) + ((CallFctReff.d))))) , (__T51795444 = ((void (*)(struct Controller *const))((((int)((CallFctReff.i))) < 0) ? ((CallFctReff.f)) : (((__T51794740 = (((*((struct __T50731308 **)(((char *)__T51793748) + ((short)((unsigned long)((CallFctReff.f))))))
#line 5938
)) + ((CallFctReff.i)))) , (__T51793748 = ((struct Controller *)(((char *)__T51793748) + ((__T51794740->d)))))) , ((__T51794740->f))))))) , (__T51795444(__T51793748));
}

else  {
ReturnToNodeCalib__10ControllerFv(this);
}
}
}

else  {

(this->OnWait) = 1;
StartTimer__6VTimerFUlUii((&this->Timer), 100UL, 17U, 0);
} return;
}
#line 5119
void VerifAndManageCalibAuto__10ControllerFv( struct Controller *const this)
{
ManageVerifPointCalib__10ControllerFM10ControllerFv_v(this, __T51227188); return;
}
#line 3634
void ChangeBrightness__10ControllerFQ2_10Controller5WayId( struct Controller *const this,  __Q2_10Controller5WayId Sens)
{ auto struct __T50731308 *__T51452756; auto struct DisplayObject *__T51453172; auto struct DisplayObject *__T51454032; auto struct __T50731308 *__T51454592; auto struct DisplayObject *__T51455008; auto struct DisplayObject *__T51455868;
auto struct MenuControlNode *pSavedNode;
auto e_BOOL isVisible;
auto e_BOOL isModifVisible;
auto struct LabelProgressBar *ptBar;
auto e_BOOL savedBipRequest;
#line 3636
pSavedNode = (GetCurrentNode__10ControllerFv(this));
isVisible = (IsVisible__13DisplayObjectFv((GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 119U))))));
isModifVisible = (IsVisible__13DisplayObjectFv((GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 120U))))));
ptBar = ((struct LabelProgressBar *)(GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 119U)))));
savedBipRequest = (GetBipRequest__16LabelProgressBarFv(ptBar));
SetBipRequest__16LabelProgressBarFi(ptBar, 0);


if (IsModifNodeOn__10ControllerFv(this))
{ auto struct Controller *__T51450312; auto __Q2_10Controller11PController __T51450712; auto struct __T50731308 *__T51451544; auto void (*__T51452248)(struct Controller *const);__Q2_10Controller11PController __T51450520;
((__T51450312 = ((struct Controller *)(((char *)this) + ((__T51450520 = (__T51450712 = (((*(GetEventNode__15MenuControlNodeFv(pSavedNode))).OnTimeOut))), __T51450520.d))))) , (__T51452248 = ((void (*)(struct Controller *const))((((int)((__T51450712.i))) < 0) ? ((__T51450712.f)) : (((__T51451544 = ((
#line 3646
(*((struct __T50731308 **)(((char *)__T51450312) + ((short)((unsigned long)((__T51450712.f)))))))) + ((__T51450712.i)))) , (__T51450312 = ((struct Controller *)(((char *)__T51450312) + ((__T51451544->d)))))) , ((__T51451544->f))))))) , (__T51452248(__T51450312));
pSavedNode = (GetCurrentNode__10ControllerFv(this));
}

if ((GetCurrentFrame__10ControllerFv(this)) != 12U)
{
SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 120U)));
(__T51452756 = ((((*((struct MenuObject *)(__T51453172 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 119U))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T51452756->f)))(((struct DisplayObject *)(((char *)__T51453172) + ((__T51452756->d)))), 0));
(__T51452756 = ((((*((struct MenuObject *)(__T51454032 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 120U))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T51452756->f)))(((struct DisplayObject *)(((char *)__T51454032) + ((__T51452756->d)))), 0));
}

else  {
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 119U)));
MoveToModifNode__10ControllerFv(this);
}

switch ((int)Sens) {

case 0:
IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastBrightness), 45U, CONFIG);
DisplayBrithness__13InterfaceCppCSFUi(((this->LastBrightness)));
ModifyUp__10ControllerFv(this);
break;
case 1:
DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastBrightness), 45U, CONFIG);
DisplayBrithness__13InterfaceCppCSFUi(((this->LastBrightness)));
ModifyDown__10ControllerFv(this);
break;
default:
break;}

SetBrightness__10ControllerFUi(this, ((this->LastBrightness)));
ReturnToNode__10ControllerFv(this);

if ((GetCurrentFrame__10ControllerFv(this)) != 12U)
{
MoveCurrentNode__10ControllerFP15MenuControlNode(this, pSavedNode);
(__T51454592 = ((((*((struct MenuObject *)(__T51455008 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 119U))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T51454592->f)))(((struct DisplayObject *)(((char *)__T51455008) + ((__T51454592->d)))), isVisible
#line 3683
));
(__T51454592 = ((((*((struct MenuObject *)(__T51455868 = (GetObject__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 120U))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T51454592->f)))(((struct DisplayObject *)(((char *)__T51455868) + ((__T51454592->d)))), isModifVisible
#line 3684
));
}
SetBipRequest__16LabelProgressBarFi(ptBar, savedBipRequest); return;
}
#line 4118
void PlayBuzzer__10ControllerFv( struct Controller *const this)
{
auto UWORD16 _Val = 1U;
this;

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 65U, CONTROL);

StartBuzzerVoltRefresh__10ControllerFv(this); return;
}
#line 4136
void PlayBuzzerSec__10ControllerFv( struct Controller *const this)
{
auto UWORD16 _Val = 1U;
this;

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 66U, CONTROL); return;
}
#line 7816
void StopTimer__10ControllerFUi( struct Controller *const this,  UWORD16 _Timer)
{
StopTimer__6VTimerFUi((&this->Timer), _Timer); return;
}
#line 437
void StartBuzzerVoltRefresh__10ControllerFv( struct Controller *const this)
{
(this->SaveBuzzerVoltParamId) = (GetIdParam__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVBuzzerVoltage)))))));
(this->SaveBuzzerVoltDbId) = (GetDbTarget__10MenuObjectFv(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVBuzzerVoltage)))))));

SetDbTarget__10MenuObjectF19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVBuzzerVoltage))))), COMPUTE);
SetIdParam__10MenuObjectFUi(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVBuzzerVoltage))))), 31U);

SetBuzzerVoltRefreshReq__10ControllerFi(this, 1); return;
}

void StopBuzzerVoltRefresh__10ControllerFv( struct Controller *const this)
{
SetDbTarget__10MenuObjectF19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVBuzzerVoltage))))), ((this->SaveBuzzerVoltDbId)));
SetIdParam__10MenuObjectFUi(((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVBuzzerVoltage))))), ((this->SaveBuzzerVoltParamId)));

SetBuzzerVoltRefreshReq__10ControllerFi(this, 0); return;
}

void BuzzerVoltRefresh__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
if (IsBuzzerVoltRefreshReq__10ControllerFv(this))
{
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 62U, CONTROL);
if (!(Val)) {
StopBuzzerVoltRefresh__10ControllerFv(this); }
} return;
}
#line 2107
void NoAction__10ControllerFv( struct Controller *const this)
{
this; return;
}
#line 2124
void MoveDown__10ControllerFv( struct Controller *const this)
{

if (IsModeChange__10ControllerFv(this))
{
StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 8U, 0);
}
MoveToOtherNode__10ControllerFQ2_10Controller5WayId(this, eGoDown__10Controller); return;
}
#line 2146
void MoveUp__10ControllerFv( struct Controller *const this)
{

if (IsModeChange__10ControllerFv(this))
{
StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 8U, 0);
}
MoveToOtherNode__10ControllerFQ2_10Controller5WayId(this, eGoUp__10Controller); return;
}
#line 6496
void MoveDownNodeMaintPwmBlower__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51837796;
StopBlowerBurnTest__10ControllerFv(this);

(__T51837796 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T51837796->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 6500
*)(&this->LOVPwmBlower))) + ((__T51837796->d))))));
MoveDown__10ControllerFv(this); return;
}
#line 6513
void MoveUpNodeMaintPwmBlower__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51839712;
StopBlowerBurnTest__10ControllerFv(this);

(__T51839712 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T51839712->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 6517
*)(&this->LOVPwmBlower))) + ((__T51839712->d))))));
MoveUp__10ControllerFv(this); return;
}
#line 5659
void ReturnToNodeMaintPwmBlowerTO__10ControllerFv( struct Controller *const this)
{
ReturnToNodeTO__10ControllerFv(this); return;
}
#line 5729
void ReturnToNodeMaintPwmBlower__10ControllerFv( struct Controller *const this)
{
ReturnToNode__10ControllerFv(this); return;
}
#line 2196
void ModifyUp__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51148012; auto struct MenuObject *__T51148428;

StartTimer__6VTimerFUlUii((&this->Timer), 7000UL, 3U, 0);


RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));
StartTimer__6VTimerFUlUii((&this->Timer), 400UL, 16U, 0);


(__T51148012 = ((((*(__T51148428 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 7)) , (((void (*)(struct MenuObject *const))((__T51148012->f)))(((struct MenuObject *)(((char *)__T51148428) + ((__T51148012->d))))));


SettingBlockDetect__10ControllerFv(this); return;
}
#line 2168
void ModifyDown__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51145324; auto struct MenuObject *__T51145740;

StartTimer__6VTimerFUlUii((&this->Timer), 7000UL, 3U, 0);


RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));
StartTimer__6VTimerFUlUii((&this->Timer), 400UL, 16U, 0);


(__T51145324 = ((((*(__T51145740 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 8)) , (((void (*)(struct MenuObject *const))((__T51145324->f)))(((struct MenuObject *)(((char *)__T51145740) + ((__T51145324->d))))));


SettingBlockDetect__10ControllerFv(this); return;
}
#line 2247
void ModifyUpRefreshBlower__10ControllerFv( struct Controller *const this)
{
if ((IsStopMonitoring__13LabelOneValueFv(((struct LabelOneValue *)(&this->LOVPwmBlower)))) == 1)
{ auto struct __T50731308 *__T51153260;
(__T51153260 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T51153260->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 2251
*)(&this->LOVPwmBlower))) + ((__T51153260->d))))));
RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))), 1);
}

ModifyUp__10ControllerFv(this); return;
}
#line 2224
void ModifyDownRefreshBlower__10ControllerFv( struct Controller *const this)
{
if ((IsStopMonitoring__13LabelOneValueFv(((struct LabelOneValue *)(&this->LOVPwmBlower)))) == 1)
{ auto struct __T50731308 *__T51150532;
(__T51150532 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T51150532->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 2228
*)(&this->LOVPwmBlower))) + ((__T51150532->d))))));
RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))), 1);
}

ModifyDown__10ControllerFv(this); return;
}
#line 2269
void MoveValid__10ControllerFv( struct Controller *const this)
{

MoveToOtherNode__10ControllerFQ2_10Controller5WayId(this, eGoValid__10Controller); return;
}
#line 2286
void MoveMonitor__10ControllerFv( struct Controller *const this)
{

MoveToOtherNode__10ControllerFQ2_10Controller5WayId(this, eGoMonitor__10Controller); return;
}
#line 5963
void MoveDownNodePreference__10ControllerFv( struct Controller *const this)
{
if (IsValid__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 0U))))
{
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 0U)));
} return;
}
#line 5980
void MoveMonitorNodeModifVentil__10ControllerFv( struct Controller *const this)
{

StopAllMenuAction__10ControllerFv(this);


MoveToOtherNode__10ControllerFQ2_10Controller5WayId(this, eGoMonitor__10Controller); return;
}
#line 5998
void MoveValidNodeAlHisto__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 30000UL, 4U, 0);
MoveValid__10ControllerFv(this); return;
}
#line 6015
void MoveValidNodePreference__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);
MoveValid__10ControllerFv(this); return;
}
#line 6031
void MoveValidNodeHistAlBack__10ControllerFv( struct Controller *const this)
{

StopTimer__6VTimerFUi((&this->Timer), 4U);
MoveValid__10ControllerFv(this); return;
}
#line 6243
void MoveUpNodeHistAlBack__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 30000UL, 4U, 0);

MoveUp__10ControllerFv(this); return;
}
void MoveDownNodeHistAlBack__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 30000UL, 4U, 0);

MoveDown__10ControllerFv(this); return;
}
#line 6047
void MoveValidNodeHistAlCancelled__10ControllerFv( struct Controller *const this)
{
auto UWORD16 _Value;


_Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), 61U, CONTROL);




_Value = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), 58U, CONTROL);




MoveValid__10ControllerFv(this); return;
}
#line 6076
void MoveValidNodePrefBackVentil__10ControllerFv( struct Controller *const this)
{

StopTimer__6VTimerFUi((&this->Timer), 5U);
MoveValid__10ControllerFv(this); return;
}
#line 6294
void MoveUpNodeGraphGhost__10ControllerFv( struct Controller *const this)
{
FreezeMonitoring__10FrameGraphFiT1((&this->FGraph), 0, 1); return;
}
void MoveDownNodeGraphGhost__10ControllerFv( struct Controller *const this)
{
FreezeMonitoring__10FrameGraphFiT1((&this->FGraph), 1, 1); return;
}
#line 6313
void MoveValidNodeCfgGraphBackPref__10ControllerFv( struct Controller *const this)
{

StopTimer__6VTimerFUi((&this->Timer), 6U); return;



}
#line 6094
void MoveUpNodePrefScreenSave__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);
MoveUp__10ControllerFv(this); return;
}
void MoveDownNodePrefScreenSave__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);
MoveDown__10ControllerFv(this); return;
}
void ModifyUpNodePrefScreenSave__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Id; Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if (Id == 120U)
{
IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastBrightness), 45U, CONFIG);
DisplayBrithness__13InterfaceCppCSFUi(((this->LastBrightness)));
} else  {
if (Id == 122U)
{
IncrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastSoundLevel), 68U, CONFIG);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastSoundLevel), 68U, CONFIG);
} }

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);
ModifyUp__10ControllerFv(this); return;
}
void ModifyDownNodePrefScreenSave__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Id; Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if (Id == 120U)
{
DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastBrightness), 45U, CONFIG);
DisplayBrithness__13InterfaceCppCSFUi(((this->LastBrightness)));
} else  {
if (Id == 122U)
{
DecrementValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastSoundLevel), 68U, CONFIG);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->LastSoundLevel), 68U, CONFIG);
} }

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);
ModifyDown__10ControllerFv(this); return;
}
#line 6153
void MoveToModifNodePrefScreenSave__10ControllerFv( struct Controller *const this)
{



auto UWORD16 Id;
#line 6156
StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);

Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if (Id == 121U)
{


auto UWORD16 _Val;
#line 6161
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->MemoSoundLevel), 68U, CONFIG);
(this->LastSoundLevel) = ((this->MemoSoundLevel));
_Val = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 67U, CONTROL);
}

MoveToModifNode__10ControllerFv(this); return;
}
void ReturnToNodePrefScreenSave__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Id; Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if (Id == 122U)
{
auto UWORD16 _Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 67U, CONTROL);
}


StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);
ReturnToNode__10ControllerFv(this); return;
}
#line 6140
void ReturnToNodeTONodePrefScreenSave__10ControllerFv( struct Controller *const this)
{

auto UWORD16 Id;
#line 6142
ReturnToNodeTO__10ControllerFv(this);
Id = (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv((GetCurrentNode__10ControllerFv(this)))))));
if (Id == 119U) {
SetBrightness__10ControllerFUi(this, (GetBrightness__10ControllerFv(this))); }
if (Id == 121U)
{

auto UWORD16 _Val;
#line 6148
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->MemoSoundLevel), 68U, CONFIG);
_Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 67U, CONTROL);
} return;
}
#line 6192
void MoveTimeOutNodePrefScreenSave__10ControllerFv( struct Controller *const this)
{



auto struct MenuControlNode *PtrNode;
auto struct MenuControlNode *PtrNodeTarget;
#line 6195
StopTimer__6VTimerFUi((&this->Timer), 5U);

PtrNode = (GetCurrentNode__10ControllerFv(this));


PtrNodeTarget = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnTimeOut__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))))));
PtrNodeTarget = (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, PtrNodeTarget, eGoDown__10Controller));


if (!(IsValid__15MenuControlNodeFv(PtrNodeTarget)))
{
PtrNodeTarget = PtrNode;
}


MoveCurrentNode__10ControllerFP15MenuControlNode(this, PtrNodeTarget); return;
}
#line 6222
void MoveTimeOutNodeHistAlBack__10ControllerFv( struct Controller *const this)
{



auto struct MenuControlNode *PtrNode;
auto struct MenuControlNode *PtrNodeTarget;
#line 6225
StopTimer__6VTimerFUi((&this->Timer), 4U);

PtrNode = (GetCurrentNode__10ControllerFv(this));


PtrNodeTarget = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnTimeOut__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))))));
PtrNodeTarget = (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, PtrNodeTarget, eGoDown__10Controller));


if (!(IsValid__15MenuControlNodeFv(PtrNodeTarget)))
{
PtrNodeTarget = PtrNode;
}


MoveCurrentNode__10ControllerFP15MenuControlNode(this, PtrNodeTarget); return;
}
#line 6268
void MoveTimeOutUSB__10ControllerFv( struct Controller *const this)
{
auto struct MenuControlNode *PtrNode;
auto struct MenuControlNode *PtrNodeTarget;
#line 6270
PtrNode = (GetCurrentNode__10ControllerFv(this));


PtrNodeTarget = (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnTimeOut__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(PtrNode)))))));
PtrNodeTarget = (FindFirstValidNode__10ControllerFP15MenuControlNodeQ2_10Controller5WayId(this, PtrNodeTarget, eGoDown__10Controller));


if (!(IsValid__15MenuControlNodeFv(PtrNodeTarget)))
{
PtrNodeTarget = PtrNode;
}


MoveCurrentNode__10ControllerFP15MenuControlNode(this, PtrNodeTarget); return;
}
#line 6330
void MoveValidNodePrefCurveConfig__10ControllerFv( struct Controller *const this)
{
StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 6U, 0);

MoveValid__10ControllerFv(this); return;
}
#line 6346
void MoveValidNodePrefTrend__10ControllerFv( struct Controller *const this)
{

StopTimer__6VTimerFUi((&this->Timer), 5U);


StartTimer__6VTimerFUlUii((&this->Timer), 300000UL, 28U, 0);

MoveValid__10ControllerFv(this); return;
}
#line 6368
void MoveUpNodeCfgGraphVisu__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 6U, 0);
MoveUp__10ControllerFv(this); return;
}
void MoveDownNodeCfgGraphVisu__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 6U, 0);
MoveDown__10ControllerFv(this); return;
}
void ModifyUpNodeCfgGraphVisu__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 6U, 0);
ModifyUp__10ControllerFv(this); return;
}
void ModifyDownNodeCfgGraphVisu__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 6U, 0);
ModifyDown__10ControllerFv(this); return;
}
void MoveToModifNodeCfgGraphVisu__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 6U, 0);
MoveToModifNode__10ControllerFv(this); return;
}
void ReturnToNodeCfgGraphVisu__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 6U, 0);
ReturnToNode__10ControllerFv(this); return;
}
#line 6423
void MoveTimeOutNodeCfgGraphVisu__10ControllerFv( struct Controller *const this)
{
StopTimer__6VTimerFUi((&this->Timer), 6U); return;
#line 6433
}
#line 6443
void MoveUpNodeTrendBack__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 300000UL, 28U, 0); return;
}
void MoveDownNodeTrendBack__10ControllerFv( struct Controller *const this)
{

StartTimer__6VTimerFUlUii((&this->Timer), 300000UL, 28U, 0); return;
}
void MoveValidNodeTrendBack__10ControllerFv( struct Controller *const this)
{

StopTimer__6VTimerFUi((&this->Timer), 28U);


StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);

MoveValid__10ControllerFv(this); return;
}
void MoveTimeOutNodeTrendBack__10ControllerFv( struct Controller *const this)
{

StopTimer__6VTimerFUi((&this->Timer), 28U);


StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);

MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 133U))); return;
}
#line 1243
void MoveToModifNode__10ControllerFv( struct Controller *const this)
{
SetModifNodeOn__10ControllerFi(this, 1);


if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51062984; auto struct DisplayObject *__T51063512; auto struct MenuObject *__T51064372;
(__T51062984 = ((((*((struct MenuObject *)(__T51063512 = (GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 15)) , (((void (*)(struct DisplayObject *const))((__T51062984->f)))(((struct DisplayObject *)(((char *)__T51063512) + ((__T51062984->d))))));
(__T51062984 = ((((*(__T51064372 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 4)) , (((void (*)(struct MenuObject *const))((__T51062984->f)))(((struct MenuObject *)(((char *)__T51064372) + ((__T51062984->d))))));


AddElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));


SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));




StartTimer__6VTimerFUlUii((&this->Timer), 7000UL, 3U, 0);


if (IsModeChange__10ControllerFv(this))
{
StopTimer__6VTimerFUi((&this->Timer), 8U);
}
} return;
}
#line 5742
void MoveToModifNodeBlowerAction__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51769332;

(__T51769332 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T51769332->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 5745
*)(&this->LOVPwmBlower))) + ((__T51769332->d))))));
RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))), 1);
MoveToModifNode__10ControllerFv(this); return;
}
#line 5643
void MoveToModifNodeMaintPwmBlower__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51761024;
(__T51761024 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 22)) , (((void (*)(struct LabelOneValue *const))((__T51761024->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 5645
*)(&this->LOVPwmBlower))) + ((__T51761024->d))))));
(__T51761024 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 15)) , (((void (*)(struct LabelOneValue *const))((__T51761024->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 5646
*)(&this->LOVPwmBlower))) + ((__T51761024->d))))));
MoveToModifNode__10ControllerFv(this); return;
}
#line 5626
void MoveToModifNodeCalibAuto__10ControllerFv( struct Controller *const this)
{
StartTimer__6VTimerFUlUii((&this->Timer), 1000UL, 9U, 0);
MoveToModifNodeBlowerAction__10ControllerFv(this);
StopTimer__6VTimerFUi((&this->Timer), 3U); return;
}
#line 1284
void MoveToNextModifNode__10ControllerFv( struct Controller *const this)
{

SettingBlockDetect__10ControllerFv(this);

MoveToNextModifNodeOnKey__10ControllerFQ2_10Controller5WayId(this, eGoValid__10Controller); return;
}
#line 1305
void MoveToNextModifNodeOnKey__10ControllerFQ2_10Controller5WayId( struct Controller *const this,  __Q2_10Controller5WayId _Key)
{

RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));


if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51069960; auto struct MenuObject *__T51070488;
(__T51069960 = ((((*(__T51070488 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 9)) , (((void (*)(struct MenuObject *const))((__T51069960->f)))(((struct MenuObject *)(((char *)__T51070488) + ((__T51069960->d))))));
}


switch ((int)_Key) {

case 4: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;

case 2: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;

case 3: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnLongValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;
default:
break;}



AddElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));


if (((int)_Key) == 2)
{

StartTimer__6VTimerFUlUii((&this->Timer), 7000UL, 3U, 0);
} return;
}
#line 5774
void MoveToNextModifNodeCalib__10ControllerFv( struct Controller *const this)
{
MoveToNextModifNodeOnKey__10ControllerFQ2_10Controller5WayId(this, eGoLongValid__10Controller); return;
}
#line 5760
void VerifAndMoveToNextModifNodeCalib__10ControllerFv( struct Controller *const this)
{
ManageVerifPointCalib__10ControllerFM10ControllerFv_v(this, __T51233976); return;
}
#line 1361
void ReturnToNode__10ControllerFv( struct Controller *const this)
{
ReturnToNodeOnKey__10ControllerFQ2_10Controller5WayId(this, eGoValid__10Controller);


SendNodeModify__10ControllerFUii(this, (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))), 1); return;
}
#line 1382
void ReturnToNodeUsb__10ControllerFv( struct Controller *const this)
{

ReturnToNodeOnKeyUsb__10ControllerFQ2_10Controller5WayId(this, eGoValid__10Controller);


SendNodeModify__10ControllerFUii(this, (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))), 1); return;
}
#line 1403
void ReturnToNodeUsbTO__10ControllerFv( struct Controller *const this)
{

ReturnToNodeTO__10ControllerFv(this);


AddMessageToQueue__14MessageDelayedFPUcUli((&this->UsbDelayed), ((UBYTE *)""), 2000UL, ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U))); return;


}
#line 1580
void ReturnToNodeOnKey__10ControllerFQ2_10Controller5WayId( struct Controller *const this,  __Q2_10Controller5WayId _Key)
{

EndModifToNode__10ControllerFv(this);


if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51090492; auto struct MenuObject *__T51091020;
(__T51090492 = ((((*(__T51091020 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 5)) , (((void (*)(struct MenuObject *const))((__T51090492->f)))(((struct MenuObject *)(((char *)__T51091020) + ((__T51090492->d))))));
}


switch ((int)_Key) {

case 4: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;

case 2: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;

case 3: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnLongValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;} return;

}
#line 1426
void ReturnToNodeOnKeyUsb__10ControllerFQ2_10Controller5WayId( struct Controller *const this,  __Q2_10Controller5WayId _Key)
{ auto struct __T50731308 *__T51083044; auto struct MenuObject *__T51083460;
auto UBYTE *_StringToDisplay;

auto struct MenuControlNode *_PreviousNode = ((struct MenuControlNode *)0);

EndModifToNode__10ControllerFv(this);


if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{
(__T51083044 = ((((*(__T51083460 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 5)) , (((void (*)(struct MenuObject *const))((__T51083044->f)))(((struct MenuObject *)(((char *)__T51083460) + ((__T51083044->d))))));
_PreviousNode = ((this->CurrentNode));
}


switch ((int)_Key) {

case 4: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;

case 2: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;

case 3: SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnLongValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


break;
default:
break;}



if ((_PreviousNode != ((struct MenuControlNode *)0)) && (((int)_Key) == 2))
{ auto struct __T50731308 *__T51083968; auto struct DisplayObject *__T51084384;
auto UWORD16 _Val;
auto e_BOOL _EraseFlag;

_Val = ((__T51083968 = ((((*((struct MenuObject *)(__T51084384 = (GetObject__15MenuControlNodeFv(_PreviousNode))))).__vptr)) + 12)) , (((UWORD16 (*)(struct DisplayObject *const))((__T51083968->f)))(((struct DisplayObject *)(((char *)__T51084384) + ((__T51083968->d)))))));

if (_Val)
{



_Val = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 16U, USB);

if ((GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(_PreviousNode))))) == 215U) {
_EraseFlag = 1; } else  {

_EraseFlag = 0; }


GetUsbProcessingMessage__8FrameUSBFiPPUc((&this->FUsb), _EraseFlag, (&_StringToDisplay));

AddMessageToQueue__14MessageDelayedFPUcUli((&this->UsbDelayed), _StringToDisplay, 100UL, ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U)));
#line 1494
SetUsbProcessingNode__10ControllerFP15MenuControlNode(this, _PreviousNode);


SetUsbCmdInProgress__10ControllerFi(this, 1);


SetIdNodeOnMonitor__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 194U)))), 218U);
SetIdNodeOnMonitor__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 81U)))), 218U);
SetIdNodeOnDown__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 81U)))), 218U);
SetIdNodeOnUp__9EventNodeFUi((GetEventNode__15MenuControlNodeFv((GetNodeAt__10ControllerFUi(this, 81U)))), 218U);
SetVisible__15MenuControlNodeFi((GetNodeAt__10ControllerFUi(this, 218U)), 1);
MoveCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 218U)));


ManageUsbLock__10ControllerFi(this, 1);
}

else  {


AddMessageToQueue__14MessageDelayedFPUcUli((&this->UsbDelayed), ((UBYTE *)""), 2000UL, ((e_BOOL)((GetCurrentFrame__10ControllerFv(this)) == 26U)));


}
} return;
}
#line 1531
void ValidUsbStop__10ControllerFv( struct Controller *const this)
{

auto UWORD16 _Val = 1U;
this;

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Val), 17U, USB); return;
}
#line 5803
void ReturnToNodeCalib__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51773720;
ReturnToNodeOnKey__10ControllerFQ2_10Controller5WayId(this, eGoValid__10Controller);


StopTimer__6VTimerFUi((&this->Timer), 9U);
(this->OnWait) = 0;


RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))), 0);
(__T51773720 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T51773720->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 5813
*)(&this->LOVPwmBlower))) + ((__T51773720->d)))))); return;
}
#line 5789
void VerifAndReturnToNodeCalib__10ControllerFv( struct Controller *const this)
{
ManageVerifPointCalib__10ControllerFM10ControllerFv_v(this, __T51234524); return;
}
#line 1624
void ReturnToNodeTO__10ControllerFv( struct Controller *const this)
{

EndModifToNode__10ControllerFv(this);


if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51093604; auto struct MenuObject *__T51094132;
(__T51093604 = ((((*(__T51094132 = ((struct MenuObject *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))).__vptr)) + 6)) , (((void (*)(struct MenuObject *const))((__T51093604->f)))(((struct MenuObject *)(((char *)__T51094132) + ((__T51093604->d))))));
}


SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnTimeOut__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));




SendNodeModify__10ControllerFUii(this, (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))), 0); return;
}
#line 4799
void ManageModeChange__10ControllerFv( struct Controller *const this)
{

auto struct LabelMode *NodeObject;
auto e_MODE_TYPES ModifMode;
#line 4802
NodeObject = ((struct LabelMode *)(GetObject__15MenuControlNodeFv(((this->CurrentNode)))));
ModifMode = (GetModifMode__9LabelModeFv(NodeObject));

if (((int)(GetCurrentMode__10ControllerFv(this))) != ((int)ModifMode))
{

if (IsVentilOn__10ControllerFv(this))
{

ShowBatAndValve__16FrameVentilationFi((&this->FVentilation), 0);
ShowBatAndValve__11FrameAlarmeFi((&this->FAlarme), 0);
ShowPressConvention__16FrameVentilationFi((&this->FVentilation), 0);
ShowInhibApneaOk__16FrameVentilationFi((&this->FVentilation), 0);
ShowInibOk__16FrameVentilationFi((&this->FVentilation), 0);
ShowCancelOk__16FrameVentilationFi((&this->FVentilation), 0);
ShowInhibApneaOk__11FrameAlarmeFi((&this->FAlarme), 0);
ShowInibOk__11FrameAlarmeFi((&this->FAlarme), 0);
ShowCancelOk__11FrameAlarmeFi((&this->FAlarme), 0);
SetModeChange__10ControllerFi(this, 1);

SetConsultMode__10ControllerF12e_MODE_TYPES(this, ModifMode);

StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 8U, 0);
}

else  {
StopModifMode__10ControllerF12e_MODE_TYPES(this, ModifMode);
}
}

else  {
if (IsVentilOn__10ControllerFv(this))
{
StopModifMode__10ControllerF12e_MODE_TYPES(this, (GetCurrentMode__10ControllerFv(this)));
}
} return;
}
#line 1656
void EndModifToNode__10ControllerFv( struct Controller *const this)
{




if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{ auto struct __T50731308 *__T51097472;
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0);
(__T51097472 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->TopMessage)))).__vptr)) + 17)) , (((void (*)(struct MessageDialog *const))((__T51097472->f)))(((struct MessageDialog *)(((char *)(&this->TopMessage)) + ((__T51097472->d))))));
(__T51097472 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BottomMessage)))).__vptr)) + 17)) , (((void (*)(struct MessageDialog *const))((__T51097472->f)))(((struct MessageDialog *)(((char *)(&this->BottomMessage)) + ((__T51097472->d))))));
}


StopTimer__6VTimerFUi((&this->Timer), 16U);

RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));


StopTimer__6VTimerFUi((&this->Timer), 3U);


SetModifNodeOn__10ControllerFi(this, 0);


if (IsModeChange__10ControllerFv(this))
{
StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 8U, 0);
} return;
}
#line 1700
void MoveToModifNodeLoupe__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51103360; auto struct __T50731308 *__T51104952;
auto struct VFrame *CFrame;

auto struct DisplayObject *Object;

auto struct Label *EditableObject;
#line 1702
CFrame = (GetFrameObject__10ControllerFUi(this, ((this->CurrentFrame))));

Object = (GetObject__15MenuControlNodeFv(((this->CurrentNode))));

EditableObject = ((struct Label *)Object);


StopTimer__6VTimerFUi((&this->Timer), 1U);


if (!(IsVentilOn__10ControllerFv(this)))
{
HideMessageFrame__10ControllerFv(this);
}

else  { auto struct __T50731308 *__T51102420;


StopTimer__6VTimerFUi((&this->Timer), 15U);


(__T51102420 = ((((*((struct MenuObject *)((struct DisplayObject *)CFrame))).__vptr)) + 47)) , (((void (*)(struct VFrame *const))((__T51102420->f)))(((struct VFrame *)(((char *)CFrame) + ((__T51102420->d))))));
}
(__T51103360 = ((((*((struct MenuObject *)((struct DisplayObject *)CFrame))).__vptr)) + 42)) , (((void (*)(struct VFrame *const))((__T51103360->f)))(((struct VFrame *)(((char *)CFrame) + ((__T51103360->d))))));


(__T51104952 = ((((*((struct MenuObject *)((struct DisplayObject *)EditableObject))).__vptr)) + 36)) , (((void (*)(struct Label *const, struct Loupe *))((__T51104952->f)))(((struct Label *)(((char *)EditableObject) + ((__T51104952->d)))), ((__T51103360 = ((((*((struct MenuObject *)((struct 
#line 1728
DisplayObject *)CFrame))).__vptr)) + 44)) , (((struct Loupe *(*)(struct VFrame *const))((__T51103360->f)))(((struct VFrame *)(((char *)CFrame) + ((__T51103360->d)))))))));


(this->CurrentLoupe) = ((__T51104952 = ((((*((struct MenuObject *)((struct DisplayObject *)CFrame))).__vptr)) + 44)) , (((struct Loupe *(*)(struct VFrame *const))((__T51104952->f)))(((struct VFrame *)(((char *)CFrame) + ((__T51104952->d)))))));

MoveToModifNode__10ControllerFv(this); return;
}
#line 1749
void ReturnToNodeLoupe__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51108220;




auto struct DisplayObject *Object;

auto struct Label *EditableObject;
#line 1752
ReturnToNode__10ControllerFv(this);


Object = (GetObject__15MenuControlNodeFv(((this->CurrentNode))));

EditableObject = ((struct Label *)Object);

(__T51108220 = ((((*((struct MenuObject *)((struct DisplayObject *)EditableObject))).__vptr)) + 36)) , (((void (*)(struct Label *const, struct Loupe *))((__T51108220->f)))(((struct Label *)(((char *)EditableObject) + ((__T51108220->d)))), ((struct Loupe *)0)));


StartTimer__6VTimerFUlUii((&this->Timer), 1000UL, 1U, 0);


(this->CurrentLoupe) = ((struct Loupe *)0); return;
}
#line 1783
void ReturnToNodeTOLoupe__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51111460;
auto struct VFrame *CFrame;


auto struct DisplayObject *Object;
auto struct Label *EditableObject;
#line 1785
CFrame = (GetFrameObject__10ControllerFUi(this, ((this->CurrentFrame))));


Object = (GetObject__15MenuControlNodeFv(((this->CurrentNode))));
EditableObject = ((struct Label *)Object);
(__T51111460 = ((((*((struct MenuObject *)((struct DisplayObject *)EditableObject))).__vptr)) + 36)) , (((void (*)(struct Label *const, struct Loupe *))((__T51111460->f)))(((struct Label *)(((char *)EditableObject) + ((__T51111460->d)))), ((struct Loupe *)0)));


ReturnToNodeTO__10ControllerFv(this);


if (!(IsVentilOn__10ControllerFv(this)))
{
ShowMessageFrame__10ControllerFiPUc8e_SYMBOL(this, 1, ((UBYTE *)(cMSG_StartVentil[(GetLanguage__10ControllerFv(this))])), VENTIL);


}

else  { auto struct __T50731308 *__T51112320;

(__T51112320 = ((((*((struct MenuObject *)((struct DisplayObject *)CFrame))).__vptr)) + 46)) , (((void (*)(struct VFrame *const))((__T51112320->f)))(((struct VFrame *)(((char *)CFrame) + ((__T51112320->d))))));
} return;
}
#line 6482
void ReturnToNodeLoupe1191__10ControllerFv( struct Controller *const this)
{
ReturnToNodeLoupe__10ControllerFv(this); return;
}
#line 6620
void MoveToNextModifConsultCalib__10ControllerFv( struct Controller *const this)
{

if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{
if (!(ModifNextValueConsult__14AutoCalibValueFv(((struct AutoCalibValue *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))))
{
ReturnToNodeOnConsultCalib__10ControllerFv(this);
}
} return;
}
#line 6644
void MoveToNextModifConsultCalib2Value__10ControllerFv( struct Controller *const this)
{

if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51852588; auto struct ManualCalibTwoValue *__T51853116;
if (!((__T51852588 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)(__T51853116 = ((struct ManualCalibTwoValue *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))))
#line 6649
)))))).__vptr)) + 52)) , (((e_BOOL (*)(struct ManualCalibTwoValue *const))((__T51852588->f)))(((struct ManualCalibTwoValue *)(((char *)__T51853116) + ((__T51852588->d))))))))
{
ReturnToNodeOnConsultCalib2Value__10ControllerFv(this);
}
} return;
}
#line 6574
void ReturnToNodeOnConsultCalib__10ControllerFv( struct Controller *const this)
{

if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{
StopModifModeConsult__14AutoCalibValueFv(((struct AutoCalibValue *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))));
}

SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode)))))))))); return;
}
#line 6596
void ReturnToNodeOnConsultCalib2Value__10ControllerFv( struct Controller *const this)
{

if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51848536; auto struct ManualCalibTwoValue *__T51849064;
(__T51848536 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)(__T51849064 = ((struct ManualCalibTwoValue *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))))))))))
#line 6601
.__vptr)) + 51)) , (((void (*)(struct ManualCalibTwoValue *const))((__T51848536->f)))(((struct ManualCalibTwoValue *)(((char *)__T51849064) + ((__T51848536->d))))));
}


SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode)))))))))); return;
}
#line 6531
void MoveToModifNodeConsultCalib__10ControllerFv( struct Controller *const this)
{
if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{
StartModifModeConsult__14AutoCalibValueFv(((struct AutoCalibValue *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))));
}


SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode)))))))))); return;
}
#line 6552
void MoveToModifNodeConsultCalib2Value__10ControllerFv( struct Controller *const this)
{
if (((this->CurrentNode)) != ((struct MenuControlNode *)0))
{ auto struct __T50731308 *__T51844052; auto struct ManualCalibTwoValue *__T51844580;
(__T51844052 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)((struct AutoCalibValue *)((struct ManualCalibValue *)(__T51844580 = ((struct ManualCalibTwoValue *)(GetObject__15MenuControlNodeFv(((this->CurrentNode))))))))))))))
#line 6556
.__vptr)) + 50)) , (((void (*)(struct ManualCalibTwoValue *const))((__T51844052->f)))(((struct ManualCalibTwoValue *)(((char *)__T51844580) + ((__T51844052->d))))));
}


SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnMonitor__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode)))))))))); return;
}
#line 1225
void ChangeModeSimplify__10ControllerFv( struct Controller *const this)
{

SendNodeModify__10ControllerFUii(this, (GetId__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))), 1); return;
}
#line 6667
void MoveToNextNodeJumpCalib__10ControllerFv( struct Controller *const this)
{
MoveToNextModifNodeOnKey__10ControllerFQ2_10Controller5WayId(this, eGoMonitor__10Controller); return;
}
#line 6683
void ReturnToNodeCalibAuto__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51856160;
ReturnToNodeOnKey__10ControllerFQ2_10Controller5WayId(this, eGoMonitor__10Controller);


StopTimer__6VTimerFUi((&this->Timer), 9U);
StopTimer__6VTimerFUi((&this->Timer), 17U);
(this->OnWait) = 0;


RefreshEnable__13DisplayObjectFi(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))), 0);
(__T51856160 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPwmBlower))))))).__vptr)) + 20)) , (((void (*)(struct LabelOneValue *const))((__T51856160->f)))(((struct LabelOneValue *)(((char *)((struct LabelOneValue 
#line 6694
*)(&this->LOVPwmBlower))) + ((__T51856160->d)))))); return;
}
#line 6404
void ReturnToNodeCfgGraphVisuVisu__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
ReturnToNodeCfgGraphVisu__10ControllerFv(this);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 70U, CONFIG);

if (Val == 1U) { SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LVSRepresentation)), 0U); } return;
}
#line 6724
void ReturnToNodeLoupe1151__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val1; auto UWORD16 Val2; auto UWORD16 Mode;

ReturnToNodeLoupe__10ControllerFv(this);

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val1), 31U, ADJUST);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val2), 33U, ADJUST);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Mode), 1U, CONFIG);

if (Mode == 2U)
{ auto struct __T50731308 *__T51860984;
(__T51860984 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))))))).__vptr)) + 40)) , (((void (*)(struct LabelTabTwoValueFlag *const, UWORD16)
#line 6736
)((__T51860984->f)))(((struct LabelTabTwoValueFlag *)(((char *)(&this->LTTVTiS)) + ((__T51860984->d)))), Val1));
(__T51860984 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVTiS))))))))).__vptr)) + 44)) , (((void (*)(struct LabelTabTwoValueFlag *const, UWORD16)
#line 6737
)((__T51860984->f)))(((struct LabelTabTwoValueFlag *)(((char *)(&this->LTTVTiS)) + ((__T51860984->d)))), Val2));
} return;
}
#line 6706
void ReturnToNodeLoupeNodeModifFsecu__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51857952;
(__T51857952 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))))))).__vptr)) + 15)) , (((void (*)(struct LabelTabOneValue *const))((__T51857952->f)))(((struct 
#line 6708
LabelTabOneValue *)(((char *)((struct LabelTabOneValue *)((struct LabelTabOneValueDefault *)(&this->LOVFrCMin)))) + ((__T51857952->d))))));
ReturnToNodeLoupe__10ControllerFv(this); return;

}
#line 6764
void MoveToNextModifNodeAlVteMin__10ControllerFv( struct Controller *const this)
{
auto UWORD16 VentilOn;
auto UWORD16 CurrentMode;
auto UWORD16 _Line; auto UWORD16 _Spacing; auto UWORD16 _Order;
auto UWORD32 _PresentAndOrder;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&CurrentMode), 1U, CONFIG);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&VentilOn), 0U, CONTROL);

if (!(VentilOn))
{ auto struct __T50731308 *__T51871276;
#line 6803
auto struct Label *EditableObject1;
#line 6777
RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 0);
SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LSTICalibQExp)), 0U);


_PresentAndOrder = (IsNodeInTree__10ControllerF12e_MODE_TYPESUiN22(this, ((e_MODE_TYPES)CurrentMode), 58U, 50U, 78U));
if (_PresentAndOrder) {
_Order = ((UWORD16)(_PresentAndOrder & 2147483647UL)); } else  {

_Order = 0U; }


_Line = (GetFirstLineOfTable__11FrameAlarmeFv((&this->FAlarme)));


_Spacing = (GetSpacingOfTable__11FrameAlarmeFv((&this->FAlarme)));


_Line += (_Spacing * (_Order - 1U));
(__T51871276 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51871276->f)))(((struct DisplayObject *)(((char *)((struct 
#line 6795
DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp)))))) + ((__T51871276->d)))), _Line));


UpdateColNodeAlCalibVte__10ControllerFv(this);

(__T51871276 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51871276->f)))(((struct LabelValueString *)(((char *)((struct 
#line 6800
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51871276->d))))));


EditableObject1 = ((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))));
(__T51871276 = ((((*((struct MenuObject *)((struct DisplayObject *)EditableObject1))).__vptr)) + 36)) , (((void (*)(struct Label *const, struct Loupe *))((__T51871276->f)))(((struct Label *)(((char *)EditableObject1) + ((__T51871276->d)))), ((this->CurrentLoupe))));
if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0);
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibQExpTab[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
}


MoveToNextModifNode__10ControllerFv(this);


if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
SetValue__5LoupeFPUc(((this->CurrentLoupe)), (GetValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibQExp))))); }
}

else  {


MoveToNextModifNode__10ControllerFv(this);

SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LSTICalibQExp)), 0U);

MoveToNextModifNodeAlCalibVte__10ControllerFv(this);
} return;
}
#line 6839
void MoveToNextModifNodeAlCalibVte__10ControllerFv( struct Controller *const this)
{
auto e_BOOL _IsVisible = 0;


if ((GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibQExp)))) == 1U)
{ auto struct __T50731308 *__T51879704;
#line 6867
auto UWORD16 Val;
#line 6847
SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 62U)));

if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0);
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibQExpProcessing[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
}
_IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp)))))));
(__T51879704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51879704->f)))(((struct LabelValueString *)(((char *)((struct 
#line 6856
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51879704->d))))));
(__T51879704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51879704->f)))(((struct LabelValueString *)(((char *)((
#line 6857
struct LabelValueString *)(&this->LSTICalibQExp))) + ((__T51879704->d)))), 0));
SetValue1__16LabelValueStringFPUc(((struct LabelValueString *)(&this->LSTICalibQExp)), ((UBYTE *)"..."));

UpdateColNodeAlCalibVte__10ControllerFv(this);
(__T51879704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51879704->f)))(((struct LabelValueString *)(((char *)((
#line 6861
struct LabelValueString *)(&this->LSTICalibQExp))) + ((__T51879704->d)))), _IsVisible));
(__T51879704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51879704->f)))(((struct LabelValueString *)(((char *)((struct 
#line 6862
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51879704->d))))));


StartTimer__6VTimerFUlUii((&this->Timer), 100UL, 20U, 1);

Val = 1U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 7U, CONTROL);



MoveToCalibAuto__10ControllerFv(this);
}

else  {

ReturnToNodeToCalibNodeAlCalibVte__10ControllerFv(this);
} return;
}
#line 6942
void ReturnToNodeTOLoupeNodeAlCalibVte__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51889248;

RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));


SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0); }


(__T51889248 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51889248->f)))(((struct LabelValueString *)(((char *)((struct 
#line 6955
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51889248->d))))));


RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 1);
ForceRefresh__16LabelTabOneValueFv(((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl)))));

ReturnToNodeTOLoupe__10ControllerFv(this); return;
}
#line 6973
void ReturnToNodeToCalibNodeAlCalibVte__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51892792;


StopTimer__6VTimerFUi((&this->Timer), 20U);


MoveToNextModifNode__10ControllerFv(this);


if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0); }



(__T51892792 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 6988
__T51892792->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl)))) + ((__T51892792->d))))));

(__T51892792 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51892792->f)))(((struct LabelValueString *)(((char *)((struct 
#line 6990
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51892792->d))))));
RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 1);
ForceRefresh__16LabelTabOneValueFv(((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LOVVteMl))))); return;
}
#line 7004
void ModifyUpNodeAlCalibVte__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51898016;
auto e_BOOL _IsVisible; _IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp)))))));
(__T51898016 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51898016->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7007
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51898016->d))))));
(__T51898016 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51898016->f)))(((struct LabelValueString *)(((char *)((
#line 7008
struct LabelValueString *)(&this->LSTICalibQExp))) + ((__T51898016->d)))), 0));


ModifyUp__10ControllerFv(this);


UpdateColNodeAlCalibVte__10ControllerFv(this);
(__T51898016 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51898016->f)))(((struct LabelValueString *)(((char *)((
#line 7015
struct LabelValueString *)(&this->LSTICalibQExp))) + ((__T51898016->d)))), _IsVisible));
(__T51898016 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51898016->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7016
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51898016->d))))));


if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibQExpTab[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
} return;
}
#line 7035
void ModifyDownNodeAlCalibVte__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51905064;
auto e_BOOL _IsVisible; _IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp)))))));
(__T51905064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51905064->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7038
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51905064->d))))));
(__T51905064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51905064->f)))(((struct LabelValueString *)(((char *)((
#line 7039
struct LabelValueString *)(&this->LSTICalibQExp))) + ((__T51905064->d)))), 0));


ModifyDown__10ControllerFv(this);


UpdateColNodeAlCalibVte__10ControllerFv(this);
(__T51905064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51905064->f)))(((struct LabelValueString *)(((char *)((
#line 7046
struct LabelValueString *)(&this->LSTICalibQExp))) + ((__T51905064->d)))), _IsVisible));
(__T51905064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51905064->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7047
LabelValueString *)(&this->LSTICalibQExp))) + ((__T51905064->d))))));


if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibQExpTab[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
} return;
}
#line 7065
void UpdateColNodeAlCalibVte__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51911228;
auto UWORD16 _Size; auto UWORD16 _Width; auto UWORD16 _Col;

_Size = (GetStringPixelSize__5ToolsSFPUcUi((GetValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibQExp)))), (GetFontValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibQExp))))));
_Width = (GetPatientWidthOfTable__11FrameAlarmeFv((&this->FAlarme)));
_Col = (GetPatientColOfTable__11FrameAlarmeFv((&this->FAlarme)));
(__T51911228 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp))))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51911228->f)))(((struct DisplayObject *)(((char *)((struct 
#line 7072
DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibQExp)))))) + ((__T51911228->d)))), ((_Col + ((_Width - _Size) / 2U)) + 1U))); return;
}
#line 6890
void MoveToCalibAuto__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;
auto UWORD16 MaxPoints;

MaxPoints = (UpdateCalibrationPoints__10ControllerFv(this));


ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 7U, CONTROL);



switch (Val) {

case 10U:
case 11U:

if (((this->SegmentNumber)) < MaxPoints)
{

(this->SegmentNumber) = (((this->SegmentNumber)) + 1U);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&this->SegmentNumber), 7U, CONTROL);


}

else  {

Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 7U, CONTROL);


(this->SegmentNumber) = 1U;
ReturnToNodeToCalibNodeAlCalibVte__10ControllerFv(this);
}
break;

default:

break;} return;

}
#line 7102
void MoveToNextModifNodeAlFiO2Min__10ControllerFv( struct Controller *const this)
{
auto UWORD16 VentilOn;
auto UWORD16 CurrentMode;
auto UWORD16 _Line; auto UWORD16 _Spacing; auto UWORD16 _Order;
auto UWORD32 _PresentAndOrder;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&CurrentMode), 1U, CONFIG);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&VentilOn), 0U, CONTROL);

if (IsFio2Sensor__10ControllerFv(this))
{ auto struct __T50731308 *__T51923488;
#line 7140
auto struct Label *EditableObject1;
#line 7115
RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 0);
SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LSTICalibFiO2)), 0U);


_PresentAndOrder = (IsNodeInTree__10ControllerF12e_MODE_TYPESUiN22(this, ((e_MODE_TYPES)CurrentMode), 65U, 50U, 78U));
if (_PresentAndOrder) {
_Order = ((UWORD16)(_PresentAndOrder & 2147483647UL)); } else  {

_Order = 0U; }


_Line = (GetFirstLineOfTable__11FrameAlarmeFv((&this->FAlarme)));

_Spacing = (GetSpacingOfTable__11FrameAlarmeFv((&this->FAlarme)));


_Line += (_Spacing * (_Order - 1U));
(__T51923488 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51923488->f)))(((struct DisplayObject *)(((char *)((struct 
#line 7132
DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2)))))) + ((__T51923488->d)))), _Line));


UpdateColNodeAlCalibFiO2__10ControllerFv(this);

(__T51923488 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51923488->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7137
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51923488->d))))));


EditableObject1 = ((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))));
(__T51923488 = ((((*((struct MenuObject *)((struct DisplayObject *)EditableObject1))).__vptr)) + 36)) , (((void (*)(struct Label *const, struct Loupe *))((__T51923488->f)))(((struct Label *)(((char *)EditableObject1) + ((__T51923488->d)))), ((this->CurrentLoupe))));

if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0);
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibFiO2Tab[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
}


MoveToNextModifNode__10ControllerFv(this);


if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
SetValue__5LoupeFPUc(((this->CurrentLoupe)), (GetValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibFiO2))))); }
}

else  {


MoveToNextModifNode__10ControllerFv(this);

SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LSTICalibFiO2)), 0U);

MoveToNextModifNodeAlCalibFiO2__10ControllerFv(this);
} return;
}
#line 7177
void MoveToNextModifNodeAlCalibFiO2__10ControllerFv( struct Controller *const this)
{
auto e_BOOL _IsVisible = 0;


if ((GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibFiO2)))) == 1U)
{ auto struct __T50731308 *__T51931308;

SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, 69U)));


if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0);
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibFiO2Processing[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
}

_IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2)))))));
(__T51931308 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51931308->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7196
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51931308->d))))));
(__T51931308 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51931308->f)))(((struct LabelValueString *)(((char *)((
#line 7197
struct LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51931308->d)))), 0));
SetValue1__16LabelValueStringFPUc(((struct LabelValueString *)(&this->LSTICalibFiO2)), ((UBYTE *)"..."));

UpdateColNodeAlCalibFiO2__10ControllerFv(this);
(__T51931308 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51931308->f)))(((struct LabelValueString *)(((char *)((
#line 7201
struct LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51931308->d)))), _IsVisible));
(__T51931308 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51931308->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7202
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51931308->d))))));


(this->StartCalib) = 1;
MoveToCalibAutoFiO2__10ControllerFv(this);
}

else  {

ReturnToNodeToCalibNodeAlCalibFiO2__10ControllerFv(this);
} return;
}
#line 7292
void ReturnToNodeTOLoupeNodeAlCalibFiO2__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51944232;

RemoveElement__10BlinkTableFP13DisplayObject((&this->BTable), (GetObject__15MenuControlNodeFv(((this->CurrentNode)))));


SetCurrentNode__10ControllerFP15MenuControlNode(this, (GetNodeAt__10ControllerFUi(this, (GetIdNodeOnValid__9EventNodeCFv(((const struct EventNode *)(GetEventNode__15MenuControlNodeFv(((this->CurrentNode))))))))));


if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0); }


(__T51944232 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51944232->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7305
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51944232->d))))));


RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 1);
ForceRefresh__16LabelTabOneValueFv(((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2)))));

ReturnToNodeTOLoupe__10ControllerFv(this); return;
}
#line 7323
void ReturnToNodeToCalibNodeAlCalibFiO2__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51947776;


StopTimer__6VTimerFUi((&this->Timer), 21U);


MoveToNextModifNode__10ControllerFv(this);


if (((this->CurrentLoupe)) != ((struct Loupe *)0)) {
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 0); }



(__T51947776 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))))))).__vptr)) + 45)) , (((void (*)(struct LabelTabTwoValue *const))((
#line 7338
__T51947776->f)))(((struct LabelTabTwoValue *)(((char *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2)))) + ((__T51947776->d))))));

(__T51947776 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51947776->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7340
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51947776->d))))));
RefreshEnable__13DisplayObjectFi((GetObject__15MenuControlNodeFv(((this->CurrentNode)))), 1);
ForceRefresh__16LabelTabOneValueFv(((struct LabelTabOneValue *)((struct LabelTabTwoValue *)((struct LabelTabTwoValueDefault *)(&this->LTTVFiO2))))); return;
}
#line 7354
void ModifyUpNodeAlCalibFiO2__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51953000;
auto e_BOOL _IsVisible; _IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2)))))));
(__T51953000 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51953000->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7357
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51953000->d))))));
(__T51953000 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51953000->f)))(((struct LabelValueString *)(((char *)((
#line 7358
struct LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51953000->d)))), 0));


ModifyUp__10ControllerFv(this);


UpdateColNodeAlCalibFiO2__10ControllerFv(this);
(__T51953000 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51953000->f)))(((struct LabelValueString *)(((char *)((
#line 7365
struct LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51953000->d)))), _IsVisible));
(__T51953000 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51953000->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7366
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51953000->d))))));


if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibFiO2Tab[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
} return;
}
#line 7385
void ModifyDownNodeAlCalibFiO2__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51960008;
auto e_BOOL _IsVisible; _IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2)))))));
(__T51960008 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 17)) , (((void (*)(struct LabelValueString *const))((__T51960008->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7388
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51960008->d))))));
(__T51960008 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51960008->f)))(((struct LabelValueString *)(((char *)((
#line 7389
struct LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51960008->d)))), 0));


ModifyDown__10ControllerFv(this);


UpdateColNodeAlCalibFiO2__10ControllerFv(this);
(__T51960008 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 13)) , (((void (*)(struct LabelValueString *const, e_BOOL))((__T51960008->f)))(((struct LabelValueString *)(((char *)((
#line 7396
struct LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51960008->d)))), _IsVisible));
(__T51960008 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 16)) , (((void (*)(struct LabelValueString *const))((__T51960008->f)))(((struct LabelValueString *)(((char *)((struct 
#line 7397
LabelValueString *)(&this->LSTICalibFiO2))) + ((__T51960008->d))))));


if (((this->CurrentLoupe)) != ((struct Loupe *)0))
{
SetMessage__5LoupeFPUc(((this->CurrentLoupe)), ((UBYTE *)(cMSG_CalibFiO2Tab[(GetLanguage__10ControllerFv(this))])));
DisplayMessage__5LoupeFi(((this->CurrentLoupe)), 1);
} return;
}
#line 7083
void UpdateColNodeAlCalibFiO2__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51914620;
auto UWORD16 _Size; auto UWORD16 _Width; auto UWORD16 _Col;

_Size = (GetStringPixelSize__5ToolsSFPUcUi((GetValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibFiO2)))), (GetFontValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LSTICalibFiO2))))));
_Width = (GetPatientWidthOfTable__11FrameAlarmeFv((&this->FAlarme)));
_Col = (GetPatientColOfTable__11FrameAlarmeFv((&this->FAlarme)));
(__T51914620 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2))))))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T51914620->f)))(((struct DisplayObject *)(((char *)((struct 
#line 7090
DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LSTICalibFiO2)))))) + ((__T51914620->d)))), ((_Col + ((_Width - _Size) / 2U)) + 1U))); return;
}
#line 7224
void MoveToCalibAutoFiO2__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Val;

if (((this->StartCalib)) == 1)
{




auto UWORD16 Val;
#line 7231
(this->StartCalib) = 0;
(this->StartVerif) = 1;
StartTimer__6VTimerFUlUii((&this->Timer), 2000UL, 21U, 0);
Val = ((this->SegmentNumber));
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 80U, CONTROL);
}

else  {
if ((this->StartVerif))
{
(this->StartVerif) = 0;

Val = 9U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 80U, CONTROL);
}


ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 80U, CONTROL);

switch (Val) {

case 10U:
case 11U:

if (((this->SegmentNumber)) < 1U)
{

(this->SegmentNumber) = (((this->SegmentNumber)) + 1U);
(this->StartCalib) = 1;
StartTimer__6VTimerFUlUii((&this->Timer), 100UL, 21U, 0);
}

else  {

Val = 0U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Val), 80U, CONTROL);


(this->SegmentNumber) = 1U;
(this->StartCalib) = 1;
(this->StartVerif) = 0;
StopTimer__6VTimerFUi((&this->Timer), 21U);
ReturnToNodeToCalibNodeAlCalibFiO2__10ControllerFv(this);
}
break;
default:
StartTimer__6VTimerFUlUii((&this->Timer), 100UL, 21U, 0);
break;}

} return;
}
#line 7415
void MoveValidNodeModifConfPatientReset__10ControllerFv( struct Controller *const this)
{
auto UWORD16 _Value;
auto UWORD16 _Id;


ReturnToNode__10ControllerFv(this);

if ((GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LVSSResetPatientHrs)))) == 1U)
{ auto struct __T50731308 *__T51967644;

_Value = 2U;
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), 61U, CONTROL);



_Value = 0U;

WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), 19U, CONTROL);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), 20U, CONTROL);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), 47U, CONFIG);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), 48U, CONFIG);


(__T51967644 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelOneValue *)(&this->LOVPatientHrs))))))).__vptr)) + 15)) , (((void (*)(struct LabelTwoValue *const))((__T51967644->f)))(((struct LabelTwoValue *)(((char *)(&this->LOVPatientHrs)
#line 7439
) + ((__T51967644->d))))));


for (_Id = 0U; (_Id < 43U); _Id++)
{
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&_Value), _Id, TREND);
}


SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LVSSResetPatientHrs)), 0U);
(__T51967644 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LVSSResetPatientHrs))))))).__vptr)) + 15)) , (((void (*)(struct LabelValueString *const))((__T51967644->f)))(((struct LabelValueString *)(((char *)((
#line 7449
struct LabelValueString *)(&this->LVSSResetPatientHrs))) + ((__T51967644->d))))));

EraseNANDFlashMngt__13InterfaceCppCSFv();

FlashWriteEvent__13InterfaceCppCSFUi(6U);
} return;
}
#line 7469
void MoveUpNodeConfPatientReset__10ControllerFv( struct Controller *const this)
{

MoveUp__10ControllerFv(this);

SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LVSSResetPatientHrs)), 0U); return;
}
#line 7489
void MoveDownNodeConfPatientReset__10ControllerFv( struct Controller *const this)
{

MoveDown__10ControllerFv(this);

SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LVSSResetPatientHrs)), 0U); return;
}
#line 6750
void MoveToNextModifNodeUsbTransferSetOn__10ControllerFv( struct Controller *const this)
{

MoveToNextModifNode__10ControllerFv(this); return;
}
#line 7527
void DisplayBreathTiming__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51983012;

auto UBYTE MessageString[60];
auto UWORD16 Value;
auto UWORD16 DisplayMode;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&DisplayMode), 76U, CONFIG);

if (DisplayMode == 0U)
{ auto struct __T50731308 *__T51980160;


auto UWORD16 IValue;
auto UWORD16 DValue;
#line 7538
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 65U, COMPUTE);

IValue = (Value / 10U);
DValue = (Value - (IValue * 10U));

sprintf(((char *)((UBYTE *)MessageString)), ((const char *)"%s = %2d.%01d %s"), ((__T51980160 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)(&this->LOVIT)))))).__vptr)) + 30)) , (((UBYTE *(*)(struct Label *const))((__T51980160->f)))(((struct Label *
#line 7543
)(((char *)((struct Label *)((struct EditableObject *)(&this->LOVIT)))) + ((__T51980160->d))))))), IValue, DValue, (GetNameUnit__13LabelOneValueFv((&this->LOVIT))));
#line 7549
}

else  { auto struct __T50731308 *__T51982120;

auto UWORD16 NumValue;
auto UWORD16 DenValue;




auto UWORD16 IDenValue;
auto UWORD16 FDenValue;
#line 7556
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&NumValue), 62U, COMPUTE);
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&DenValue), 63U, COMPUTE);

IDenValue = (DenValue / 10U);
FDenValue = (DenValue - (IDenValue * 10U));

if ((IDenValue >= 100U) || ((IDenValue <= 1U) && (FDenValue == 0U)))

{ auto struct __T50731308 *__T51981116;
sprintf(((char *)((UBYTE *)MessageString)), ((const char *)"%s = %d:%d"), ((__T51981116 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LIE)))).__vptr)) + 30)) , (((UBYTE *(*)(struct Label *const))((__T51981116->f)))(((struct Label *)(((char *)(&this->LIE)) + ((__T51981116->d))))))), (NumValue 
#line 7565
/ 10U), IDenValue);




}

else  {
sprintf(((char *)((UBYTE *)MessageString)), ((const char *)"%s = %d:%d.%01d"), ((__T51982120 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->LIE)))).__vptr)) + 30)) , (((UBYTE *(*)(struct Label *const))((__T51982120->f)))(((struct Label *)(((char *)(&this->LIE)) + ((__T51982120->d)))))
#line 7573
)), (NumValue / 10U), IDenValue, FDenValue);
#line 7579
}
}

SetMessage__13MessageDialogFPUc8e_SYMBOL((&this->TopMessage), ((UBYTE *)MessageString), NO);
(__T51983012 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->TopMessage)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T51983012->f)))(((struct MessageDialog *)(((char *)(&this->TopMessage)) + ((__T51983012->d)))))); return;
}
#line 7594
void ModifyUpNodeInspTime__10ControllerFv( struct Controller *const this)
{
ModifyUp__10ControllerFv(this);
DisplayBreathTiming__10ControllerFv(this); return;
}
#line 7608
void ModifyDownNodeInspTime__10ControllerFv( struct Controller *const this)
{
ModifyDown__10ControllerFv(this);
DisplayBreathTiming__10ControllerFv(this); return;
}
#line 7622
void MoveToModifNodeLoupeNodeInspTime__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Value;



ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 9U, ADJUST);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 57U, COMPUTE);

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 5U, ADJUST);
WriteValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 67U, COMPUTE);

DB_ComputeBreathTimingRatios();


MoveToModifNodeLoupe__10ControllerFv(this);
DisplayBreathTiming__10ControllerFv(this); return;
}
#line 7649
void ModifyUpNodePlusPeep__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51988144;
auto UBYTE MessageString[150];

ModifyUp__10ControllerFv(this);

BuildPressureMessage__10ControllerFP15MenuControlNodeT1PUc(this, ((this->CurrentNode)), (GetNodeAt__10ControllerFUi(this, 14U)), ((UBYTE *)MessageString));

SetMessage__13MessageDialogFPUc8e_SYMBOL((&this->TopMessage), ((UBYTE *)MessageString), NO);
(__T51988144 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->TopMessage)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T51988144->f)))(((struct MessageDialog *)(((char *)(&this->TopMessage)) + ((__T51988144->d)))))); return;
}
#line 7690
void ModifyDownPeepNodePlusPeep__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51993040;
auto UBYTE MessageString[150];
auto struct MenuControlNode *pressure_node;

ModifyDown__10ControllerFv(this);

pressure_node = (GetPressureNode__10ControllerFv(this));

BuildPressureMessage__10ControllerFP15MenuControlNodeT1PUc(this, pressure_node, ((this->CurrentNode)), ((UBYTE *)MessageString));

SetMessage__13MessageDialogFPUc8e_SYMBOL((&this->TopMessage), ((UBYTE *)MessageString), NO);
(__T51993040 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->TopMessage)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T51993040->f)))(((struct MessageDialog *)(((char *)(&this->TopMessage)) + ((__T51993040->d)))))); return;
}
#line 7714
void ModifyUpPeepNodePlusPeep__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51995568;
auto UBYTE MessageString[150];
auto struct MenuControlNode *pressure_node;

ModifyUp__10ControllerFv(this);

pressure_node = (GetPressureNode__10ControllerFv(this));

BuildPressureMessage__10ControllerFP15MenuControlNodeT1PUc(this, pressure_node, ((this->CurrentNode)), ((UBYTE *)MessageString));

SetMessage__13MessageDialogFPUc8e_SYMBOL((&this->TopMessage), ((UBYTE *)MessageString), NO);
(__T51995568 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->TopMessage)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T51995568->f)))(((struct MessageDialog *)(((char *)(&this->TopMessage)) + ((__T51995568->d)))))); return;
}
#line 7669
void ModifyDownNodePlusPeep__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T51990512;
auto UBYTE MessageString[150];

ModifyDown__10ControllerFv(this);

BuildPressureMessage__10ControllerFP15MenuControlNodeT1PUc(this, ((this->CurrentNode)), (GetNodeAt__10ControllerFUi(this, 14U)), ((UBYTE *)MessageString));

SetMessage__13MessageDialogFPUc8e_SYMBOL((&this->TopMessage), ((UBYTE *)MessageString), NO);
(__T51990512 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->TopMessage)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T51990512->f)))(((struct MessageDialog *)(((char *)(&this->TopMessage)) + ((__T51990512->d)))))); return;
}
#line 7830
void Stop100FiO2__10ControllerFv( struct Controller *const this)
{
this; return;
#line 7844
}
#line 5597
void MoveToModifNodeFiO2Concent__10ControllerFv( struct Controller *const this)
{
if (IsFio2Sensor__10ControllerFv(this)) {
MoveToModifNode__10ControllerFv(this); } return;
}
#line 5612
void MoveToModifNodeConsultCalibFiO2Concent__10ControllerFv( struct Controller *const this)
{
if (IsFio2Sensor__10ControllerFv(this)) {
MoveToModifNodeConsultCalib__10ControllerFv(this); } return;
}
#line 7886
void ReturnToNodePediatric__10ControllerFv( struct Controller *const this)
{

UpdateCalibrationPoints__10ControllerFv(this);


StartTimer__6VTimerFUlUii((&this->Timer), 14000UL, 5U, 0);

ReturnToNode__10ControllerFv(this); return;
}
#line 7910
void MoveUpNodeConfRestoreDefaultSetting__10ControllerFv( struct Controller *const this)
{

MoveUp__10ControllerFv(this); return;
}
#line 7928
void MoveDownNodeConfRestoreDefaultSetting__10ControllerFv( struct Controller *const this)
{

MoveDown__10ControllerFv(this); return;
}
#line 7945
void MoveValidNodeModifConfRestoreDefaultSetting__10ControllerFv( struct Controller *const this)
{
auto UWORD16 Id = 0U;



if ((GetIntValue1__16LabelValueStringFv(((struct LabelValueString *)(&this->LVSSRestoreDefaultSettings)))) == 1U)
{ auto struct __T50731308 *__T52031228;

It_watchdog();


for (Id = 0U; (Id < 56U); Id++)
{

do
{
DB_WriteDataInEepAndRam(((UWORD16 xhuge *)(EEP_DB_VOL_Adjust + Id)), (((cDB_VOL_TEST_ADJUST_DB[Id]).defvalue)));


It_watchdog();

EEP_FIFO_PushOneData(((UWORD16 xhuge *)(EEP_DB_VOL_Adjust + Id)), READ_EEP);


It_watchdog();
} while ((EEP_DB_VOL_Adjust[Id]) != (((cDB_VOL_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();


do
{
DB_WriteDataInEepAndRam(((UWORD16 xhuge *)(EEP_DB_PSV_Adjust + Id)), (((cDB_PSV_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();

EEP_FIFO_PushOneData(((UWORD16 xhuge *)(EEP_DB_PSV_Adjust + Id)), READ_EEP);


It_watchdog();
} while ((EEP_DB_PSV_Adjust[Id]) != (((cDB_PSV_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();


do
{
DB_WriteDataInEepAndRam(((UWORD16 xhuge *)(EEP_DB_CPAP_Adjust + Id)), (((cDB_CPAP_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();

EEP_FIFO_PushOneData(((UWORD16 xhuge *)(EEP_DB_CPAP_Adjust + Id)), READ_EEP);



It_watchdog();
} while ((EEP_DB_CPAP_Adjust[Id]) != (((cDB_CPAP_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();


do
{
DB_WriteDataInEepAndRam(((UWORD16 xhuge *)(EEP_DB_VSIMV_Adjust + Id)), (((cDB_VSIMV_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();

EEP_FIFO_PushOneData(((UWORD16 xhuge *)(EEP_DB_VSIMV_Adjust + Id)), READ_EEP);



It_watchdog();
} while ((EEP_DB_VSIMV_Adjust[Id]) != (((cDB_VSIMV_TEST_ADJUST_DB[Id]).defvalue)));




It_watchdog();


do
{
DB_WriteDataInEepAndRam(((UWORD16 xhuge *)(EEP_DB_PRES_Adjust + Id)), (((cDB_PRES_TEST_ADJUST_DB[Id]).defvalue)));


It_watchdog();

EEP_FIFO_PushOneData(((UWORD16 xhuge *)(EEP_DB_PRES_Adjust + Id)), READ_EEP);



It_watchdog();
} while ((EEP_DB_PRES_Adjust[Id]) != (((cDB_PRES_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();


do
{
DB_WriteDataInEepAndRam(((UWORD16 xhuge *)(EEP_DB_PSIMV_Adjust + Id)), (((cDB_PSIMV_TEST_ADJUST_DB[Id]).defvalue)));



It_watchdog();

EEP_FIFO_PushOneData(((UWORD16 xhuge *)(EEP_DB_PSIMV_Adjust + Id)), READ_EEP);



It_watchdog();
} while ((EEP_DB_PSIMV_Adjust[Id]) != (((cDB_PSIMV_TEST_ADJUST_DB[Id]).defvalue)));


}


It_watchdog();


for (Id = 0U; (Id < 104U); Id++)
{

if (((Id < 4U) || ((Id > 43U) && (Id < 49U))) || (Id > 50U))




{

if (((((((Id != 67U) && (Id)) && (Id != 62U)) && (Id != 63U)) && (Id != 64U)) && (Id != 65U)) && (Id != 66U))
#line 8096
{
do
{
DB_WriteDataInEepAndRam(((UWORD16 xhuge *)(EEP_DB_Config + Id)), (((cDB_TEST_CONFIG_DB[Id]).defvalue)));



It_watchdog();

EEP_FIFO_PushOneData(((UWORD16 xhuge *)(EEP_DB_Config + Id)), READ_EEP);



It_watchdog();
} while ((EEP_DB_Config[Id]) != (((cDB_TEST_CONFIG_DB[Id]).defvalue)));

}

}

It_watchdog();
}


It_watchdog();


SetIntValue1__16LabelValueStringFUi(((struct LabelValueString *)(&this->LVSSRestoreDefaultSettings)), 0U);
(__T52031228 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct Label *)((struct EditableObject *)((struct LabelValueString *)(&this->LVSSRestoreDefaultSettings))))))).__vptr)) + 15)) , (((void (*)(struct LabelValueString *const))((__T52031228->f)))(((struct LabelValueString *)(((char *)
#line 8124
((struct LabelValueString *)(&this->LVSSRestoreDefaultSettings))) + ((__T52031228->d))))));


ShowMenu__10ControllerFUi(this, 105U);
ShowFrame__10ControllerFUi(this, 10U);
}


It_watchdog();

ReturnToNode__10ControllerFv(this); return;
}
#line 8149
void DisplayIsensHelperText__10ControllerFv( struct Controller *const this)
{ auto struct __T50731308 *__T52034948;
auto UWORD16 IsInspSensOFF;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&IsInspSensOFF), 11U, ADJUST);

SetMessage__13MessageDialogFPUc8e_SYMBOL((&this->BottomMessage), ((UBYTE *)(cMSG_IsensHelperTxt[(GetLanguage__10ControllerFv(this))])), NO);


if (IsInspSensOFF == 0U)
{ auto struct __T50731308 *__T52033944;
(__T52033944 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BottomMessage)))).__vptr)) + 16)) , (((void (*)(struct MessageDialog *const))((__T52033944->f)))(((struct MessageDialog *)(((char *)(&this->BottomMessage)) + ((__T52033944->d))))));
}

else  {
(__T52034948 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BottomMessage)))).__vptr)) + 17)) , (((void (*)(struct MessageDialog *const))((__T52034948->f)))(((struct MessageDialog *)(((char *)(&this->BottomMessage)) + ((__T52034948->d))))));
} return;
}
#line 8181
void ModifyUpNodeIsens__10ControllerFv( struct Controller *const this)
{
ModifyUp__10ControllerFv(this);
DisplayIsensHelperText__10ControllerFv(this); return;
}
#line 8198
void ModifyDownNodeIsens__10ControllerFv( struct Controller *const this)
{
ModifyDown__10ControllerFv(this);
DisplayIsensHelperText__10ControllerFv(this); return;
}
#line 8218
void MoveToModifNodeLoupeNodeIsens__10ControllerFv( struct Controller *const this)
{

MoveToModifNodeLoupe__10ControllerFv(this);
DisplayIsensHelperText__10ControllerFv(this); return;
}
