// v_2.45.2, Mon Mar 30 17:40:36 2020
#line 1 "..\\..\\SRC\\HMI\\HMI_FrameGraph.cpp"
struct __T50280064;
#line 37 "..\\..\\SRC\\GENERAL\\enum.h"
enum e_SYMBOL {
LOGO_LEGENDAIR,
KEY_WHITE,
BAT,
BLACK_SQUARES,
FREE_SQUARE,
KEY,
LOS,
BLACK_LOS,
LESS_OR_MORE,
RAMPE1,
RAMPE2,
RISETIME1,
RISETIME2,
RISETIME3,
RISETIME4,
TRIGGER,
TRIGGERINV,
VENTIL,
LOCKS,
PAUSE,
VALVE_BLACK,
VALVE_WHITE,
CADRE_WHITE_BG,
CADRE_WHITE_HD,
CADRE_BLACK_BG,
CADRE_BLACK_HD,
TRIANGLE_BLACK,
TRIANGLE_WHITE,
FLECHE_GRAPH_HAUT,
FLECHE_GRAPH_DROITE,
CADRE_WHITE_HG,
CADRE_WHITE_BD,
CADRE_BLACK_HG,
CADRE_BLACK_BD,
BAT_INV,
CADRE_BLACK_BGw,
CADRE_BLACK_BDw,
CADRE_BLACK_HGw,
CADRE_BLACK_HDw,
CADRE_WHITE_HGw,
CADRE_WHITE_HDw,
CADRE_WHITE_BDw,
CADRE_WHITE_BGw,
BELL_BLACK,
ALARM_TRIANGLE_BLACK,
EQUAL,
HEART,
CADRE_WHITE_ALARM_HGw,
CADRE_WHITE_ALARM_HDw,
CADRE_WHITE_ALARM_BDw,
CADRE_WHITE_ALARM_BGw,
HEART_INVERSE_VIDEO,
ALARM_TRIANGLE_BLACK_DOT,
RAMPE3,
LOGO_M2,
LOGO_XL2,
LOGO_S2,
LOGO_XL2_US,


CHART_VERSION,
TRADEMARK,
COMPANY,
WHITE_SQUARE,
WHITE_LOCK,
NO};
#line 112
enum e_HMI_LANG {
HMI_LANG_CHINESE,
HMI_LANG_DANISH,
HMI_LANG_GERMAN,
HMI_LANG_ENGLISH,
HMI_LANG_ENGLISH_US,
HMI_LANG_SPANISH,
HMI_LANG_FRENCH,
HMI_LANG_GREEK,
HMI_LANG_ITALIAN,
HMI_LANG_JAPANESE,
HMI_LANG_KOREAN,
HMI_LANG_DUTCH,
HMI_LANG_NORWISH,
HMI_LANG_POLISH,
HMI_LANG_PORTUGUESE,
HMI_LANG_RUSSIAN,
HMI_LANG_FINNISH,
HMI_LANG_SWEDISH,
HMI_LANG_TURKISH};
#line 137
enum e_TI {
TIMIN,
TIMAX,
end_of_e_TI};



enum e_ActiveModeState {
ACTIVATED,

EXHALATION,
INSPIRATION,

PSV_EXHALATION,
PSV_INSPIRATION,
CC_EXHALATION,
CC_INSPIRATION,

SIMV_VSIMV_EXHALATION,
SIMV_CAV_INSPIRATION,
SIMV_PSV_INSPIRATION,
SIMV_CV_EXHALATION,
SIMV_CV_INSPIRATION,
SIMV_VSIMV_EXHALATION_APNEA,
SIMV_CV_INSPIRATION_APNEA,

SIMV_PSIMV_EXHALATION,
SIMV_CAP_INSPIRATION,
SIMV_CP_EXHALATION,
SIMV_CP_INSPIRATION,
SIMV_PSIMV_EXHALATION_APNEA,
SIMV_CP_INSPIRATION_APNEA,

CPAP_EXHALATION,
CPAP_INSPIRATION};




enum e_DB_ALARM_LEVEL_PRIORITY {



TEC,



WP,



VLP,



LP,



MPR,



HP,



VHP,



UA,



IA};




enum e_ALARM_ERROR {
NO_ERR_AL,
ERR_AL_DISCONNECTION,
ERR_AL_HIGH_PRESSURE,
ERR_AL_APNEA,
ERR_AL_HIGH_VTI,
ERR_AL_LOW_VTI,
ERR_AL_LOW_VTE,
ERR_AL_HIGH_VTE,
ERR_AL_HIGH_VM,
ERR_AL_LOW_VM,
ERR_AL_LOW_RATE,
ERR_AL_HIGH_RATE,
ERR_AL_POWER_SUPPLY_LOSS,
ERR_AL_AC_POWER_FAIL,
ERR_AL_DC_POWER_FAIL,
ERR_AL_CHECK_SUPPLY,
ERR_AL_PERIODICAL_SIGNAL,
ERR_AL_LOW_BATTERY,
ERR_AL_END_OF_BATTERY,
ERR_AL_CHECK_BATTERY,
ERR_AL_NO_BATTERY,
ERR_AL_CHECK_BUZZER,
ERR_AL_BUZZER_BATTERY_LOW,
ERR_AL_BUZZER_BATTERY_FAILURE,
ERR_AL_BUZZER_BATTERY_CHARGE_FAILURE,
ERR_AL_TECHNICAL_PROBLEM,
ERR_AL_EEPROM_OUT_OF_RANGE,
ERR_AL_EEPROM_LOOSING_PARAM,
ERR_AL_NEW_VERSION,
ERR_AL_ERROR_VERSION,
ERR_AL_REVERSED_IE,
ERR_AL_CHECK_PRESSURE,
ERR_AL_CHECK_PROXIMAL,
ERR_AL_PROXI_DISCONNECTION,
ERR_AL_NO_PROXIMAL,
ERR_AL_NO_VALVE_DETECTION,
ERR_AL_CHECK_VALVE,
ERR_AL_CHECK_VOLUME,
ERR_AL_VALVE_LEAKAGE,
ERR_AL_CHECK_REMOTE_ALARM,
ERR_AL_UNKNOW_BATTERY,
ERR_AL_CHECK_BATTERY_CHARGE,
ERR_AL_COOLING_FAN,
ERR_AL_AMBIENT_TEMP,
ERR_AL_BAT_TEMP,
ERR_AL_FAILURE_24V,
ERR_AL_SUPPLY_MEASURE,
ERR_AL_TURBINE_OVERHEAT,
ERR_AL_OCCLUSION,
ERR_AL_CPU_REFERENCE,
ERR_AL_CONTROLLED_CYCLES,
ERR_AL_CHECK_VALVE_PRESSURE,
ERR_AL_CHECK_PIPE,
ERR_AL_LEAKAGE,
ERR_AL_CHECK_FIO2,
ERR_AL_LOW_FIO2,
ERR_AL_HIGH_FIO2,
ERR_AL_NO_FIO2_SENSOR,
ERR_AL_CHECK_O2_SUPPLY,
ERR_AL_MISSING_O2_SUPPLY,
ERR_AL_CHECK_O2,
ERR_AL_O2_LEAKAGE,
ERR_AL_BREATH_TIME_CYCLED,
ERR_AL_INSP_FLOW_FAILURE,
ERR_AL_LEAK_OCCLUSION,
ERR_AL_VOLUNTARY_STOP,
ERR_AL_NEEDED_FIO2_CALIB,
end_of_error_alarm_table};




enum e_DB_ALARMS_STATE {
ALARM_FALSE,
ALARM_DETECTED,
ALARM_TRUE,
ALARM_DISPLAYED,
ALARM_CANCELED,
end_of_alarms_state_table};




enum e_DB_ALARMS_INDICATION_STATE {
ALARM_FALSE_STATE,
ALARM_DETECTED_STATE,
ALARM_INHIBITED_STATE,
end_of_alarms_indication_state_table};
#line 311
enum e_DB_VERSION {
VERSION_NUMBER_0,
VERSION_NUMBER_1,
VERSION_NUMBER_2,
VERSION_NUMBER_3,
SERIAL_NUMBER_1,
SERIAL_NUMBER_2,
SERIAL_NUMBER_3,
SERIAL_NUMBER_4,
SERIAL_NUMBER_5,
SERIAL_NUMBER_6,
end_of_db_version_table};




enum e_DB_Trend {
DB_TREND_VENTIL_HOUR,
DB_TREND_VENTIL_MIN,
DB_TREND_AVG_VTI,
DB_TREND_AVG_VTE,
DB_TREND_AVG_VM,
DB_TREND_AVG_FR,
DB_TREND_LEAK_MODE,
DB_TREND_AVG_LEAK,
DB_TREND_AVG_PI,
DB_TREND_IA,
DB_TREND_APNEA,
DB_TREND_PERCENT_CONTROLLED,
DB_TREND_PERCENT_TRIGGERED,
DB_TREND_SAVE_RTC_DAY,
DB_TREND_SAVE_RTC_MONTH,
DB_TREND_SAVE_RTC_YEAR,
DB_TREND_SAVE_PC_HOUR,
DB_TREND_SAVE_PC_MIN,
DB_TREND_NB_APNEA,
DB_TREND_APNEA_TIME,
DB_TREND_NB_CYCLE_COUNTER_MSB,
DB_TREND_NB_CYCLE_COUNTER_LSB,
DB_TREND_NB_CYCLE_TRIGERRED_MSB,
DB_TREND_NB_CYCLE_TRIGERRED_LSB,
DB_TREND_NB_CYCLE_CONTROLLED_MSB,
DB_TREND_NB_CYCLE_CONTROLLED_LSB,
DB_TREND_VENTIL_REPORT_UPD,
DB_TREND_IHM_VENTIL_HOUR,
DB_TREND_IHM_VENTIL_MIN,
DB_TREND_IHM_AVG_VTI,
DB_TREND_IHM_AVG_VTE,
DB_TREND_IHM_AVG_VM,
DB_TREND_IHM_AVG_FR,
DB_TREND_IHM_LEAK_MODE,
DB_TREND_IHM_AVG_LEAK,
DB_TREND_IHM_AVG_PI,
DB_TREND_IHM_IA,
DB_TREND_IHM_APNEA,
DB_TREND_IHM_PERCENT_CONTROLLED,
DB_TREND_IHM_PERCENT_TRIGGERED,
DB_TREND_IHM_SAVE_RTC_DAY,
DB_TREND_IHM_SAVE_RTC_MONTH,
DB_TREND_IHM_SAVE_RTC_YEAR,
end_of_db_trend_table};




enum e_TYPE_OF_DB_TARGET {
ADJUST,
CONTROL,
COMPUTE,
VERSION,
CONFIG,
RTC,
ALARMS,
POWER_SUPPLY,
KEYBOARD,
USB,
TREND,
CURRENT,
REVISION,
end_of_type_of_db_target};




enum e_DATA_OPERATION {
READ,
WRITE,
DECREASE,
INCREASE,
MIN,
MAX,
STEP,
READ_INFO,
WRITE_INFO};




enum e_MODE_TYPES {
VOL,
PRES,
PSVT,
VSIMV,
PSIMV,
CPAP,
nb_of_mode};



enum e_TRIGGER_LEVELS {
TRIGGER_LEVEL_OFF,
TRIGGER_LEVEL_0P,
TRIGGER_LEVEL_1P,
TRIGGER_LEVEL_2,
TRIGGER_LEVEL_3,
TRIGGER_LEVEL_4,
TRIGGER_LEVEL_5,
nb_of_trigger_levels};



enum e_TEST_STATES {
TEST_STATE_NOT_RUN,
TEST_STATE_RUNNING,
TEST_STATE_ABORTED,
TEST_STATE_PASS,
TEST_STATE_FAIL,
nb_of_test_states};




enum e_VEN_SIMVCycle {
CAV_Cycle,
CV_Cycle,
PSV_Cycle,
CAP_Cycle,
CP_Cycle};




enum e_SupplyInfo {
NONE,
AC,
DC,
BATTERY};




enum e_RTC_OPERATION {
NO_REQUEST,
ADJUST_DATE,
ADJUST_HOUR};




enum e_BadEraseState {
ERASE_OK,
BAD_TOTAL_ERASE};




enum e_RampType {
RAMP_DECELERATED,
RAMP_RECTANGLE,
RAMP_SINUS,
nb_of_ramps};
#line 487
enum e_VEN_ControllerType {
NO_CONTROL,
CONTROL_SPEED,
CONTROL_PRESSURE,
CONTROL_PRESSURE_VALVE,
CONTROL_PRESSURE_MAINT,
CONTROL_FLOW,
CONTROL_FLOW_EXH,
CONTROL_FLOW_O2,
CONTROL_FLOW_O2_MANUEL,
CONTROL_PRESSURE_O2};



enum e_VEN_Controller_Phase {
VEN_EXH_PLAT,
VEN_INSP_RISE,
VEN_INSP_PLAT,
VEN_EXH_FALL};




enum e_CalibrationCommand {
NO_CALIB,
SEGMENT_1,
SEGMENT_2,
SEGMENT_3,
SEGMENT_4,
SEGMENT_5,
SEGMENT_6,
SEGMENT_7,
SEGMENT_8,
TEST_LIMITES_REQUEST,
TEST_LIMITES_OK,
TEST_LIMITES_FALSE,
AUTOCALIB_SEG_1,
AUTOCALIB_SEG_2,
AUTOCALIB_SEG_3,
AUTOCALIB_SEG_4,
AUTOCALIB_SEG_5,
AUTOCALIB_SEG_6,
AUTOCALIB_SEG_7,
AUTOCALIB_SEG_8,
END_AUTOCALIB};




enum e_CalibrationType {
SYS_PATIENT_PRESS_CALIB,
SYS_VALVE_PRESS_CALIB,
SYS_INSP_FLOW_CALIB,
SYS_EXH_FLOW_CALIB,
SYS_EXH_FLOW_VERIF,
SYS_FIO2_CALIB,
SYS_O2_FLOW_CALIB,
SYS_O2_PRESSURE_CALIB,
end_of_sys_calib};
#line 552
enum e_VentilState {
VEN_EXHALATION = 251,
VEN_INSPIRATION_CONTROLED,
VEN_INSPIRATION_TRIGGERED,
VEN_VENTIL_DISABLE};



enum e_InspDetectType {
CONTROLLED,
TRIGGERED,
NO_INSP};




enum e_SYS_KeyboardInput {
KEY_NO_KEYBOARD,
KEY_CODE_MONIT_AND_DOWN,
KEY_CODE_MONIT_AND_UP,
KEY_CODE_UP_AND_DOWN,
Mark_Begin_Simple_Touch,
KEY_CODE_UP,
KEY_CODE_DOWN,
KEY_CODE_VALID,
KEY_CODE_MONIT,
KEY_CODE_STARTSTOPVENTIL,
KEY_CODE_100_O2,
KEY_CODE_NAVIG,
Number_of_key};
#line 587
enum e_TIM_TABLE_ID {
KEY_LONGPUSH_KEY_NO_KEYBOARD,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_MONIT_AND_UP,
KEY_LONGPUSH_KEY_CODE_UP_AND_DOWN,
KEY_LONGPUSH_KEY_CODE_UP,
KEY_LONGPUSH_KEY_CODE_DOWN,
KEY_LONGPUSH_KEY_CODE_VALID,
KEY_LONGPUSH_KEY_CODE_MONIT,
KEY_LONGPUSH_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_longpush_decnt,
KEY_AUTOREPEAT_KEY_NO_KEYBOARD,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_MONIT_AND_UP,
KEY_AUTOREPEAT_KEY_CODE_UP_AND_DOWN,
KEY_AUTOREPEAT_KEY_CODE_UP,
KEY_AUTOREPEAT_KEY_CODE_DOWN,
KEY_AUTOREPEAT_KEY_CODE_VALID,
KEY_AUTOREPEAT_KEY_CODE_MONIT,
KEY_AUTOREPEAT_KEY_CODE_STARTSTOPVENTIL,
end_of_keyboard_autorepeat_decnt,
KEY_ANO_KEYB,
KEY_DELAY_BETWEEN_LONG_AUTOREPEAT,
KEY_DOUBLE_PULSE_TIME_OUT,
KEY_CONFIRM_VENT_STOP_TIMER,
VEN_TI_COUNT,
VEN_TE_COUNT,
VEN_SIMV_PERIOD_COUNT,
VEN_CONTROLLED_CYCLE_PERIOD_COUNT,
VEN_TIME_CALIB_FIO2,
VEN_VALVE_TIM,
VEN_VENTILATION_BIP,
VEN_END_COUNT0,
VEN_END_COUNT1,
VEN_END_COUNT2,
VEN_END_COUNT3,
VEN_END_COUNT4,
VEN_END_COUNT5,
SYS_TIME_OUT_SPEED,
SYS_1MINPAT,
SYS_TIME_OUT_CALIB,
SYS_TIME_AUTO_CALIB,
SYS_TIME_FAS_VALVE_CALIB,
SYS_TIME_SUPPLY_CHANGE,
SYS_TIME_DETECT_FIO2,
SYS_TIME_BACKLIGHT,
SYS_PRESSURE_CHOICE,
SYS_PRESSURE_CHOICE_INT,
SYS_PROXIMAL_TO_INTERNAL_SWITCH,
SYS_CHECK_PRESSURE,
SYS_CHECK_PROXIMAL,
SYS_VALVE_TIM,
SEC_PRESSURE_CHOICE,
SEC_LOW_PRESS,
SEC_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_DETECT,
SEC_CPAP_HIGH_PRESSURE,
SEC_HIGH_PRESSURE_ALARM,
SEC_FLAG_HIGH_PRESSURE,
SEC_APNEA,
SEC_CHECK_PRESSURE,
SEC_CHECK_PROXIMAL,
SEC_NO_BATTERY_TIM,
SEC_CHECK_FIO2_TIM,
SEC_KEYBOARD_TIM,
SEC_SPEED_BLOW_TIM,
SEC_START_BIP_SOUND,
SEC_STOP_BIP_SOUND,
SEC_LOW_FIO2_TIM,
SEC_CPU_REFERENCE_FAILURE_TIM,
SEC_FLOW,
SEC_TIME_WAIT_STARTING,
SEC_HIGH_FIO2_TIM,
SEC_BAT_LOW_LEVEL,
SEC_HIGH_SPO2_TIM,
SEC_LOW_SPO2_TIM,
SEC_BAT_VERY_LOW_LEVEL,
SEC_BUZ_READ,
SEC_BATTERY_FAILURE_CO_BUZ,
SEC_DETECTION_BATTERY_FAILURE_CO_BUZ,
SEC_FAIL_AC_TIM,
SEC_FAIL_DC_TIM,
SEC_VALVE_CST,
SEC_PROXI_CST,
SEC_INT_CST,
SEC_CHECK_VALVE,
SEC_VALVE_PRESS,
SEC_INHIB_CHECK_FIO2,
SEC_INHIB_LOW_FIO2,
SEC_INHIB_HIGH_FIO2,
SEC_INHIB_CHECK_REMOTE,
SEC_CANCEL_HIGH_PRESSURE,
SEC_CHECK_SUPPLY,
SEC_PPC_APNEA,
SEC_PROX_DISC,
SEC_RAZ_CHECK_BAT,
SEC_CHECK_PRESS,
SEC_CHECK_PRESS2,
SEC_CHECK_PROXI,
SEC_CHECK_REMOTE,
SEC_BAT_P_S_TIM,
SEC_INHIB_BUZZER,
SEC_LOW_PRIORITY_BURST,
SEC_MEDIUM_PRIORITY_BURST,
SEC_HIGH_PRIORITY_BURST,
SEC_BUZZER_PULSE,
SEC_BUZZER_SILENCE,
SEC_BUZZER_SOUND_MAX,
SET_VALIDATION_BIP,
SEC_NO_PROXIMAL,
SET_HISTO_BIP,
SEC_BLOWER_OVERHEAT,
ACT_MIN_FLOW,
ACT_STOP_ADAPTATION,
WAIT_USB_BUSY,
USB_CONNECT_DISCONNECT_KEY,
USB_WAIT_READ_FIFO,
SPI_FRAME_TIME,
SPI_WAIT_DISPLAY_BATTERY_GAUGE,
TIM_COM_RECORDING_MONIT,
TIM_USB_RECORDING_MONIT,
SEC_CHECK_VALVE_PRESSURE,
SEC_LEAKAGE,
SEC_CHECK_O2_SUPPLY,
SEC_O2_LEAKAGE,
SEC_100_FIO2_TIM,
INT_MEASURE_BUZZER,
SEC_CANCEL_BATTERY_FAILURE_CO_BUZ,
ACT_BOOST_FREQ,
SEC_LEAK_OCCLUSION,
SEC_CPU_REF_FAILURE,
SEC_APNEA_FLAG,
SEC_OCCLUSION_TIMER,
end_of_table_cnt_decnt};



enum e_TIM_MINUTE_TABLE_ID {
TimerWelcomeEvent,
TimerHideLoupe,
TimerBlinkEvent,
TimeOutModifEvent,
TimerQuitHistoAlarme,
TimerQuitPreferences,
TimerQuitGraphConfig,
TimerRefresh,
TimerStopModifMode,
TimerAutoCalibTest,
TimerRefreshAlarm,
TimerSwapAlarm,
TimerTriggerOk,
TimerSpyPraram,
TimerHideAlarmMessage,
TimerHideStopVentMess,
TimerAddToBlinkEvent,
TimerWaitCalibVerif,
TimerHistoAlarmSeek,
TimerHistoAnoSeek,
TimerWaitCalibQExp,
TimerWaitCalibFiO2,
TimerUsbMessage,
TimerUsbProcessing,
Timer100PrCentO2,
TimerVenRecordingApnea,
TimerUsbRecordingDetailledHorodatage,
TimerUsbCommandTooLong,
TimerQuitVentilReport,
SEC_PERIODICAL_BIP,
TimerEndLongDownKey,
TimerEndLongUpKey,
TimerDoubleAlarm,
SEC_BATTERY_FAILURE_CHARGE_BUZ_READ,
SEC_LOW_BATTERY_BUZ_READ,
SEC_BATTERY_FAILURE_CC_BUZ,
TimerLeakTest,
end_of_minute_ihm_table_decnt,
end_of_minute_table_cnt_decnt};



enum e_TYPE_USE_TIMER {
COUNT,
DECOUNT};




enum e_DRV_RTC_ACCESS_STATE {
FREE_RTC,
READ_RTC,
WRITE_RTC,
ERROR_RTC};




enum e_DRV_RTC_REGISTER {
RTC_SECOND,
RTC_MINUTE,
RTC_HOUR,
RTC_DAY,
RTC_DATE,
RTC_MONTH,
RTC_YEAR,
RTC_SEC_ALARM1,
RTC_MIN_ALARM1,
RTC_HOURS_ALARM1,
RTC_DAY_ALARM1,
RTC_SEC_ALARM2,
RTC_MIN_ALARM2,
RTC_HOURS_ALARM2,
RTC_DAY_ALARM2,
RTC_CONTROL,
RTC_STATUS,
RTC_CHARGER,
RTC_BEGIN_RAM};



enum e_DRV_RTC_ERROR {
DRV_RTC_NO_ERROR,
DRV_RTC_TIME_OUT_TRANSMIT};



enum e_EEP_ACCESS_STATE {
READ_EEP,
WRITE_EEP,
FREE_EEP,
ERROR_EEP};



enum e_DRV_EVENT_STATE {
DRV_EVENT_FREE,
DRV_EVENT_ERASE,
DRV_EVENT_WRITE};
#line 829
enum e_DRV_EEP_WRITE_ERROR {
DRV_EEP_NO_ERROR,
DRV_EEP_TIME_OUT_WRITE,
DRV_EEP_TIME_OUT_TRANSMIT};



enum e_STATE_OF_DRIVE_EEP {
DRV_EEP_WRITE_PENDING,
DRV_EEP_FREE};
#line 844
enum e_DRV_DISPLAY_FUNCTION {
DRV_INIT,
DRV_LOAD_TABLE,
DRV_BRITHNESSAJUST,
DRV_NEGATIVE_CAR,
DRV_DISPLAY_PAGE,
DRV_STRING,
DRV_NUMBER,
DRV_SYMBOL,
DRV_PIXEL,
DRV_LINE,
DRV_BOX,
DRV_ERASE_ZONE,
DRV_ERASE_PAGE,
DRV_BACKLIHGHTADJUST};




enum e_TYPE_SOUND {
NO_SOUND,
BIP_SHORT_SOUND,
BIP_LONG_SOUND,
BIP_VERY_LONG_SOUND,
START_BIP_SOUND,
STOP_BIP_SOUND,
BATTERY_SOUND,
VERY_SLOW_SOUND,
SLOW_SOUND,
FAST_SOUND,
USB_CONNECT,
USB_DISCONNECT,
CONTINU_SOUND};




enum e_TYPE_TEST_BUZ {
NO_BUZ,
BUZ};




enum e_TYPE_BACKLIGHT_LEVEL {
SWITCH_OFF,
WEAK,
SWITCH_ON};




enum e_NUMBER_BUZ {
BUZ_CARD,
BUZ_SEC,
BUZ_ALL,
BUZ_VOLUME};




enum e_TYPE_BLINK {
NO_LED,
BLINK_LED,
CONTINU_LED};




enum e_VALIDATION_BIP {
NO_BIP,
BIP_SHORT,
BIP_LONG,
BIP_VERY_LONG,
BIP_START_VENTIL,
BIP_STOP_VENTIL,
BURST,
BIP_USB_CONNECT,
BIP_USB_DISCONNECT,
BIP_SHORT_VALID,
BIP_BATTERY_PERIODICAL};




enum e_VALIDATION_BIP_TYPE {
NO_CLOC_BIP,
CLOC,
BIP,
BIP_AND_CLOC};



enum e_SPI_ACCESS {
SPI_EEPROM,
SPI_RTC,
SPI_POWER};



enum e_SIMV {
PIM,
VIM,
PSV,
end_of_e_SIMV};




enum e_SIMV_PS_End {
PS_FLOW_END,
PS_HIGH_PRESS_END,
PS_TIMED_END,
end_of_e_SIMV_PS_End};




enum e_Month {
Month_start,
JANUARY,
FEBRUARY,
MARSH,
APRIL,
MAY,
JUNE,
JULY,
AUGUST,
SEPTEMBER,
OCTOBER,
NOVEMBER,
DECEMBER};



enum e_DataBaseType {
DB_RTC,
DB_CURRENT,
DB_CONFIG,
DB_CONTROL,
DB_COMPUTE,
DB_POWERSUPPLY,
DB_NULL};
#line 992
enum e_OUTPUT_NAME {
OUT_LED_VENTIL,
OUT_LED_O2,
FREE_1Q3,
CE_EEP,
CE_RTC1,
CE_RTC2,
CE_INT_PRES_SENS,
CE_PROX_PRES_SENS,
CE_VALVE_PRES_SENS,
CE_SPI_USB,
CE_SPI_PIC,
CE_FLOW_INSP_SENS,
CE_FLOW_EXP_SENS,
CE_SPI_PIC_IC44,
FREE_2Q7,
FREE_2Q8};
#line 1019
enum e_SPI_POWER_TRANSMIT {
SPI_POWER_TRANSMIT_START_FRAME_MSB,
SPI_POWER_TRANSMIT_START_FRAME_LSB,
SPI_POWER_TRANSMIT_VENTIL_AUTHORIZATION,
SPI_POWER_TRANSMIT_MAINTENANCE_MODE,
SPI_POWER_TRANSMIT_CALIBRATION_MODE,
SPI_POWER_TRANSMIT_CRC,
SPI_POWER_TRANSMIT_END_FRAME,
SPI_POWER_TRANSMIT_EndOfFrame};
#line 1033
enum e_SPI_POWER_RECEIVE {
SPI_POWER_RECEIVE_MSB_START_FRAME,
SPI_POWER_RECEIVE_LSB_START_FRAME,
SPI_POWER_RECEIVE_MSB_V_BAT_U16,
SPI_POWER_RECEIVE_LSB_V_BAT_U16,
SPI_POWER_RECEIVE_MSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_LSB_TEMP_BAT_S16,
SPI_POWER_RECEIVE_MSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_CYCLES_U16,
SPI_POWER_RECEIVE_LSB_BAT_STATE_U16,
SPI_POWER_RECEIVE_LSB_POWER_TYPE_U16,
SPI_POWER_RECEIVE_MSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_JAUGE_AVALAIBLE_U16,
SPI_POWER_RECEIVE_LSB_PER_CENT_BAT_U16,
SPI_POWER_RECEIVE_LSB_NO_PRESENCE_BAT_U16,
SPI_POWER_RECEIVE_LSB_BAT_KO_U16,
SPI_POWER_RECEIVE_LSB_CHARGE_KO_U16,
SPI_POWER_RECEIVE_LSB_UNKNOWN_BATTERY_U16,
SPI_POWER_RECEIVE_MSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_S16,
SPI_POWER_RECEIVE_LSB_BATTERY_END_U16,
SPI_POWER_RECEIVE_LSB_BATTERY_LOW_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_DAY_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_MONTH_U16,
SPI_POWER_RECEIVE_LSB_FIRST_DATE_YEAR_U16,
SPI_POWER_RECEIVE_LSB_BAT_TEMP_OVERFLOW,
SPI_POWER_RECEIVE_LSB_SUPPLY_MEASURE_FAILURE,
SPI_POWER_RECEIVE_LSB_FAILURE_24V_FLAG,
SPI_POWER_RECEIVE_LSB_AMBIENT_TEMP_OUTOFBOUNDS,
SPI_POWER_RECEIVE_LSB_COOLING_FAN_FAILURE_FLAG,
SPI_POWER_RECEIVE_LSB_FIRST_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_SECOND_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_THIRD_VERSION_IDENTIFIANT,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_HOUR_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_MINUTE_U16,
SPI_POWER_RECEIVE_LSB_BAT_FIRST_DATE_SECOND_U16,
SPI_POWER_RECEIVE_LSB_BAT_AGEING_U16,
SPI_POWER_RECEIVE_LSB_BAT_SUPPLIER_U16,
SPI_POWER_RECEIVE_LSB_BAT_TYPICAL_CAPACITY_U16,
SPI_POWER_RECEIVE_CRC,
SPI_POWER_RECEIVE_END_FRAME,
SPI_POWER_RECEIVE_EndOfTable,
SPI_POWER_RECEIVE_BufferSize = 70};
#line 1082
enum e_DRV_SPI_POWER_ERROR {
DRV_SPI_POWER_NO_ERROR,
DRV_SPI_POWER_TIME_OUT_TRANSMIT,
DRV_SPI_POWER_NO_FRAME,
DRV_SPI_POWER_BAD_FRAME};
#line 1093
enum e_MODE_COM {
COM_VOL_A,
COM_PSVT,
COM_PRES_A,
COM_VSIMV,
COM_CPAP,
COM_VOL_C,
COM_PSV,
COM_PRES_C,
COM_VOL_US,
COM_PRES_US,
COM_PSV_US,
COM_VSIMV_US,
COM_PSIMV_US,
COM_CPAP_US,
COM_PSIMV,
End_of_Table_Mode_COM};




enum e_Monit_Buffer_Data_Type {
MONITORAGE,
HORODATAGE};
#line 1122
enum e_FrameUART1 {
DATA_FRAME0,
DATA_FRAME1,
DATA_FRAME2,
SIZE_FRAME_UART1};



enum e_Flash_Read_Status {
REQUEST,
RUNNING,
ENDED};



enum e_Cycling_Mode {
I_T,
I_E};




enum e_Alarm_Tone {
ORIGINAL,
COMPLIANT};
#line 1155
enum e_DIRECT_MONITORING {
MONIT_MSB_PRESSURE,
MONIT_LSB_PRESSURE,
MONIT_MSB_CORRECTED_FLOW_INSP,
MONIT_LSB_CORRECTED_FLOW_INSP,
MONIT_MSB_CORRECTED_FLOW_EXHAL,
MONIT_LSB_CORRECTED_FLOW_EXHAL,
MONIT_CORRECTED_VT_LEAK,
MONIT_SPO2,
MONIT_HR,
MONIT_ALARM_1,
MONIT_ALARM_2,
MONIT_ALARM_3,
MONIT_ALARM_4,
MONIT_ALARM_5,
MONIT_ALARM_6,
MONIT_ALARM_7,
MONIT_ALARM_8,
MONIT_ALARM_9,
MONIT_SYMBOL,
MONIT_VENTIL_MODE,
End_Of_Table_Direct_Monitoring};
#line 1185
enum e_DETAILLED_MONITORING {
DETAILLED_DATA_TYPE,

DETAILLED_DAY,
DETAILLED_VENTIL_STATE = 1,

DETAILLED_MONTH,
DETAILLED_PATIENT_PRESSURE_MSB = 2,

DETAILLED_YEAR,
DETAILLED_PATIENT_PRESSURE_LSB = 3,

DETAILLED_HOUR,
DETAILLED_INSP_FLOW_MSB = 4,

DETAILLED_MINUTE,
DETAILLED_INSP_FLOW_LSB = 5,

DETAILLED_SECOND,
DETAILLED_EXH_FLOW_MSB = 6,

DETAILLED_RESERVED1,
DETAILLED_EXH_FLOW_LSB = 7,

DETAILLED_RESERVED2,
DETAILLED_LEAK = 8,

End_Of_Table_Detailled_Monitoring};
#line 1222
enum e_TREND {
TREND_DAY,
TREND_MONTH,
TREND_YEAR,
TREND_HOUR,
TREND_MINUTE,
TREND_SECOND,
TREND_VENTIL_MODE,
TREND_VENTIL_TYPE,
TREND_MSB_P_MAX,
TREND_LSB_P_MAX,
TREND_MSB_AV_PEP,
TREND_LSB_AV_PEP,
TREND_MSB_LEAKAGE,
TREND_LSB_LEAKAGE,
TREND_MSB_AV_VOLUME,
TREND_LSB_AV_VOLUME,
TREND_IE_RATIO_NUMERATOR,
TREND_IE_RATIO_DENOMINATOR,
TREND_FREQUENCY,
TREND_MSB_INSPIRATED_VOLUME,
TREND_LSB_INSPIRATED_VOLUME,
TREND_MSB_EXHALED_VOLUME,
TREND_LSB_EXHALED_VOLUME,
TREND_HEART_RATE,
TREND_SPO2,
End_Of_Table_Trends};
#line 1257
enum e_EVENT_PARAMETERS {

EVENT_NB_ID,
EVENT_DAY_ID,
EVENT_MON_ID,
EVENT_YEA_ID,
EVENT_HOU_ID,
EVENT_MIN_ID,
EVENT_SCD_ID,
EVENT_CPTMACHHOURMSB_ID,
EVENT_CPTMACHHOURLSB_ID,
EVENT_MODE_ID,
EVENT_TYPE_ID,
EVENT_TRIGECONV_ID,
EVENT_PUNITCONV_ID,
EVENT_CYCL_ID,
EVENT_24VMSB_ID,
EVENT_24VLSB_ID,
EVENT_5VMSB_ID,
EVENT_5VLSB_ID,
EVENT_WTDMSB_ID,
EVENT_WTDLSB_ID,
EVENT_TINTMSB_ID,
EVENT_TINTLSB_ID,
EVENT_VBATMSB_ID,
EVENT_VBATLSB_ID,
EVENT_TBATMSB_ID,
EVENT_TBATLSB_ID,
EVENT_QBATMSB_ID,
EVENT_QBATLSB_ID,
EVENT_MBATMSB_ID,
EVENT_MBATLSB_ID,
EVENT_FIO2_ID,
EVENT_SPO2_ID,
EVENT_FREQCAR_ID,
EVENT_PMAXMSB_ID,
EVENT_PMAXLSB_ID,
EVENT_PEPMSB_ID,
EVENT_PEPLSB_ID,
EVENT_RAPIT_ID,
EVENT_RAPIEMSB_ID,
EVENT_RAPIELSB_ID,
EVENT_FREQ_ID,
EVENT_VTIMSB_ID,
EVENT_VTILSB_ID,
EVENT_VTEMSB_ID,
EVENT_VTELSB_ID,
EVENT_VMMSB_ID,
EVENT_VMLSB_ID,
EVENT_LEAK_ID,
EVENT_TIMSB_ID,
EVENT_TILSB_ID,
EVENT_TEMSB_ID,
EVENT_TELSB_ID,
EVENT_SUPPLY_TYPE,
EVENT_BATLEVEL_ID,
EVENT_SETRELATIVE_PRESSURE_ID,
EVENT_SETBAROMETRIC_COMP_ID,
EVENT_SETSOUND_LEVEL_ID,
EVENT_SETPEDIATRIC_CIRCUIT_ID,
EVENT_SETDISCONNECTION_DELAY_ID,
EVENT_SETAPNEA_ALARM_ID,
EVENT_SETSPO2MIN_ID,
EVENT_SETSPO2MAX_ID,
EVENT_SETFIO2_ID,
EVENT_SETFIO2MIN_ID,
EVENT_SETFIO2MAX_ID,


EVENT_SPECPAR_1_ID,
EVENT_SPECPAR_2_ID,
EVENT_SPECPAR_3_ID,
EVENT_SPECPAR_4_ID,
EVENT_SPECPAR_5_ID,
EVENT_SPECPAR_6_ID,
EVENT_SPECPAR_7_ID,
EVENT_SPECPAR_8_ID,
EVENT_SPECPAR_9_ID,
EVENT_SPECPAR_10_ID,
EVENT_SPECPAR_11_ID,
EVENT_SPECPAR_12_ID,
EVENT_SPECPAR_13_ID,
EVENT_SPECPAR_14_ID,
EVENT_SPECPAR_15_ID,
EVENT_SPECPAR_16_ID,
EVENT_SPECPAR_17_ID,
EVENT_SPECPAR_18_ID,
EVENT_SPECPAR_19_ID,
EVENT_SPECPAR_20_ID,
EVENT_SPECPAR_21_ID,
EVENT_SPECPAR_22_ID,
EVENT_SPECPAR_23_ID,
EVENT_SPECPAR_24_ID,
EVENT_SPECPAR_25_ID,
EVENT_SPECPAR_26_ID,
EVENT_SPECPAR_27_ID,
EVENT_SPECPAR_28_ID,
EVENT_SPECPAR_29_ID,
EVENT_SPECPAR_30_ID,
EVENT_SPECPAR_31_ID,
EVENT_STATE_ID,
EVENT_Last_Event_Parameter = 96,
End_Of_Table_Events};
#line 1369
enum e_Settings {

SETTINGS_COMPATIBILITY,
SETTINGS_MODE,
SETTINGS_CYCLING_MODE_LSB,
SETTINGS_CYCLING_MODE_MSB,
SETTINGS_PRESSURE_UNIT_LSB,
SETTINGS_PRESSURE_UNIT_MSB,
SETTINGS_LOW_SPO2_LSB,
SETTINGS_LOW_SPO2_MSB,
SETTINGS_SPO2_LOW_SELECT_LSB,
SETTINGS_SPO2_LOW_SELECT_MSB,
SETTINGS_HIGH_SPO2_LSB,
SETTINGS_HIGH_SPO2_MSB,
SETTINGS_SPO2_HIGH_SELECT_LSB,
SETTINGS_SPO2_HIGH_SELECT_MSB,
SETTINGS_VOL_CONTROL_LSB,
SETTINGS_VOL_CONTROL_MSB,
SETTINGS_P_CONTROL_LSB,
SETTINGS_P_CONTROL_MSB,
SETTINGS_P_SUPPORT_LSB,
SETTINGS_P_SUPPORT_MSB,
SETTINGS_PEEP_LSB,
SETTINGS_PEEP_MSB,
SETTINGS_PEEP_NO_SELECT_LSB,
SETTINGS_PEEP_NO_SELECT_MSB,
SETTINGS_RISE_TIME_LSB,
SETTINGS_RISE_TIME_MSB,
SETTINGS_RAMP_LSB,
SETTINGS_RAMP_MSB,
SETTINGS_I_T_LSB,
SETTINGS_I_T_MSB,
SETTINGS_IE_NUMERATOR_LSB,
SETTINGS_IE_NUMERATOR_MSB,
SETTINGS_IE_DENOMINATOR_LSB,
SETTINGS_IE_DENOMINATOR_MSB,
SETTINGS_CONTROL_R_LSB,
SETTINGS_CONTROL_R_MSB,
SETTINGS_BACKUP_R_LSB,
SETTINGS_BACKUP_R_MSB,
SETTINGS_BACKUP_R_NO_SELECT_LSB,
SETTINGS_BACKUP_R_NO_SELECT_MSB,
SETTINGS_APNEA_LSB,
SETTINGS_APNEA_MSB,
SETTINGS_AUTO_APNEA_SELECT_LSB,
SETTINGS_AUTO_APNEA_SELECT_MSB,
SETTINGS_INSP_SENS_LSB,
SETTINGS_INSP_SENS_MSB,
SETTINGS_INSP_SENS_NO_SELECT_LSB,
SETTINGS_INSP_SENS_NO_SELECT_MSB,
SETTINGS_EXH_SENS_LSB,
SETTINGS_EXH_SENS_MSB,
SETTINGS_AUTO_EXH_SENS_SELECT_LSB,
SETTINGS_AUTO_EXH_SENS_SELECT_MSB,
SETTINGS_TARGET_VT_LSB,
SETTINGS_TARGET_VT_MSB,
SETTINGS_TARGET_VT_SELECT_LSB,
SETTINGS_TARGET_VT_SELECT_MSB,
SETTINGS_MAX_PRESSURE_LSB,
SETTINGS_MAX_PRESSURE_MSB,
SETTINGS_LOW_VTI_LSB,
SETTINGS_LOW_VTI_MSB,
SETTINGS_LOW_VTI_NO_SELECT_LSB,
SETTINGS_LOW_VTI_NO_SELECT_MSB,
SETTINGS_HIGH_VTI_LSB,
SETTINGS_HIGH_VTI_MSB,
SETTINGS_HIGH_VTI_NO_SELECT_LSB,
SETTINGS_HIGH_VTI_NO_SELECT_MSB,
SETTINGS_LOW_VTE_LSB,
SETTINGS_LOW_VTE_MSB,
SETTINGS_LOW_VTE_NO_SELECT_LSB,
SETTINGS_LOW_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_VTE_LSB,
SETTINGS_HIGH_VTE_MSB,
SETTINGS_HIGH_VTE_NO_SELECT_LSB,
SETTINGS_HIGH_VTE_NO_SELECT_MSB,
SETTINGS_HIGH_PIP_LSB,
SETTINGS_HIGH_PIP_MSB,
SETTINGS_LOW_PIP_LSB,
SETTINGS_LOW_PIP_MSB,
SETTINGS_HIGH_R_LSB,
SETTINGS_HIGH_R_MSB,
SETTINGS_HIGH_R_NO_SELECT_LSB,
SETTINGS_HIGH_R_NO_SELECT_MSB,
SETTINGS_HIGH_LEAK_LSB,
SETTINGS_HIGH_LEAK_MSB,
SETTINGS_HIGH_LEAK_SELECT_LSB,
SETTINGS_HIGH_LEAK_SELECT_MSB,
SETTINGS_TI_MIN_LSB,
SETTINGS_TI_MIN_MSB,
SETTINGS_TI_MIN_AUTO_SELECT_LSB,
SETTINGS_TI_MIN_AUTO_SELECT_MSB,
SETTINGS_TI_MAX_LSB,
SETTINGS_TI_MAX_MSB,
SETTINGS_TI_MAX_AUTO_SELECT_LSB,
SETTINGS_TI_MAX_AUTO_SELECT_MSB,
SETTINGS_DISCONNECTION_DELAY_LSB,
SETTINGS_DISCONNECTION_DELAY_MSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_LSB,
SETTINGS_DISCONNECTION_DELAY_AUTO_MSB,
SETTINGS_SIGH_SELECT_LSB,
SETTINGS_SIGH_SELECT_MSB,
SETTINGS_SIGH_VT_COEF_LSB,
SETTINGS_SIGH_VT_COEF_MSB,
SETTINGS_SIGH_CPT_LSB,
SETTINGS_SIGH_CPT_MSB,
SETTINGS_APNEA_ALARM_ACTIVATION_LSB,
SETTINGS_APNEA_ALARM_ACTIVATION_MSB,
SETTINGS_PEDIATRIC_CIRCUIT_LSB,
SETTINGS_PEDIATRIC_CIRCUIT_MSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_LSB,
SETTINGS_PRESSURE_SUPPORT_RELATIVE_MSB,
End_Of_Table_Settings};
#line 1492
enum e_USB_SerialNumberAndDate_Frame {

USB_SETTING_SERIAL_NUMBER_1,
USB_SETTING_SERIAL_NUMBER_2,
USB_SETTING_SERIAL_NUMBER_3,
USB_SETTING_SERIAL_NUMBER_4,
USB_SETTING_SERIAL_NUMBER_5,
USB_SETTING_SERIAL_NUMBER_6,
USB_SETTING_SERIAL_NUMBER_7,
USB_SETTING_SERIAL_NUMBER_8,
USB_SETTING_SERIAL_NUMBER_9,
USB_SETTING_SERIAL_NUMBER_10,
USB_SETTING_SERIAL_NUMBER_11,
USB_SETTING_SERIAL_NUMBER_12,

USB_SETTING_DATE_YEAR,
USB_SETTING_DATE_MONTH,
USB_SETTING_DATE_DAY,
USB_SETTING_DATE_HOUR,
USB_SETTING_DATE_MINUTE,
USB_SETTING_DATE_SECOND,
End_of_e_usb_frame_serialNumberAndDate};




enum e_USB_SerialNumber_Frame {

USB_SERIAL_NUMBER_1,
USB_SERIAL_NUMBER_2,
USB_SERIAL_NUMBER_3,
USB_SERIAL_NUMBER_4,
USB_SERIAL_NUMBER_5,
USB_SERIAL_NUMBER_6,
USB_SERIAL_NUMBER_7,
USB_SERIAL_NUMBER_8,
USB_SERIAL_NUMBER_9,
USB_SERIAL_NUMBER_10,
USB_SERIAL_NUMBER_11,
USB_SERIAL_NUMBER_12,
End_of_e_usb_frame_serialNumber};
#line 1538
enum e_USB_Settings_Frame {

USB_SETTINGS_DATA,
USB_SETTINGS_MSB_CRC_FRAME,
USB_SETTINGS_LSB_CRC_FRAME,
End_of_e_usb_frame_setting};




enum e_USB_Transfer_Apply {
Usb_FirstStep,
Usb_ReadCurrentDirectoryNext,
Usb_OpenFile,
Usb_CreateFile,
Usb_ReadFile,
Usb_WriteSerialNumberAndDateAtIndex,
Usb_WriteSerialNumberAndDateAtEndOfFile,
Usb_WriteSerialNumberAtEndOfFile,
Usb_WriteFileAtIndex,
Usb_WriteAtTheEndOfFile,
Usb_UpadateDateAndTime,
Usb_WriteCRC,
Usb_CloseFile,
End_of_e_usb_transfer_apply};
#line 1569
enum e_USB_File_Settings {
FileSettingNext,
FileSettingNotFound,
FileSettingFound,
end_of_e_usb_file_setting};
#line 1579
enum e_USB_File_Type {
SettingsType,
ContinuousRecordingType,
MonitoringTransferType,
TrendsTransferType,
EventsTransferType,
end_of_e_usb_file_type};




enum e_USB_Continuous_Frame {
USB_ID_FRAME,

USB_DATA,
USB_End_Of_Continuous_Frame};




enum e_NAND_FLASH_STATE {
NAND_FREE,
NAND_ERASE,
NAND_MONIT_WRITE,
NAND_MONIT_READ,
NAND_TREND_WRITE,
NAND_TREND_READ};
#line 95 "..\\..\\SRC\\HMI\\HMI_IhmType.hpp"
enum e_TYPE_OF_LED {
LED_ALARM_RED,
LED_ALARM_ORANGE,
LED_VENTIL,
LED_WHITE,
LED_AC,
LED_DC,
LED_BAT};
#line 167
enum EventId {
ProgExhalFlowUsed,
ProgExhalFlowUnused,
ProgInspControlEvent,
ProgInspTrigEvent,
ProgExhEvent,
ProgHideBatEvent,
ProgStartVentilOk,
ProgStartVentilKo,
ProgShowBatEvent,
ProgInibAlarmOK,
ProgInibAlarmNOK,
ProgCancelAlarmOK,
ProgCancelAlarmNOK,
ProgRemoveHighPressureAlarm,
ProgValveMissing,
ProgValveDetected,
ProgBlocExpiMissing,
ProgBlocExpiDetected,
ProgSpo2SensorNoError,
ProgSpo2SensorError,
ProgFio2SensorOK,
ProgFio2SensorNOK,
ProgCheckSupplyNoError,
ProgCheckSupplyError,
ProgUsbKeyDetected,
ProgUsbKeyNotDetected,
ProgUsbErrorCodeReady,
ProgUsbNewModeDetected,
ProgStartMonitoring,
ProgSupplyBusFailure,
ProgSupplyBusOK};
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject;
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject;
#line 33 "..\\..\\SRC\\DATABASE\\Db_PowerSupply.h"
enum e_DB_POWERSUPPLY {
V_BAT_U16,
TEMP_BAT_S16,
BAT_CYCLES_U16,
BAT_STATE_U16,
POWER_TYPE_U16,
JAUGE_MINUTE_U16,
JAUGE_HOUR_DISPLAY_U16,
JAUGE_MINUTE_DISPLAY_U16,
JAUGE_AVALAIBLE_U16,
PER_CENT_BAT_U16,
NO_PRESENCE_BAT_U16,
BAT_KO_U16,
CHARGE_KO_U16,
UNKNOWN_BATTERY_U16,
AMBIENT_TEMP_S16,
BATTERY_END_U16,
BATTERY_LOW_U16,
FIRST_DATE_DAY_U16,
FIRST_DATE_MONTH_U16,
FIRST_DATE_YEAR_U16,
COOLING_FAN_FAILURE_FLAG_U16,
AMBIENT_TEMP_OUTOFBOUNDS_U16,
FAILURE_24V_FLAG_U16,
BAT_TEMP_OUTOFBOUNDS_U16,
SUPPLY_MEASURE_FAILURE_U16,
POWER_SUPPLY_VERSION_NUMBER_0,
POWER_SUPPLY_VERSION_NUMBER_1,
POWER_SUPPLY_VERSION_NUMBER_2,
SUPPLIER_U16,
CAPACITY_U16,
CAPACITY_THEORICAL_U16,
FIRST_DATE_HOUR_U16,
FIRST_DATE_MINUTE_U16,
FIRST_DATE_SECOND_U16,
AGING_U16,
end_of_db_powersupply_table};
#line 47 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
enum ePANIC_MODULE {
PANIC_MODULE_VENTIL,
PANIC_MODULE_ALARM,
PANIC_MODULE_GRAPH,
PANIC_MODULE_EVENT_NODE_VENTIL,
PANIC_MODULE_EVENT_NODE_ALARM,
PANIC_MODULE_EVENT_NODE_MAINT_CALIB,
PANIC_MODULE_FRAME_GRAPH,
PANIC_MODULE_UNKNOWN,
PANIC_MODULE_MAX};
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField;
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField;
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox;
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField;
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog;
#line 42 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
enum DataType {
eValue,
eString,
eValueSign};


struct Loupe;
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm;
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label;
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject;
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField;
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue;
#line 45 "..\\..\\SRC\\HMI\\HMI_MonitoringObject.hpp"
struct MonitoringObject;
#line 212 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
struct tInfoNodeForMode;
#line 231
struct tInfo;




enum e_OBJECT {
OBJECT_VENTIL_LOVPIP,
OBJECT_VENTIL_LOVVTI,
OBJECT_VENTIL_LOVVTE,
OBJECT_VENTIL_LOVVM,
OBJECT_VENTIL_LOVR,
OBJECT_VENTIL_LOVFUITE,
OBJECT_VENTIL_LOVFIO2,
OBJECT_VENTIL_LOVSPO2,
OBJECT_VENTIL_LTVIE,
OBJECT_VENTIL_LTVIT,
OBJECT_VENTIL_OBJECT_MAX,
OBJECT_ALARM_LOVPIP = 0,
OBJECT_ALARM_LOVVTI,
OBJECT_ALARM_LOVMAP,
OBJECT_ALARM_LOVPEEP,
OBJECT_ALARM_LTVIE,
OBJECT_ALARM_LOVIT,
OBJECT_ALARM_LOVR,
OBJECT_ALARM_LOVM,
OBJECT_ALARM_OBJECT_MAX,
OBJECT_GRAPH_MOFIO2 = 0,
OBJECT_GRAPH_MOSPO2,
OBJECT_GRAPH_MOPULSE,
OBJECT_GRAPH_MOTI,
OBJECT_GRAPH_MOTE,
OBJECT_GRAPH_MOIE,
OBJECT_GRAPH_MOIT,
OBJECT_GRAPH_MOFR,
OBJECT_GRAPH_MOVM,
OBJECT_GRAPH_MOVTE,
OBJECT_GRAPH_MOVTI,
OBJECT_GRAPH_MOPE,
OBJECT_GRAPH_MOPI,
OBJECT_GRAPH_MOFUITE,
OBJECT_GRAPH_OBJECT_MAX};
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame;
#line 36 "..\\..\\SRC\\HMI\\HMI_MonitoringObjectTwoValue.hpp"
struct MonitoringObjectTwoValue;
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphTitle.hpp"
struct GraphTitle;
#line 39 "..\\..\\SRC\\HMI\\HMI_DataBaseLink.hpp"
struct DataBaseLink;
#line 36 "..\\..\\SRC\\HMI\\HMI_Scale.hpp"
enum TOrientation { eHOR, eVERT};

enum TSide { eTOP, eBOTTOM};



struct Scale;
#line 39 "..\\..\\SRC\\HMI\\HMI_VPoint.hpp"
struct VPoint;
#line 39 "..\\..\\SRC\\HMI\\HMI_Pen.hpp"
struct Pen;
#line 38 "..\\..\\SRC\\HMI\\HMI_CurveData.hpp"
struct CurveData;
#line 41 "..\\..\\SRC\\HMI\\HMI_Graph.hpp"
enum TKind {
eLINE,
eBAR};
#line 49
struct Graph;
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphControl.hpp"
struct GraphControl;
#line 34 "..\\..\\SRC\\HMI\\HMI_PerformanceGraphControl.hpp"
struct PerformanceGraphControl;
#line 35 "..\\..\\SRC\\HMI\\HMI_WobGraphControl.hpp"
struct WobGraphControl;
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue;
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject;
#line 56 "..\\..\\SRC\\HMI\\HMI_FrameGraph.hpp"
struct tCurvInfo;
#line 65
struct FrameGraph;
#line 28 "..\\..\\SRC\\DATABASE\\DB_AlarmStatus.h"
enum e_DB_ALARMS {
Mark_Begin_Alarm,
ALARM_DISCONNECTION_U16,
ALARM_HIGH_PRESSURE_U16,
ALARM_APNEA_U16,
ALARM_HIGH_VTI_U16,
ALARM_LOW_VTI_U16,
ALARM_LOW_VTE_U16,
ALARM_HIGH_RATE_U16,
ALARM_AC_POWER_FAIL_U16,
ALARM_DC_POWER_FAIL_U16,
ALARM_CHECK_SUPPLY_U16,
ALARM_LOW_BATTERY_U16,
ALARM_END_OF_BATTERY_U16,
ALARM_CHECK_BATTERY_U16,
ALARM_NO_BATTERY_U16,
ALARM_CHECK_BUZZER_U16,
ALARM_BUZZER_BATTERY_LOW_U16,
ALARM_BUZZER_BATTERY_CHARGE_FAILURE_U16,
ALARM_RESERVED_18,
ALARM_TECHNICAL_PROBLEM_U16,
ALARM_CHECK_SETTINGS_U16,
ALARM_CHECK_PRESSURE_U16,
ALARM_CHECK_PROXIMAL_U16,
ALARM_PROXI_DISCONNECTION_U16,
ALARM_NO_PROXIMAL_U16,
ALARM_CHECK_VALVE_U16,
ALARM_CHECK_VOLUME_U16,
ALARM_VALVE_LEAKAGE_U16,
ALARM_CHECK_REMOTE_ALARM_U16,
ALARM_UNKNOWN_BATTERY_U16,
ALARM_CHECK_BATTERY_CHARGE_U16,
ALARM_HIGH_VTE_U16,
ALARM_CALIBRATION_FAIL_U16,
ALARM_KEYBOARD_DEFAULT_U16,
ALARM_AMBIENT_TEMP_U16,
ALARM_BAT_TEMP_U16,
ALARM_FAILURE_24V_U16,
ALARM_COOLING_FAN_U16,
ALARM_SUPPLY_MEASURE_U16,
ALARM_TURBINE_OVERHEAT_U16,
ALARM_RESERVED_40,
ALARM_CONTROLLED_CYCLES_U16,
ALARM_OCCLUSION_U16,
ALARM_CPU_REFERENCE_U16,
ALARM_BREATH_TIME_CYCLED_U16,
ALARM_INSP_FLOW_FAILURE_U16,
ALARM_CHECK_VALVE_PRESSURE_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_UTILISER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_1_U16,
ALARM_ENLEVER_VALVE_CHANGER_PE_PI_2_U16,
ALARM_UTILISER_VALVE_1_U16,
ALARM_UTILISER_VALVE_2_U16,
ALARM_ENLEVER_VALVE_1_U16,
ALARM_ENLEVER_VALVE_2_U16,
ALARM_LEAKAGE_U16,
ALARM_CHECK_FIO2_U16,
ALARM_LOW_FIO2_U16,
ALARM_HIGH_FIO2_U16,
ALARM_NO_FIO2_SENSOR_U16,
ALARM_CALIB_FIO2_U16,
ALARM_CHECK_O2_SUPPLY_U16,
ALARM_MISSING_O2_SUPPLY_U16,
ALARM_CHECK_O2_U16,
ALARM_O2_LEAKAGE_U16,
ALARM_HIGH_SPO2_U16,
ALARM_LOW_SPO2_U16,
ALARM_SPO2_SENSOR_DISCONNECTED_U16,
ALARM_100_PER_CENT_O2_U16,
ALARM_DELAYED_MESSAGE_U16,
ALARM_LEAK_OCCLUSION_U16,
ALARM_VOLUNTARY_STOP_U16,
ALARM_NEEDED_FIO2_CALIB_U16,
ALARM_APNEA_FLAG_U16,
Mark_Displayed_Alarm,
Mark_Begin_Technical_Alarm,
TECH_ALARM_RESERVED_1,
TECH_ALARM_INSP_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_EXHAL_FLOW_OFFSET_DEFAULT_U16,
TECH_ALARM_VALVE_PRESS_OFFSET_DEFAULT_U16,
TECH_ALARM_INTERNAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_SPEED_DEFAULT_U16,
TECH_ALARM_CLOCK_DEFAULT_U16,
TECH_ALARM_PROXIMAL_PRESSURE_OFFSET_DEFAULT_U16,
TECH_ALARM_VERY_LOW_PROXIMAL_PRESS_U16,
TECH_ALARM_VERY_LOW_INTERNAL_PRESS_U16,
TECH_ALARM_VERY_LOW_VALVE_PRESS_U16,
TECH_ALARM_LOOSE_FLASH_POINTER,
TECH_ALARM_FIO2_OFFSET_DEFAULT,
TECH_ALARM_OFFSET_O2_FLOW,
TECH_ALARM_O2_PRESSURE_OFFSET_DEFAULT,
TECH_ALARM_RESERVED_16,
TECH_ALARM_RESERVED_17,
TECH_ALARM_RESERVED_18,
TECH_ALARM_RESERVED_19,
TECH_ALARM_RESERVED_20,
end_of_alarms_table,
NO_ALARM};
#line 32 "..\\..\\SRC\\DATABASE\\DB_Event.h"
enum e_EVENT_ENUM {

NO_EVENT,
EVENT_START,
EVENT_VENTIL,
EVENT_VOLUNTARY_STOP_VENTIL,
EVENT_MODIF_PEEP,
EVENT_MODIF_BACKUP_R,
EVENT_RESET_PATIENT_COUNTER,
EVENT_MODIF_CONTROL_R,
RESERVED_8,
EVENT_MODIF_VOL_CONTROL,
EVENT_MODIF_RAMP,
EVENT_MODIF_IE,
RESERVED_12,
EVENT_MODIF_STOP_DEVICE,
EVENT_MODIF_INSP_SENS,
EVENT_MODIF_MODE,
EVENT_MODIF_RISE_TIME,
EVENT_MODIF_P_SUPPORT,
EVENT_MODIF_VTC,
EVENT_MODIF_PIMAX,
EVENT_MODIF_IT,
RESERVED_21,
EVENT_MODIF_EXH_SENS,
EVENT_MODIF_APNEA_TIME,
EVENT_MODIF_LOW_PIP,
EVENT_MODIF_HIGH_PIP,
EVENT_MODIF_HIGH_R,
EVENT_MODIF_LOW_VTE,
RESERVED_28,
RESERVED_29,
EVENT_MODIF_LOW_VTI,
EVENT_MODIF_HIGH_VTI,
RESERVED_32,
RESERVED_33,
RESERVED_34,
RESERVED_35,
EVENT_UNVOLUNTARY_STOP_VENTIL,
RESERVED_37,
RESERVED_38,
RESERVED_39,
EVENT_EXH_FLOW_CALIB,
RESERVED_41,
EVENT_MODIF_FIO2,
EVENT_FIO2_CALIB,
EVENT_MODIF_MAX_LEAK,
EVENT_INSP_FLOW_CALIB,
EVENT_O2_FLOW_CALIB,
EVENT_PATIENT_PRESS_CALIB,
RESERVED_48,
EVENT_MODIF_SPO2_MAXI,
EVENT_MODIF_SPO2_MINI,
EVENT_MODIF_TI_MAXI,
EVENT_MODIF_TI_MINI,
EVENT_VALVE_PRESS_CALIB,
EVENT_AC_RETURN,
EVENT_O2_PRESS_CALIB,
EVENT_ALARM_INHIBITION,
EVENT_DC_RETURN,
EVENT_CIRCUIT_CHECK_MENU_ACCESS,
EVENT_MAINTENANCE_MENU_ACCESS,
EVENT_ALARM_CANCELLATION,
EVENT_MODIF_P_CONTROL,
EVENT_MODIF_TI_CONTROL,
RESERVED_63,
RESERVED_64,
EVENT_MODIF_HIGH_VTE,
EVENT_MODIF_TIME,
EVENT_MODIF_DATE,
EVENT_USB_TOO_MANY_KEYS_CONNECTED,
EVENT_USB_KEY_DISCONNECTED_DURING_OPERATION,
EVENT_USB_TRANSFER_ERROR,
EVENT_USB_ERASE_KEY_ERROR,
EVENT_USB_SETTINGS_INCOMPATIBLES,
EVENT_USB_SETTINGS_FILE_ERROR,
EVENT_USB_KEY_FULL,
EVENT_USB_SETTINGS_TRANSFER_FROM_KEY,
EVENT_MODIF_FIO2_MAXI,
EVENT_MODIF_FIO2_MINI,
EVENT_MODIF_DISCONNECTION_DELAY,
EVENT_MODIF_SIGHT_COUNT,
EVENT_MODIF_SIGHT_COEF,
EVENT_FLASH_CHECKSUM_POST_ERROR,
EVENT_RAM_CHECKSUM_POST_ERROR,
EVENT_VOLT_REFERENCE_POST_ERROR,
EVENT_EEPROM_POST_ERROR,
EVENT_POST_VERSION_ERROR,
EVENT_USB_CONTINUOUS_TRANSFER_START,
EVENT_USB_CONTINUOUS_TRANSFER_STOP,
RESERVED_88,
Start_Alarm,
EVENT_AL_HIGH_PRESS,
EVENT_AL_DISCONNECTION,
EVENT_AL_HIGH_RATE,
EVENT_AL_LOW_VTI,
EVENT_AL_HIGH_VTI,
EVENT_AL_LOW_VTE,
EVENT_AL_VALVE_LEAKAGE,
EVENT_AL_APNEA,
EVENT_AL_LOW_FIO2,
EVENT_AL_HIGH_FIO2,
EVENT_AL_CHECK_PRESSURE,
EVENT_AL_CHECK_VALVE,
EVENT_AL_AC_POWER_FAIL,
EVENT_AL_DC_POWER_FAIL,
EVENT_AL_LOW_BATTERY,
EVENT_AL_END_OF_BATTERY,
EVENT_AL_CHECK_BATTERY,
EVENT_AL_HIGH_SPO2,
EVENT_AL_NO_FIO2_SENSOR,
EVENT_AL_LEAKAGE,
EVENT_AL_LEAK_OCCLUSION,
EVENT_AL_LOW_SPO2,
EVENT_AL_NO_BATTERY,
EVENT_AL_NO_PROXI,
EVENT_AL_O2_LEAKAGE,
EVENT_AL_CHECK_VOLUME,
EVENT_AL_CHECK_BUZZER,
EVENT_AL_CHECK_FIO2,
EVENT_AL_CHECK_O2,
EVENT_AL_CHECK_O2_SUPPLY,
EVENT_AL_CHECK_PROXIMAL,
EVENT_AL_CHECK_REMOTE_ALARM,
EVENT_AL_CHECK_SUPPLY,
RESERVED_123,
EVENT_AL_CONNECT_VALVE,
EVENT_AL_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_DISCONNECT_VALVE,
EVENT_AL_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_PROXIMAL_DISCONNECTION,
EVENT_AL_TECHNICAL_PROBLEM,
EVENT_AL_CHECK_VALVE_PRESSURE,
EVENT_AL_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_MISSING_O2_SUPPLY,
EVENT_AL_CONTROLLED_CYCLES,
RESERVED_134,
EVENT_AL_100_PER_CENT_O2,
EVENT_AL_UNKNOWN_BATTERY,
EVENT_AL_CHECK_BATTERY_CHARGE,
RESERVED_138,
RESERVED_139,
RESERVED_140,
RESERVED_141,
EVENT_AL_NEW_VERSION,
EVENT_AL_EEPROM_OUT_OF_RANGE,
EVENT_AL_EEPROM_LOOSING_PARAM,
RESERVED_145,
EVENT_AL_HIGH_VTE,
EVENT_AL_KEYBOARD,
EVENT_AL_CALIBRATION,
EVENT_AL_COOLING_FAN,
EVENT_AL_AMBIENT_TEMP,
EVENT_AL_BAT_TEMP,
EVENT_AL_SUPPLY_MEASURE,
EVENT_AL_FAILURE_24V,
EVENT_AL_TURBINE_OVERHEAT,
EVENT_AL_OCCLUSION,
EVENT_AL_CPU_REFERENCE,
RESERVED_157,
EVENT_AL_BREATH_TIME_CYCLED,
EVENT_AL_INSP_FLOW_FAILURE,
EVENT_AL_LOW_BUZZER_BATTERY,
RESERVED_161,
EVENT_AL_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_NEEDED_FIO2_CALIB,
EVENT_AL_VOLUNTARY_STOP,
RESERVED_165,
RESERVED_166,
RESERVED_167,
End_Event_Alarm,
Start_End_Of_Alarm,
EVENT_AL_END_OF_APNEA,
EVENT_AL_END_OF_CHECK_BATTERY,
EVENT_AL_END_OF_DISCONNECTION,
EVENT_AL_END_OF_CHECK_FIO2,
EVENT_AL_END_OF_CHECK_O2,
EVENT_AL_END_OF_CHECK_O2_SUPPLY,
EVENT_AL_END_OF_CHECK_PRESSURE,
EVENT_AL_END_OF_CHECK_PROXIMAL,
RESERVED_178,
RESERVED_179,
EVENT_AL_END_OF_CHECK_SUPPLY,
EVENT_AL_END_OF_CHECK_VALVE,
EVENT_AL_END_OF_LEAK_OCCLUSION,
EVENT_AL_END_OF_CHECK_VOLUME,
EVENT_AL_END_OF_CONNECT_VALVE,
EVENT_AL_END_OF_CONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_DISCONNECT_VALVE,
EVENT_AL_END_OF_DISCONNECT_VALVE_CHANGE_PI_PE,
EVENT_AL_END_OF_HIGH_FIO2,
EVENT_AL_END_OF_HIGH_PRESSURE,
EVENT_AL_END_OF_HIGH_RATE,
EVENT_AL_END_OF_HIGH_SPO2,
EVENT_AL_END_OF_HIGH_VTI,
EVENT_AL_END_OF_LEAKAGE,
EVENT_AL_END_OF_LOW_FIO2,
EVENT_AL_END_OF_LOW_SPO2,
EVENT_AL_END_OF_LOW_VTE,
EVENT_AL_END_OF_LOW_VTI,
EVENT_AL_END_OF_NO_BATTERY,
EVENT_AL_END_OF_NO_FIO2_SENSOR,
EVENT_AL_END_OF_NO_PROXI,
EVENT_AL_END_OF_O2_LEAKAGE,
EVENT_AL_END_OF_PROXI_DISCONNECTION,
EVENT_AL_END_OF_TECHNICAL_PROBLEM,
EVENT_AL_END_OF_VALVE_LEAKAGE,
EVENT_AL_END_OF_HIGH_VTE,
EVENT_AL_END_KEYBOARD,
EVENT_AL_END_CHECK_VALVE_PRESSURE,
EVENT_AL_END_SPO2_SENSOR_DISCONNECTED,
EVENT_AL_END_MISSING_O2_SUPPLY,
EVENT_AL_END_CONTROLLED_CYCLES,
RESERVED_211,
EVENT_AL_END_OF_100_PER_CENT_O2,
EVENT_AL_END_OF_UNKNOWN_BATTERY,
EVENT_AL_END_OF_CHECK_BATTERY_CHARGE,
RESERVED_215,
RESERVED_216,
RESERVED_217,
RESERVED_218,
EVENT_AL_END_COOLING_FAN,
EVENT_AL_END_AMBIENT_TEMP,
EVENT_AL_END_BAT_TEMP,
EVENT_AL_END_SUPPLY_MEASURE,
EVENT_AL_END_FAILURE_24V,
RESERVED_224,
EVENT_AL_END_OCCLUSION,
EVENT_AL_END_CPU_REFERENCE,
RESERVED_227,
EVENT_AL_END_BREATH_TIME_CYCLED,
EVENT_AL_END_OF_INSP_FLOW_FAILURE,
EVENT_AL_END_LOW_BUZZER_BATTERY,
RESERVED_231,
EVENT_AL_END_BUZZER_BATTERY_CHARGE_FAILURE,
EVENT_AL_END_OF_VOLUNTARY_STOP,
RESERVED_234,
RESERVED_235,
End_Alarm,
Start_Anomalies,
RESERVED_238,
EVENT_ALT_INSP_FLOW_OFFSET,
EVENT_ALT_EXH_FLOW_OFFSET,
EVENT_ALT_VALVE_PRESSURE_OFFSET,
EVENT_ALT_INT_PRESS_OFSSET,
EVENT_ALT_SPEED,
EVENT_ALT_CLOCK,
EVENT_ALT_PROXI_PRESS_OFSSET,
EVENT_ALT_VERY_LOW_PROXI_PRESS,
EVENT_ALT_VERY_LOW_INT_PRESS,
EVENT_ALT_VERY_LOW_VALVE_PRESS,
EVENT_ALT_LOOSE_FLASH_POINTER,
EVENT_ALT_FIO2_OFFSET,
EVENT_ALT_O2_FLOW_OFFSET,
EVENT_ALT_O2_PRESSURE_OFFSET,
RESERVED_253,
RESERVED_254,
End_Anomalie};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Control.h"
enum e_DB_CONTROL {
VENTIL_AUTHORIZATION_U16,
CURRENT_MODE_U16,
CHANGE_MODE_U16,
VENTIL_STATE_U16,
SIMV_CYCLES_U16,
CALIB_PATIENT_PRESS_REQ_U16,
CALIB_FLOW_INSP_REQ_U16,
CALIB_FLOW_EXH_REQ_U16,
CALIB_VALVE_PRESS_REQ_U16,
CALIB_FAS_VALVE_REQ_U16,
INHIBITED_BUZZER_U16,
INHIBITION_AUTHORIZATION_U16,
CANCELLED_ALARM_U16,
BUZZER_CMD_U16,
CALIB_ADJUST_CMD_U16,
SETUP_CONTROL_SET_POINT_U16,
SETUP_CONTROL_TYPE_U16,
SUPPLY_AC_DC_BAT_U16,
DISPLAY_BATTERY_U16,
CURRENT_PATIENT_COUNTER_HOUR_U16,
CURRENT_PATIENT_COUNTER_MIN_U16,
CURRENT_MACHINE_COUNTER_HOUR_U16,
CURRENT_MACHINE_COUNTER_MIN_U16,
CONTROL_BUZZER_U16,
VALVE_DETECTED_U16,
AC_SELECTED_U16,
DC_SELECTED_U16,
REMOTE_STATE_U16,
PROXI_DETECTED_U16,
ALARM_DETECTED_U16,
NEW_ALARM_HP_DETECTED_U16,
Start_Limit_Setting,
LIMIT_LOW_PIP_U16,
LIMIT_HIGH_PIP_U16,
LIMIT_PEEP_U16,
LIMIT_VOL_CONTROL_U16,
LIMIT_TI_CONTROL_U16,
LIMIT_CONTROL_R_U16,
LIMIT_PI_U16,
LIMIT_LOW_VTI_U16,
LIMIT_HIGH_VTI_U16,
LIMIT_LOW_VTE_U16,
LIMIT_HIGH_VTE_U16,
LIMIT_P_SUPPORT_U16,
LIMIT_TI_MIN_U16,
LIMIT_TI_MAX_U16,
LIMIT_SPO2_MINI_U16,
LIMIT_SPO2_MAXI_U16,
LIMIT_INSP_SENS_U16,
LIMIT_SIGH_U16,
LIMIT_TARGET_VT_U16,
LIMIT_APNEA_U16,
LIMIT_HIGH_FIO2,
LIMIT_LOW_FIO2,
LIMIT_SPO2,
LIMIT_BACKUP_R_U16,
LIMIT_PMAX_U16,
End_Limit_Setting,
UNCANCEL_CMD_U16,
SUPPLY_BUS_FAILURE_U16,
KEYBOARD_ANOMALIE_U16,
VALIDATION_BIP_U16,
BIP_RUNNING_U16,
MAINTENANCE_MODE_U16,
CALIBRATION_MODE_U16,
TEST_BUZ_CARD_U16,
TEST_BUZ_SEC_U16,
TEST_VOLUME_U16,
CANCEL_ALARM_ASKED,
KEY_EVENT_U16,
BACKLIGHT_OFF_U16,
HIGH_PRESSURE_LED_REMINDER_U16,
RECORD_SETTINGS_USB_U16,
APPLY_SETTINGS_USB_U16,
ERASE_KEY_USB_U16,
RECORD_TIME_TENDANCE_U16,
ERROR_SPO2_SENSOR_DETECTED,
DETECTED_FIO2_SENSOR,
CALIBRATED_FIO2_SENSOR,
CALIB_ADJUST_VANNE_FIO2_CMD,
CALIB_FIO2_REQ_U16,
CALIB_FLOW_O2_REQ_U16,
MEMO_CMD_VANNE_FIO2_TO_CALIB,
CALIB_PRESS_O2_REQ_U16,
FLOW_SAT_FLAG_U16,
HIGH_PRESSURE_DETECTED_U16,
HIGH_PRESSURE_EXHALATION_DETECTED_U16,
HIGH_PRESSURE_FILTER_WINDOW_U16,
FIO2_100_ACTIVE,
LOAD_USB_SETTINGS_U16,
COM_READY_U16,
START_MONITORING_U16,
SIMV_PSV_CYCLE_U16,
BLOC_EXPI_DETECTED_U16,
ADJUSTMENT_IN_PROGRESS_U16,
VALVE_DETECT_IN_PROGRESS_U16,
EXHAL_FLOW_USE_U16,
FLAT_INT_U16,
FLAT_PROXI_U16,
VALVE_O2_CMD_U16,
CPAP_TRIG_I_U16,
CPAP_TRIG_E_U16,
CONTROLER_TYPE_U16,
VTI_DISPLAY_DELAY_U16,
VOLUNTARY_STOP_U16,
SIMV_CONTROLLED_INSP_U16,
END_OF_OPERATION_U16,
CIRCUIT_CHECK_MODE_U16,
end_of_db_control_table};
#line 129 "..\\..\\SRC\\GENERAL\\Structure.h"
enum e_StorageType {
FULL,
MSB,
LSB,
STORAGE_CONSTANT};
#line 34 "..\\..\\SRC\\DATABASE\\DB_Config.h"
enum e_DB_CONFIG {
ADJUST_LANGUAGE_U16,
ADJUST_MODE_U16,
ADJUST_KEYLOCK_U16,
VENTIL_REQ_U16,
OFFSET_INSP_FLOW_1_U16,
OFFSET_INSP_FLOW_2_U16,
OFFSET_INSP_FLOW_3_U16,
OFFSET_INSP_FLOW_4_U16,
OFFSET_INSP_FLOW_5_U16,
OFFSET_INSP_FLOW_6_U16,
OFFSET_INSP_FLOW_7_U16,
OFFSET_INSP_FLOW_8_U16,
OFFSET_EXH_FLOW_1_U16,
OFFSET_EXH_FLOW_2_U16,
OFFSET_EXH_FLOW_3_U16,
OFFSET_EXH_FLOW_4_U16,
OFFSET_EXH_FLOW_5_U16,
OFFSET_EXH_FLOW_6_U16,
OFFSET_EXH_FLOW_7_U16,
OFFSET_EXH_FLOW_8_U16,
OFFSET_O2_FLOW_1,
OFFSET_O2_FLOW_2,
OFFSET_O2_FLOW_3,
OFFSET_O2_FLOW_4,
OFFSET_O2_FLOW_5,
OFFSET_O2_FLOW_6,
OFFSET_O2_FLOW_7,
OFFSET_PATIENT_PRESS_1_U16,
OFFSET_PATIENT_PRESS_2_U16,
OFFSET_PATIENT_PROX_PRESS_1_U16,
OFFSET_PATIENT_PROX_PRESS_2_U16,
OFFSET_PRESS_O2,
I_VALVE_REF_U16,
OFFSET_FAS_VALVE_1_U16,
OFFSET_FAS_VALVE_2_U16,
OFFSET_FAS_VALVE_3_U16,
OFFSET_FAS_VALVE_4_U16,
OFFSET_FAS_VALVE_5_U16,
OFFSET_FAS_VALVE_6_U16,
OFFSET_FAS_VALVE_7_U16,
OFFSET_FAS_VALVE_8_U16,
OFFSET_FAS_VALVE_9_U16,
OFFSET_VALVE_PRESS_U16,
OFFSET_VALVE_PRESS_2_U16,
OFFSET_FIO2,
ADJUST_BRIGHTNESS_U16,
ADJUST_BACKLIGHT_U16,

SAVED_PATIENT_COUNTER_HOUR_U16,

SAVED_PATIENT_COUNTER_MIN_U16,

SAVED_MACHINE_COUNTER_HOUR_U16,

SAVED_MACHINE_COUNTER_MIN_U16,

RETRIEVAL_EVENT_ADRESS_MSB_U16,

RETRIEVAL_EVENT_ADRESS_LSB_U16,

FLASH_MONIT_WRITE_BLOCK_U16,

FLASH_MONIT_WRITE_PAGE_U16,

FLASH_MONIT_WRITE_COLUMN_U16,

FLASH_TREND_WRITE_BLOCK_U16,

FLASH_TREND_WRITE_PAGE_U16,

FLASH_TREND_WRITE_COLUMN_U16,

FLASH_FIRST_PARTITION_FULL_U16,

FLASH_SECOND_PARTITION_FULL_U16,

SPEED_COM_U16,
RAZ_COUNTER_PAT_DATE_U16,
RAZ_COUNTER_PAT_MONTH_U16,
RAZ_COUNTER_PAT_YEAR_U16,
RAZ_COUNTER_PAT_HOUR_U16,
RAZ_COUNTER_PAT_MIN_U16,
BAD_ERASE_U16,
SOUND_LEVEL_SELECT_U16,
PREVIOUS_SOUND_LEVEL_SELECT_U16,
CURVE_DISPLAY_TYPE_MODE_U16,
CURVE_MAX_PRESSURE_U16,
CURVE_MAX_FLOW_U16,
CURVE_MAX_VT_U16,
CURVE_MAX_TIME_U16,
CURVE_DRAW_MODE_U16,
ADJUST_CYCLING_MODE_U16,
ADJUST_KEY_TONE_U16,
ADJUST_WAVEFORM_DISPLAY_U16,
ADJUST_BAROMETRIC_CORRECTOR_U16,
ADJUST_FIO2,
ADJUST_FIO2_SELECT,
ADJUST_LOW_FIO2,
ADJUST_HIGH_FIO2,
ADJUST_LOW_SPO2,
ADJUST_HIGH_SPO2,
SPO2_LOW_SELECT,
SPO2_HIGH_SELECT,
FIO2_LOW_SELECT,
FIO2_HIGH_SELECT,
PRESSURE_UNIT_U16,
TRIGG_E_POSITIVE,
APNEA_ALARM_ACTIVATION,
FLASH_MEMORY_MANUFACTURER,
FLASH_MEMORY_DEVICE,
FLASH_MEMORY_FIVE_ADDRESS_CYCLES,
PARAM_COMPATIBILITY,
IHM_LOCKED_FRAME_ID,
ADJUST_PEDIATRIC_CIRCUIT_U16,
PREVIOUS_MODE_U16,
PRESSURE_SUPPORT_RELATIVE_U16,
PRESSURE_SUPPORT_CHANGED_U16,
VOLUNTARY_STOP_ALARM_ACTIVATION,
SOUND_TYPE_SELECT_U16,
end_of_db_config_table};
#line 28 "..\\..\\SRC\\DATABASE\\DB_Rtc.h"
enum e_DB_RTC {
DB_RTC_SECOND_U16,
DB_RTC_MINUTE_U16,
DB_RTC_HOUR_U16,
DB_RTC_DAY_U16,
DB_RTC_MONTH_U16,
DB_RTC_YEAR_U16,
ADJUST_RTC_REQ_U16,
ADJUST_RTC_SECOND_U16,
ADJUST_RTC_MINUTE_U16,
ADJUST_RTC_HOUR_U16,
ADJUST_RTC_DAY_U16,
ADJUST_RTC_MONTH_U16,
ADJUST_RTC_YEAR_U16,
end_of_db_rtc_table};
#line 37 "..\\..\\SRC\\DATABASE\\DB_Current.h"
enum e_DB_ADJUST_CURRENT {
ADJUST_VOL_CONTROL_U16,
ADJUST_P_CONTROL_U16,
ADJUST_PEEP_U16,
ADJUST_P_SUPPORT_U16,
ADJUST_RAMP_U16,
ADJUST_CONTROL_R_U16,
ADJUST_BACKUP_R_U16,
ADJUST_HIGH_R_U16,
HIGH_R_NO_SELECT_U16,
ADJUST_TI_CONTROL_U16,
ADJUST_INSP_SENS_U16,
INSP_SENS_NO_SELECT_U16,
ADJUST_EXH_SENS_U16,
AUTO_EXH_SENS_SELECT_U16,
ADJUST_APNEA_U16,
AUTO_APNEA_SELECT_U16,
ADJUST_LOW_PIP_U16,
ADJUST_HIGH_PIP_U16,
ADJUST_LOW_VTE_U16,
LOW_VTE_NO_SELECT_U16,
ADJUST_HIGH_VTE_U16,
HIGH_VTE_NO_SELECT_U16,
ADJUST_RISE_TIME_U16,
ADJUST_LOW_VM_U16,
LOW_VM_NO_SELECT_U16,
ADJUST_HIGH_VM_U16,
HIGH_VM_NO_SELECT_U16,
ADJUST_LOW_VTI_U16,
LOW_VTI_NO_SELECT_U16,
ADJUST_HIGH_VTI_U16,
HIGH_VTI_NO_SELECT_U16,
ADJUST_TI_MIN_U16,
TI_MIN_AUTO_SELECT_U16,
ADJUST_TI_MAX_U16,
TI_MAX_AUTO_SELECT_U16,
PI_SET_POINT_U16,
BACKUP_R_NO_SELECT_U16,
P_SUPPORT_NO_SELECT_U16,
CONTROL_R_NO_SELECT_U16,
PEEP_NO_SELECT_U16,
RISE_TIME_U16,
ADJUST_HIGH_LEAK_U16,
HIGH_LEAK_SELECT_U16,
CURRENT_USED_43_U16,
CURRENT_USED_44_U16,
CURRENT_USED_45_U16,
ADJUST_TARGET_VT_U16,
TARGET_VT_SELECT_U16,
ADJUST_MAX_PRESSURE_U16,
ADJUST_EXH_SENS_NEGATIVE_U16,
AUTO_EXH_SENS_NEG_SELECT_U16,
ADJUST_SIGH_SELECT_U16,
ADJUST_SIGH_CPT_U16,
ADJUST_SIGH_VT_COEF_U16,
ADJUST_DISCONNECTION_DELAY_U16,
DISCONNECTION_DELAY_AUTO_U16,
end_of_adjust_table};
#line 35 "..\\..\\SRC\\DATABASE\\DB_Compute.h"
enum e_DB_COMPUTE {
MEASURE_VALVE_PRESSURE_S16,
FILTER_VALVE_PRESSURE_S16,
MEASURE_INTERNAL_PRESSURE_S16,
FILTER_INTERNAL_PRESSURE_S16,
MEASURE_PATIENT_PRESSURE_PROXI_S16,
FILTER_PATIENT_PRESSURE_PROXI_S16,
MEASURE_PATIENT_PRESSURE_S16,
FILTER_PATIENT_PRESSURE_S16,
MEASURE_QINSP_S16,
FILTER_QI_S16,
FILTER_QI_LOW_S16,
MEASURE_QEXH_S16,
FILTER_QE_S16,
COMPUTED_VTE_U16,
COMPUTED_VTE_INSP_U16,
COMPUTED_PIP_U16,
COMPUTED_PEEP_U16,
COMPUTED_FIO2,
MEASURE_FIO2,
MEASURE_IE_NUMERATOR_U16,
MEASURE_IE_DENOMINATOR_U16,
MEASURE_TI_U16,
MEASURE_TI_HMI_U16,
MEASURE_TE_U16,
MEASURE_R_U16,
MEASURE_SPEED_BLOWER_U16,
FILTER_SPEED_BLOWER_S16,
COMPUTED_BATTERY_LEVEL_U16,
MEASURE_SUPPLY_5V_U16,
MEASURE_SUPPLY_24V_U16,
MEASURE_TEST_BUZZER_VOLTAGE_U16,
MEASURE_BUZZER_VOLTAGE_U16,
MEASURE_BATTERY_BUZZER_VOLTAGE_U16,
MEASURE_PFI_VOLTAGE_U16,
COMPUTED_PI_SET_POINT_U16,
COMPUTED_VTI_EXH_S16,
MEASURE_SPO2_U16,
MEASURE_HR_U16,
COMPUTED_LEAK_U16,
COMPUTED_LEAK_HMI_U16,
CURVE_CORRECTED_VT_WOB_U16,
CURVE_CORRECTED_FLOW_S16,
COMPUTED_TEMP_S16,
COMPUTED_VTI_U16,
COMPUTED_USED_44_U16,
COMPUTED_USED_45_U16,
MEASURE_BATTERY_VOLTAGE_U16,
COMPUTED_VMI_U16,
COMPUTED_VME_U16,
AVERAGE_PRESSURE_U16,
MEASURE_ABSOLUTE_PRESSURE_U16,
MEASURE_BLOWER_TEMPERATURE_S16,
COMPUTED_RISE_TIME_U16,
MEASURE_IT_U16,
MEASURE_BATTERY_CAPACITY_U16,
COMPUTED_PULSE_U16,
COMPUTE_CORRECTED_Q,
COMPUTED_TI_CONTROL_U16,
FILTER_QO2_S16,
FILTER_PRESSURE_O2_S16,
MEASURE_PRESSURE_O2_S16,
MEASURE_QO2_S16,
COMPUTED_IE_NUMERATOR_U16,
COMPUTED_IE_DENOMINATOR_U16,
COMPUTE_QEE_S16,
COMPUTED_I_T_U16,
MEAS_ABS_PRESS_MMHG_U16,
COMPUTED_RATE_U16,
BLOWER_COMMAND_U16,
MEASURE_ZERO_VALUE_U16,
COMPUTED_P_VALVE_MAX_U16,
CUMUL_PRESS_INSP_S16,
ESTIMATED_PROXIMAL_PRESSURE_S16,
MEASURE_QINSP_LEAKCORRECTED_S16,
MEASURE_VALVE_CURRENT_U16,
MEAN_INSP_VALVE_CURRENT_U16,
VALVE_COMMAND_INIT_U16,
VALVE_COMMAND_MIN_U16,
VALVE_COMMAND_MAX_U16,
VALVE_COMMAND_COEFF_U16,
VALVE_COMMAND_U16,
LPF_PATIENT_PRESSURE_S16,
COMPUTED_LPF_PIP_U16,
LEAK_TEST_QI_S16,
LEAK_TEST_RESULT_U16,
end_of_db_compute_table}; struct __T50280064 { short d; short i; void (*f)();};
#line 33 "..\\..\\SRC\\GENERAL\\typedef.h"
typedef int e_BOOL;
#line 63
typedef unsigned char UBYTE;
typedef unsigned UWORD16;


typedef signed int SWORD16;
typedef signed long SWORD32;
#line 104 "..\\..\\SRC\\GENERAL\\enum.h"
typedef enum e_SYMBOL e_SYMBOL;
#line 391
typedef enum e_TYPE_OF_DB_TARGET e_TYPE_OF_DB_TARGET;
#line 417
typedef enum e_MODE_TYPES e_MODE_TYPES;
#line 557
typedef enum e_VentilState e_VentilState;
#line 39 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
struct MenuObject {
#line 45
e_TYPE_OF_DB_TARGET DbTarget;

UWORD16 IdParam; struct __T50280064 *__vptr;};
#line 41 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
struct DisplayObject { struct MenuObject __b_MenuObject;
#line 47
struct DisplayObject *Parent;


UWORD16 Line;


UWORD16 Col;


UWORD16 Page;

e_BOOL Visible;

e_BOOL RefreshE;};
#line 57 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
typedef enum ePANIC_MODULE ePANIC_MODULE;
#line 39 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
struct FieldObject { struct DisplayObject __b_DisplayObject;
#line 47
UWORD16 Font;

e_BOOL ReverseVideo;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueField.hpp"
struct ValueField { struct FieldObject __b_FieldObject;
#line 41
UWORD16 Value; UWORD16 NbDigit; UWORD16 Divider;

e_BOOL DisplayZero; e_BOOL Float; e_BOOL SignValue;
#line 51
e_BOOL ChildBackgroundEqualParent;

e_BOOL IEDisplay;};
#line 34 "..\\..\\SRC\\HMI\\HMI_TextField.hpp"
struct TextField { struct FieldObject __b_FieldObject;
#line 41
UBYTE *Text;};
#line 34 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
struct GraphicBox { struct DisplayObject __b_DisplayObject;
#line 42
UWORD16 Height;


UWORD16 Width;

e_BOOL FloodBlack;
e_BOOL RoundHigh;
e_BOOL RoundLow;};
#line 34 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
struct SymbolField { struct FieldObject __b_FieldObject;
#line 40
e_SYMBOL Symbol;

e_BOOL BarredSymbol;};
#line 40 "..\\..\\SRC\\HMI\\HMI_MessageDialog.hpp"
struct MessageDialog { struct DisplayObject __b_DisplayObject;
#line 46
struct TextField FLine1;
e_BOOL Line1Centered;

struct TextField FLine2;
e_BOOL Line2Centered;

struct TextField FLine3;
e_BOOL Line3Centered;

struct SymbolField FSymbol;

struct GraphicBox MonitorBox;

UBYTE TextLine[3][33];

e_BOOL Line1Ok; e_BOOL Line2Ok; e_BOOL Line3Ok; e_BOOL SymbolOk;

UWORD16 WBox;};
#line 46 "..\\..\\SRC\\HMI\\HMI_Loupe.hpp"
typedef enum DataType DataType;

struct Loupe { struct DisplayObject __b_DisplayObject;



struct TextField FValueS;

struct ValueField FValueI;

e_BOOL StringValue;
e_BOOL HaveText;

DataType Dtype;
#line 68
struct MessageDialog Message;

struct GraphicBox MonitorBox;};
#line 36 "..\\..\\SRC\\HMI\\HMI_LoupeAlarm.hpp"
struct LoupeAlarm { struct Loupe __b_Loupe;};
#line 37 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
struct Label { struct DisplayObject __b_DisplayObject;
#line 44
e_SYMBOL PreviousIcon;

UBYTE **Name;

struct Loupe *LoupeObject;

struct SymbolField FIcon;

struct TextField FLabel;

e_BOOL Centered;};
#line 34 "..\\..\\SRC\\HMI\\HMI_EditableObject.hpp"
struct EditableObject { struct Label __b_Label;
#line 42
UWORD16 ValueTemp;


UWORD16 IdFlagTemp;


UWORD16 ValueFlagTemp;

e_TYPE_OF_DB_TARGET DbIdFlagTemp;};
#line 34 "..\\..\\SRC\\HMI\\HMI_ValueTextField.hpp"
struct ValueTextField { struct ValueField __b_ValueField;
#line 41
UBYTE *Text;

e_BOOL IsString;};
#line 39 "..\\..\\SRC\\HMI\\HMI_LabelOneValue.hpp"
struct LabelOneValue { struct EditableObject __b_EditableObject;
#line 46
struct TextField FUnit1;
struct TextField FSep;

struct ValueTextField FValue1;

e_BOOL LabelOnly;
e_BOOL ValueIsString;
e_BOOL StopMonitoring;

UBYTE **NameUnit;

UWORD16 Divider;

e_BOOL NbDigitsChanged;
e_BOOL InitNbDigits;

e_BOOL MaxDisplayValueConfigured;
UWORD16 MaxDisplayValue;};
#line 45 "..\\..\\SRC\\HMI\\HMI_MonitoringObject.hpp"
struct MonitoringObject { struct DisplayObject __b_DisplayObject;
#line 52
UBYTE **Name;

UBYTE **Unit;


UWORD16 DivisionFactorOfValue;

e_BOOL Trigger;

e_BOOL ReverseVideo;

e_BOOL CenteredDisplay;

e_BOOL IconIsPrefered;

e_BOOL ValueReady;

e_BOOL StopMonitoring;

e_BOOL TextHeaderOn;

e_BOOL FloatDisplayOn;

e_BOOL MaxDisplayValueConfigured;

UWORD16 MaxDisplayValue;

e_BOOL SignedValue;
#line 90
e_SYMBOL Icon; e_SYMBOL IconInverseVideo;

struct SymbolField FIcon;

struct SymbolField FTrig;

struct TextField TFTitle;

struct TextField TFUnit;

struct ValueTextField VTFValue;};
#line 212 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
struct tInfoNodeForMode {
UWORD16 Visible;
UWORD16 Order;};
typedef struct tInfoNodeForMode tInfoNodeForMode;
#line 231
struct tInfo {
struct DisplayObject *pObject;
tInfoNodeForMode InfoByMode[6];};
typedef struct tInfo tInfo;
#line 272
typedef enum e_OBJECT e_OBJECT;
#line 41 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
struct VFrame { struct DisplayObject __b_DisplayObject;
#line 48
struct LoupeAlarm LoupeA;

struct Loupe *LoupeObject; struct Loupe LoupeV;

e_BOOL MonitorOn;
e_BOOL MessageOn;
e_BOOL ImpactDisplay;

tInfo *InfoTablePtr;
UWORD16 MaxObjects;
UWORD16 SpaceHeight;
UWORD16 SpaceFirstLine;};
#line 36 "..\\..\\SRC\\HMI\\HMI_MonitoringObjectTwoValue.hpp"
struct MonitoringObjectTwoValue { struct MonitoringObject __b_MonitoringObject;
#line 43
struct ValueTextField VTFValue2;

struct TextField TFSep;

UWORD16 IdParam2;

UWORD16 Value2;

e_TYPE_OF_DB_TARGET DbTarget2;

e_BOOL FloatDisplayOn2;

e_BOOL MaxDisplayValue2Configured;

UWORD16 MaxDisplayValue2;};
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphTitle.hpp"
struct GraphTitle { struct DisplayObject __b_DisplayObject;
#line 42
struct TextField TFMode;

UBYTE **NameMode1;
UBYTE **NameMode2;

e_BOOL NameMode2Display;};
#line 39 "..\\..\\SRC\\HMI\\HMI_DataBaseLink.hpp"
struct DataBaseLink {
#line 46
UWORD16 IdParam;

e_TYPE_OF_DB_TARGET DbTarget;};
#line 36 "..\\..\\SRC\\HMI\\HMI_Scale.hpp"
typedef enum TOrientation TOrientation;

typedef enum TSide TSide;



struct Scale { struct FieldObject __b_FieldObject;
#line 48
TOrientation Orientation;

SWORD32 Width; SWORD32 Heigth; SWORD32 MajorTickSpacing; SWORD32 ZeroPos; SWORD32 FirstX;

SWORD32 Min; SWORD32 Max;

SWORD32 Pas;

e_BOOL TickVisible;
e_BOOL DoubleTick;
e_BOOL NumberVisible;
e_BOOL AutoScale;
e_BOOL Symetric;
e_BOOL FirstRefresh;

TSide NumberSide;

struct DataBaseLink DBMax;};
#line 39 "..\\..\\SRC\\HMI\\HMI_VPoint.hpp"
struct VPoint {
#line 46
SWORD16 X;

SWORD16 Y;};
#line 39 "..\\..\\SRC\\HMI\\HMI_Pen.hpp"
struct Pen {
#line 50
UWORD16 LocalCounter;


e_BOOL Dotted;


e_BOOL DottedState;};
#line 38 "..\\..\\SRC\\HMI\\HMI_CurveData.hpp"
struct CurveData {
#line 44
struct VPoint CurrentPoint;

struct VPoint PreviousPoint;

struct Scale *Ex;

struct Scale *Ey;

struct Pen LocalPen;

struct DataBaseLink DBx;

struct DataBaseLink DBy;


SWORD16 MaxX;


SWORD16 MaxY;


SWORD16 MinX;


SWORD16 MinY;

e_BOOL JustReset;
e_BOOL OutOfLimitDis;
e_BOOL CurveStart;};
#line 49 "..\\..\\SRC\\HMI\\HMI_Graph.hpp"
struct Graph { struct GraphicBox __b_GraphicBox;




struct Scale ScaleX; struct Scale ScaleY;



struct CurveData *CurveTable[1];

struct GraphControl *GControl;

struct TextField LabelX; struct TextField LabelY; struct TextField LabelOOL;

e_BOOL Freezed; e_BOOL OutOfLimit;

UWORD16 CurveNumber;

UBYTE **TUnit1;
UBYTE **TUnit2;
UBYTE **TOutOfLimit;};
#line 35 "..\\..\\SRC\\HMI\\HMI_GraphControl.hpp"
struct GraphControl {
#line 41
struct Graph *GraphTarget; struct __T50280064 *__vptr;};
#line 34 "..\\..\\SRC\\HMI\\HMI_PerformanceGraphControl.hpp"
struct PerformanceGraphControl { struct GraphControl __b_GraphControl;
#line 40
UWORD16 RefreshTime;

UWORD16 CurrentTime;};
#line 35 "..\\..\\SRC\\HMI\\HMI_WobGraphControl.hpp"
struct WobGraphControl { struct GraphControl __b_GraphControl;
#line 42
e_VentilState VentilState;};
#line 34 "..\\..\\SRC\\HMI\\HMI_LabelTwoValue.hpp"
struct LabelTwoValue { struct LabelOneValue __b_LabelOneValue;
#line 43
struct TextField FUnit2;

struct ValueTextField FValue2;

UBYTE **NameUnit2;

UWORD16 ValueState;
UWORD16 IdParam2;
UWORD16 Divider2;

e_TYPE_OF_DB_TARGET DbTarget2;

e_BOOL ColAdjust;

e_BOOL MaxDisplayValue2Configured;
UWORD16 MaxDisplayValue2;};
#line 38 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
struct BatteryObject { struct DisplayObject __b_DisplayObject;
#line 44
struct LabelOneValue LOVPercent;

struct LabelTwoValue LTVJauge;

struct SymbolField SFEqual;

e_BOOL JaugeAvailable;
e_BOOL BusFailure;
e_BOOL UnknownBattery;
e_BOOL CheckSupply;
e_BOOL CheckBattery;
e_BOOL ForcedDisplay;

UWORD16 CurrentDisplay;};
#line 56 "..\\..\\SRC\\HMI\\HMI_FrameGraph.hpp"
struct tCurvInfo {
struct CurveData *Curv;
struct Scale *ScaleX;
struct Scale *ScaleY;
UWORD16 IdParamY;
e_TYPE_OF_DB_TARGET IdDbY;
e_BOOL Dotted;};
typedef struct tCurvInfo tCurvInfo;

struct FrameGraph { struct VFrame __b_VFrame;
#line 73
struct BatteryObject BOBat;
struct SymbolField SFValve;

struct SymbolField SFPause;

struct Label LGraph;

struct GraphTitle GTMode;

struct Graph GSmallFlow;
struct Graph GSmallPressure;
struct Graph GSmallFlowV;
struct Graph GSmallPressureV;


struct PerformanceGraphControl PGCSmallFlow;
struct PerformanceGraphControl PGCSmallPressure;

struct CurveData CDFlow;
struct CurveData CDPressure;
struct CurveData CDFlowV;
struct CurveData CDPressureV;

struct WobGraphControl WGCSmallFlowV;
struct WobGraphControl WGCSmallPressureV;

struct MonitoringObject MoSpO2;
struct MonitoringObject MoFiO2;
struct MonitoringObject MoRate;
struct MonitoringObjectTwoValue MoTVIE;
struct MonitoringObject MoIT;
struct MonitoringObject MoVmi;
struct MonitoringObject MoFuite;
struct MonitoringObject MoVti;
struct MonitoringObject MoVte;
struct MonitoringObject MoPe;
struct MonitoringObject MoPip;
struct MonitoringObject MoPulse;
struct MonitoringObject MoTi;
struct MonitoringObject MoTe;

e_MODE_TYPES Mode;
e_MODE_TYPES PreviousMode;

e_BOOL ModeChange;

e_BOOL TriggerOn;
e_BOOL Freezed;
e_BOOL IESelected;
e_BOOL ValveDetected;
e_BOOL FiO2Enabled;
e_BOOL SpO2Enabled;
e_BOOL ExhalFlowUsed;

e_BOOL BlocExpiDetected;

e_BOOL FirstInitOk;

struct DisplayObject *RefreshTable[23];

struct SymbolField InhibAlarm; struct SymbolField CancelAlarm; struct SymbolField InhibApneaAlarm;}; extern void *__nw__FUi(unsigned);
#line 65 "..\\..\\SRC\\HMI\\HMI_MenuObject.hpp"
extern void InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(struct MenuObject *const, UWORD16, e_TYPE_OF_DB_TARGET);
#line 73
extern void Lock__10MenuObjectFi(struct MenuObject *const, e_BOOL);
extern void WinFocus__10MenuObjectFv(struct MenuObject *const);
extern void LoseFocus__10MenuObjectFv(struct MenuObject *const);
extern void StartModifMode__10MenuObjectFv(struct MenuObject *const);
extern void StopModifMode__10MenuObjectFv(struct MenuObject *const);
extern void CancelModifMode__10MenuObjectFv(struct MenuObject *const);
extern void IncreaseValue__10MenuObjectFv(struct MenuObject *const);
extern void DecreaseValue__10MenuObjectFv(struct MenuObject *const);
extern void ModifNextValue__10MenuObjectFv(struct MenuObject *const);
#line 83 "..\\..\\SRC\\HMI\\HMI_DisplayObject.hpp"
extern void SetLine__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetLine__13DisplayObjectFv(struct DisplayObject *const);

extern void SetCol__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetCol__13DisplayObjectFv(struct DisplayObject *const);


extern UWORD16 GetPage__13DisplayObjectFv(struct DisplayObject *const);

extern UWORD16 GetFullValue__13DisplayObjectFv(struct DisplayObject *const);

extern void SetParent__13DisplayObjectFP13DisplayObject(struct DisplayObject *const, struct DisplayObject *);



extern void SetVisible__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void SetForcedVisible__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);


extern e_BOOL IsVisible__13DisplayObjectFv(struct DisplayObject *const);
extern e_BOOL IsRefreshObject__13DisplayObjectFv(struct DisplayObject *const);


extern void Refresh__13DisplayObjectFv(struct DisplayObject *const);


extern void Blink__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);


extern void FreezeMonitoringMode__13DisplayObjectFv(struct DisplayObject *const);

extern void FreezeMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void StartMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void StopMonitoringModeImpactDisplay__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern void SetLanguage__13DisplayObjectFUi(struct DisplayObject *const, UWORD16);
extern UWORD16 GetLanguage__13DisplayObjectFv(struct DisplayObject *const);
extern void SetEndOfInit__13DisplayObjectFi(struct DisplayObject *const, e_BOOL);
extern e_BOOL GetEndOfInit__13DisplayObjectFv(struct DisplayObject *const);

extern UBYTE *GetName__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetStringValue1__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetStringValue2__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetUnit1__13DisplayObjectFv(struct DisplayObject *const);
extern UBYTE *GetUnit2__13DisplayObjectFv(struct DisplayObject *const);
#line 83 "..\\..\\SRC\\HMI\\HMI_Tools.hpp"
extern void Panic__5ToolsSF13ePANIC_MODULE(ePANIC_MODULE);
#line 73 "..\\..\\SRC\\HMI\\HMI_FieldObject.hpp"
extern UWORD16 GetFont__11FieldObjectFv(struct FieldObject *const);
#line 76 "..\\..\\SRC\\HMI\\HMI_GraphicBox.hpp"
extern UWORD16 GetHeight__10GraphicBoxFv(struct GraphicBox *const);


extern UWORD16 GetWidth__10GraphicBoxFv(struct GraphicBox *const);
#line 58 "..\\..\\SRC\\HMI\\HMI_SymbolField.hpp"
extern struct SymbolField *__ct__11SymbolFieldFv(struct SymbolField *const);



extern void Init__11SymbolFieldFUiN21i8e_SYMBOL(struct SymbolField *const, UWORD16, UWORD16, UWORD16, e_BOOL, e_SYMBOL);
#line 71
extern void SetBarredSymbol__11SymbolFieldFi(struct SymbolField *const, e_BOOL);
#line 72 "..\\..\\SRC\\HMI\\HMI_Label.hpp"
extern struct Label *__ct__5LabelFv(struct Label *const);
#line 116 "..\\..\\SRC\\HMI\\HMI_MonitoringObject.hpp"
extern struct MonitoringObject *__ct__16MonitoringObjectFv(struct MonitoringObject *const);

extern void Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26(struct MonitoringObject *const, e_SYMBOL, UWORD16, UWORD16, UBYTE **, UWORD16, e_BOOL, UBYTE **, e_BOOL, e_BOOL);
#line 128
extern void SetNameUnit__16MonitoringObjectFPPUc(struct MonitoringObject *const, UBYTE **);



extern void SetMaxDisplayValue__16MonitoringObjectFUi(struct MonitoringObject *const, UWORD16);
#line 138
extern void HideTrigger__16MonitoringObjectFv(struct MonitoringObject *const);
#line 158
extern void SetDivisionFactorOfValue__16MonitoringObjectFUi(struct MonitoringObject *const, UWORD16);


extern void SetTrigger__16MonitoringObjectFi(struct MonitoringObject *const, e_BOOL);
#line 167
extern void SetCenteredDisplay__16MonitoringObjectFi(struct MonitoringObject *const, e_BOOL);
#line 75 "..\\..\\SRC\\HMI\\HMI_VFrame.hpp"
extern struct VFrame *__ct__6VFrameFv(struct VFrame *const);



extern void SetMessageOn__6VFrameFi(struct VFrame *const, e_BOOL);
extern e_BOOL IsMessageOn__6VFrameFv(struct VFrame *const);

extern void SetImpactDisplay__6VFrameFi(struct VFrame *const, e_BOOL);
extern e_BOOL GetImpactDisplay__6VFrameFv(struct VFrame *const);



extern void SetMonitorOn__6VFrameFi(struct VFrame *const, e_BOOL);

extern e_BOOL IsMonitorOn__6VFrameFv(struct VFrame *const);

extern void Show__6VFrameFv(struct VFrame *const);
extern void Hide__6VFrameFv(struct VFrame *const);
extern void ShowLoupe__6VFrameFv(struct VFrame *const);
extern void HideLoupe__6VFrameFv(struct VFrame *const);

extern struct Loupe *GetLoupeObject__6VFrameFv(struct VFrame *const);


extern void ShowMonitoring__6VFrameFv(struct VFrame *const);
extern void HideMonitoring__6VFrameFv(struct VFrame *const);

extern void SetInfoTable__6VFrameFP5tInfoUiN22(struct VFrame *const, tInfo *, UWORD16, UWORD16, UWORD16);
#line 108
extern e_BOOL CheckInfoTable__6VFrameFv(struct VFrame *const);
extern tInfo *GetPtrFromOrder__6VFrameFUi12e_MODE_TYPES(struct VFrame *const, UWORD16, e_MODE_TYPES);
extern UWORD16 GetOrderFromPtr__6VFrameFP5tInfo12e_MODE_TYPES(struct VFrame *const, tInfo *, e_MODE_TYPES);
extern void SwitchDisplayConfigForOneMode__6VFrameF8e_OBJECTT112e_MODE_TYPES(struct VFrame *const, e_OBJECT, e_OBJECT, e_MODE_TYPES);


extern void SwitchDisplayConfigForAllModes__6VFrameF8e_OBJECTT1(struct VFrame *const, e_OBJECT, e_OBJECT);


extern void ObjectsShow__6VFrameF12e_MODE_TYPES(struct VFrame *const, e_MODE_TYPES);

extern void ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(struct VFrame *const, e_MODE_TYPES, e_OBJECT);


extern void ObjectsRefreshLanguage__6VFrameF12e_MODE_TYPES(struct VFrame *const, e_MODE_TYPES);
extern void ObjectsStopMonitoringMode__6VFrameFv(struct VFrame *const);
extern void ObjectsStartMonitoringMode__6VFrameFv(struct VFrame *const);
#line 79 "..\\..\\SRC\\HMI\\HMI_MonitoringObjectTwoValue.hpp"
extern struct MonitoringObjectTwoValue *__ct__24MonitoringObjectTwoValueFv(struct MonitoringObjectTwoValue *const);

extern void Init__24MonitoringObjectTwoValueF8e_SYMBOLUiT2PPUcT2iT2T6T4N26(struct MonitoringObjectTwoValue *const, e_SYMBOL, UWORD16, UWORD16, UBYTE **, UWORD16, e_BOOL, UWORD16, e_BOOL, UBYTE **, e_BOOL, e_BOOL);
#line 93
extern void InitDbAccess2__24MonitoringObjectTwoValueFUi19e_TYPE_OF_DB_TARGET(struct MonitoringObjectTwoValue *const, UWORD16, e_TYPE_OF_DB_TARGET);
#line 102
extern void SetMaxDisplayValue2__24MonitoringObjectTwoValueFUi(struct MonitoringObjectTwoValue *const, UWORD16);
#line 68 "..\\..\\SRC\\HMI\\HMI_GraphTitle.hpp"
extern struct GraphTitle *__ct__10GraphTitleFv(struct GraphTitle *const);

extern void Init__10GraphTitleFUiT1PPUcN23(struct GraphTitle *const, UWORD16, UWORD16, UBYTE **, UBYTE **, UBYTE **);
#line 84
extern void SetNameMode2Display__10GraphTitleFi(struct GraphTitle *const, e_BOOL);
#line 96 "..\\..\\SRC\\HMI\\HMI_Scale.hpp"
extern void InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET(struct Scale *const, UWORD16, e_TYPE_OF_DB_TARGET);
extern UWORD16 GetIdMax__5ScaleFv(struct Scale *const);
extern e_TYPE_OF_DB_TARGET GetDbMax__5ScaleFv(struct Scale *const);



extern void SetSymetric__5ScaleFi(struct Scale *const, e_BOOL);
extern e_BOOL GetSymetric__5ScaleFv(struct Scale *const);

extern UWORD16 GetZeroPos__5ScaleFv(struct Scale *const);
extern SWORD32 GetMin__5ScaleFv(struct Scale *const);
extern SWORD32 GetMax__5ScaleFv(struct Scale *const);




extern SWORD32 GetMajorTickSpacing__5ScaleFv(struct Scale *const);
#line 76 "..\\..\\SRC\\HMI\\HMI_Pen.hpp"
extern void SetDotted__3PenFi(struct Pen *const, e_BOOL);
extern e_BOOL IsDotted__3PenFv(struct Pen *const);
#line 90 "..\\..\\SRC\\HMI\\HMI_CurveData.hpp"
extern struct Scale *GetScaleX__9CurveDataFv(struct CurveData *const);
extern struct Scale *GetScaleY__9CurveDataFv(struct CurveData *const);

extern void SetScale__9CurveDataFP5ScaleT1(struct CurveData *const, struct Scale *, struct Scale *);


extern void Init__9CurveDataFP5ScaleT1(struct CurveData *const, struct Scale *, struct Scale *);

extern UWORD16 GetIdParamY__9CurveDataFv(struct CurveData *const);
extern e_TYPE_OF_DB_TARGET GetDbTargetY__9CurveDataFv(struct CurveData *const);

extern void InitDbAccess__9CurveDataFUi19e_TYPE_OF_DB_TARGET(struct CurveData *const, UWORD16, e_TYPE_OF_DB_TARGET);


extern void InitDbAccess__9CurveDataFUi19e_TYPE_OF_DB_TARGETT1T2(struct CurveData *const, UWORD16, e_TYPE_OF_DB_TARGET, UWORD16, e_TYPE_OF_DB_TARGET);
#line 119
extern struct CurveData *__ct__9CurveDataFv(struct CurveData *const);
extern void Construct__9CurveDataFv(struct CurveData *const);


extern struct Pen *GetPen__9CurveDataFv(struct CurveData *const);
#line 89 "..\\..\\SRC\\HMI\\HMI_Graph.hpp"
extern struct Graph *__ct__5GraphFv(struct Graph *const);

extern void Construct__5GraphFv(struct Graph *const);

extern void Init__5GraphFUiN31iT5N21N25N31PPUcPPUcPPUc(struct Graph *const, UWORD16, UWORD16, UWORD16, UWORD16, SWORD16, SWORD16, UWORD16, UWORD16, SWORD16, SWORD16, UWORD16, UWORD16, UWORD16, UBYTE **, UBYTE **, UBYTE **);
#line 110
extern struct Scale *GetScaleX__5GraphFv(struct Graph *const);
extern struct Scale *GetScaleY__5GraphFv(struct Graph *const);
#line 120
extern struct CurveData **GetCurveTable__5GraphFv(struct Graph *const);
extern void SetGControl__5GraphFP12GraphControl(struct Graph *const, struct GraphControl *);


extern UWORD16 GetCurveNumber__5GraphFv(struct Graph *const);




extern void SetTUnit2__5GraphFPPUc(struct Graph *const, UBYTE **);
#line 135
extern UBYTE **GetTUnit1Ptr__5GraphFv(struct Graph *const);
extern UBYTE **GetTUnit2Ptr__5GraphFv(struct Graph *const);
extern UBYTE **GetTOutOfLimitPtr__5GraphFv(struct Graph *const);


extern struct GraphControl *GetGControl__5GraphFv(struct Graph *const);
extern void AddCurve__5GraphFP9CurveData(struct Graph *const, struct CurveData *);




extern void FreezeGraph__5GraphFi(struct Graph *const, e_BOOL);
#line 58 "..\\..\\SRC\\HMI\\HMI_PerformanceGraphControl.hpp"
extern struct PerformanceGraphControl *__ct__23PerformanceGraphControlFv(struct PerformanceGraphControl *const);
#line 67 "..\\..\\SRC\\HMI\\HMI_DatabaseAccess.hpp"
extern e_BOOL ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET(UWORD16 *, UWORD16, e_TYPE_OF_DB_TARGET);
#line 83
extern UWORD16 GetMin__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(UWORD16, e_TYPE_OF_DB_TARGET);


extern UWORD16 GetMax__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(UWORD16, e_TYPE_OF_DB_TARGET);
#line 58 "..\\..\\SRC\\HMI\\HMI_WobGraphControl.hpp"
extern struct WobGraphControl *__ct__15WobGraphControlFv(struct WobGraphControl *const);

extern void Init__15WobGraphControlFv(struct WobGraphControl *const);
#line 73 "..\\..\\SRC\\HMI\\HMI_BatteryObject.hpp"
extern struct BatteryObject *__ct__13BatteryObjectFv(struct BatteryObject *const);

extern void Init__13BatteryObjectFUiT1(struct BatteryObject *const, UWORD16, UWORD16);
#line 79 "..\\..\\SRC\\HMI\\HMI_FrameGraph.cpp"
extern e_BOOL GetModeChange__10FrameGraphFv(struct FrameGraph *const);




extern void SetModeChange__10FrameGraphFi(struct FrameGraph *const, e_BOOL);




extern e_MODE_TYPES GetPreviousMode__10FrameGraphFv(struct FrameGraph *const);




extern void SetPreviousMode__10FrameGraphF12e_MODE_TYPES(struct FrameGraph *const, e_MODE_TYPES);
#line 693
extern void InitInfoGraphTable__10FrameGraphFv(struct FrameGraph *const);
#line 1650
extern void GraphReInit__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 1864
extern void GraphRefresh__10FrameGraphFv(struct FrameGraph *const);
#line 1973
extern void HideInhibApneaAlarm__10FrameGraphFv(struct FrameGraph *const);
#line 1948
extern void ShowInhibApneaAlarm__10FrameGraphFv(struct FrameGraph *const);
#line 50
extern struct FrameGraph *__ct__10FrameGraphFv(struct FrameGraph *);
#line 126
extern void init__10FrameGraphFv(struct FrameGraph *const);
#line 933
extern void SetMode__10FrameGraphF12e_MODE_TYPES(struct FrameGraph *const, e_MODE_TYPES);
#line 1184
extern void ShowTrigger__10FrameGraphFv(struct FrameGraph *const);
#line 1210
extern void HideTrigger__10FrameGraphFv(struct FrameGraph *const);
#line 1236
extern void FreezeMonitoring__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 1299
extern void RefreshMode__10FrameGraphFv(struct FrameGraph *const);
#line 1354
extern void IsBatVisible__10FrameGraphFv(struct FrameGraph *const);
#line 1385
extern void IsInibAlarmVisible__10FrameGraphFv(struct FrameGraph *const);
#line 1415
extern void IsCancelAlarmVisible__10FrameGraphFv(struct FrameGraph *const);
#line 1445
extern void IsInhibApneaAlarmVisible__10FrameGraphFv(struct FrameGraph *const);
#line 1115
extern void StopMonitoringMode__10FrameGraphFv(struct FrameGraph *const);
#line 1168
extern void StartMonitoringMode__10FrameGraphFv(struct FrameGraph *const);
#line 1139
extern void StartMonitoringModeImpactDisp__10FrameGraphFiN21(struct FrameGraph *const, e_BOOL, e_BOOL, e_BOOL);
#line 985
extern void Show__10FrameGraphFv(struct FrameGraph *const);
#line 1073
extern void Hide__10FrameGraphFv(struct FrameGraph *const);
#line 1090
extern void RefreshLanguage__10FrameGraphFv(struct FrameGraph *const);
#line 74
extern struct DisplayObject **GetRefreshTable__10FrameGraphFv(struct FrameGraph *const);
#line 960
extern void SetIESelected__10FrameGraphFi(struct FrameGraph *const, e_BOOL);
#line 1475
extern void SetValve__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 99
extern void SetBlocExpi__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 106
extern e_BOOL IsBlocExpiDetected__10FrameGraphFv(struct FrameGraph *const);
#line 1555
extern void Fio2MonitorEnabled__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 1578
extern void Spo2MonitorEnabled__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 1600
extern void SetPressureUnit__10FrameGraphFPPUc(struct FrameGraph *const, UBYTE **);
#line 1635
extern void SetNameMode2Display__10FrameGraphFi(struct FrameGraph *const, e_BOOL);
#line 910
extern void ObjectsFreezeMonitoringMode__10FrameGraphFv(struct FrameGraph *const);
#line 744
extern void RebuildFrameTree__10FrameGraphF12e_MODE_TYPES(struct FrameGraph *const, e_MODE_TYPES);
#line 817
extern void ObjectsHide__10FrameGraphF12e_MODE_TYPES(struct FrameGraph *const, e_MODE_TYPES);
#line 842
extern void ObjectsHide__10FrameGraphF12e_MODE_TYPES8e_OBJECT(struct FrameGraph *const, e_MODE_TYPES, e_OBJECT);
#line 864
extern void ObjectsStartMonitoringModeImpactDisplay__10FrameGraphFi(struct FrameGraph *const, e_BOOL);
#line 1918
extern void SetExhalFlowUsed__10FrameGraphFiT1(struct FrameGraph *const, e_BOOL, e_BOOL);
#line 77 "..\\..\\SRC\\HMI\\HMI_InterfaceCppC.hpp"
extern void DisplayCross__13InterfaceCppCSFUiN51(UWORD16, UWORD16, UWORD16, UWORD16, UWORD16, UWORD16);
#line 117
extern void EraseZone__13InterfaceCppCSFUiN51(UWORD16, UWORD16, UWORD16, UWORD16, UWORD16, UWORD16);
#line 293 "..\\..\\SRC\\HMI\\HMI_Config.hpp"
extern tInfo InfoGraph[15];
extern const tInfo cInfoGraph[15];
#line 336 "..\\..\\SRC\\HMI\\HMI_Message.hpp"
extern const UBYTE *const huge cMSG_Mode[6][19];
#line 342
extern const UBYTE *const huge cMSG_Mode2[6][19];
#line 348
extern const UBYTE *const huge cMSG_Mode3[6][19];
#line 378
extern const UBYTE *const huge cMSG_IERation[19];
extern const UBYTE *const huge cMSG_ITRation[19];
extern const UBYTE *const huge cMSG_TiMon[19];
extern const UBYTE *const huge cMSG_TeMon[19];
extern const UBYTE *const huge cMSG_Pulse[19];



extern const UBYTE *const huge cMSG_FiO2[19];



extern const UBYTE *const huge cMSG_InsuflationPressurePeakMon[19];
extern const UBYTE *const huge cMSG_Vti[19];
extern const UBYTE *const huge cMSG_Vte[19];

extern const UBYTE *const huge cMSG_RateMon[19];


extern const UBYTE *const huge cMSG_FuiteMon[19];

extern const UBYTE *const huge cMSG_SpO2[19];
#line 418
extern const UBYTE *const huge cMSG_ExhalationPressureMon[19];
#line 458
extern const UBYTE *const huge cMSG_Vmi[19];
extern const UBYTE *const huge cMSG_OutOfLimit[19];


extern const UBYTE *const huge cMSG_PressureUnit[3][19];


extern const UBYTE *const huge cMSG_VolumeUnit[19];
extern const UBYTE *const huge cMSG_VolumeLiterUnit[19];
extern const UBYTE *const huge cMSG_PerCentUnit[19];
extern const UBYTE *const huge cMSG_FlowUnit[19];

extern const UBYTE *const huge cMSG_FrequencyUnit[19];
#line 479
extern const UBYTE *const huge cMSG_SecondUnit[19];
#line 495
extern const UBYTE *const huge cMSG_Colon[19]; extern struct __T50280064 __vtbl__10FrameGraph[53]; struct __T50280064 __vtbl__10FrameGraph[53] = {{((short)0),((short)0),((void (*)())0)},{((short)0),((short)0),((void (*)())Lock__10MenuObjectFi)},{((short)0),((short)0),((void (*)())
#line 495
WinFocus__10MenuObjectFv)},{((short)0),((short)0),((void (*)())LoseFocus__10MenuObjectFv)},{((short)0),((short)0),((void (*)())StartModifMode__10MenuObjectFv)},{((short)0),((short)0),((void (*)())StopModifMode__10MenuObjectFv)},{((short)0),((short)0),((void (*)())CancelModifMode__10MenuObjectFv)},{(
#line 495
(short)0),((short)0),((void (*)())IncreaseValue__10MenuObjectFv)},{((short)0),((short)0),((void (*)())DecreaseValue__10MenuObjectFv)},{((short)0),((short)0),((void (*)())ModifNextValue__10MenuObjectFv)},{((short)0),((short)0),((void (*)())SetLine__13DisplayObjectFUi)},{((short)0),((short)0),((void (
#line 495
*)())SetCol__13DisplayObjectFUi)},{((short)0),((short)0),((void (*)())GetFullValue__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())SetVisible__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())SetForcedVisible__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())
#line 495
Refresh__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())Show__10FrameGraphFv)},{((short)0),((short)0),((void (*)())Hide__10FrameGraphFv)},{((short)0),((short)0),((void (*)())Blink__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())RefreshLanguage__10FrameGraphFv)},{((short)0),((short)0
#line 495
),((void (*)())StopMonitoringMode__10FrameGraphFv)},{((short)0),((short)0),((void (*)())FreezeMonitoringMode__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())StartMonitoringMode__10FrameGraphFv)},{((short)0),((short)0),((void (*)())FreezeMonitoringModeImpactDisplay__13DisplayObjectFi)},{((
#line 495
short)0),((short)0),((void (*)())StartMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())StopMonitoringModeImpactDisplay__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())SetLanguage__13DisplayObjectFUi)},{((short)0),((short)0),((void (*)())
#line 495
GetLanguage__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())SetEndOfInit__13DisplayObjectFi)},{((short)0),((short)0),((void (*)())GetEndOfInit__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetName__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())
#line 495
GetStringValue1__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetStringValue2__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetUnit1__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())GetUnit2__13DisplayObjectFv)},{((short)0),((short)0),((void (*)())
#line 495
GetRefreshTable__10FrameGraphFv)},{((short)0),((short)0),((void (*)())SetMessageOn__6VFrameFi)},{((short)0),((short)0),((void (*)())IsMessageOn__6VFrameFv)},{((short)0),((short)0),((void (*)())SetImpactDisplay__6VFrameFi)},{((short)0),((short)0),((void (*)())GetImpactDisplay__6VFrameFv)},{((short)0)
#line 495
,((short)0),((void (*)())SetMonitorOn__6VFrameFi)},{((short)0),((short)0),((void (*)())IsMonitorOn__6VFrameFv)},{((short)0),((short)0),((void (*)())ShowLoupe__6VFrameFv)},{((short)0),((short)0),((void (*)())HideLoupe__6VFrameFv)},{((short)0),((short)0),((void (*)())GetLoupeObject__6VFrameFv)},{((
#line 495
short)0),((short)0),((void (*)())SetMode__10FrameGraphF12e_MODE_TYPES)},{((short)0),((short)0),((void (*)())ShowMonitoring__6VFrameFv)},{((short)0),((short)0),((void (*)())HideMonitoring__6VFrameFv)},{((short)0),((short)0),((void (*)())RebuildFrameTree__10FrameGraphF12e_MODE_TYPES)},{((short)0),((
#line 495
short)0),((void (*)())ObjectsHide__10FrameGraphF12e_MODE_TYPES)},{((short)0),((short)0),((void (*)())ObjectsHide__10FrameGraphF12e_MODE_TYPES8e_OBJECT)},{((short)0),((short)0),((void (*)())ObjectsStartMonitoringMode__6VFrameFv)},{((short)0),((short)0),((void (*)())
#line 495
StartMonitoringModeImpactDisp__10FrameGraphFiN21)}};
#line 79 "..\\..\\SRC\\HMI\\HMI_FrameGraph.cpp"
e_BOOL GetModeChange__10FrameGraphFv( struct FrameGraph *const this)
{
return (this->ModeChange);
}

void SetModeChange__10FrameGraphFi( struct FrameGraph *const this,  e_BOOL _ModeChange)
{
(this->ModeChange) = _ModeChange; return;
}

e_MODE_TYPES GetPreviousMode__10FrameGraphFv( struct FrameGraph *const this)
{
return (this->PreviousMode);
}

void SetPreviousMode__10FrameGraphF12e_MODE_TYPES( struct FrameGraph *const this,  e_MODE_TYPES _PreviousMode)
{
(this->PreviousMode) = _PreviousMode; return;
}
#line 693
void InitInfoGraphTable__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50430368;
auto UWORD16 i; auto UWORD16 j;


for (i = 0U; (i < 15U); i++)
{
for (j = 0U; (j < 6U); j++)
{
((((tInfoNodeForMode *)(&(InfoGraph[i]).InfoByMode))[j]).Visible) = (((((const tInfoNodeForMode *)((const tInfoNodeForMode ( *)[6])&(cInfoGraph[i]).InfoByMode))[j]).Visible));
((((tInfoNodeForMode *)(&(InfoGraph[i]).InfoByMode))[j]).Order) = (((((const tInfoNodeForMode *)((const tInfoNodeForMode ( *)[6])&(cInfoGraph[i]).InfoByMode))[j]).Order));
}
}

((InfoGraph[OBJECT_GRAPH_MOFIO2]).pObject) = ((struct DisplayObject *)(&this->MoFiO2));
((InfoGraph[OBJECT_GRAPH_MOSPO2]).pObject) = ((struct DisplayObject *)(&this->MoSpO2));
((InfoGraph[OBJECT_GRAPH_MOPULSE]).pObject) = ((struct DisplayObject *)(&this->MoPulse));
((InfoGraph[OBJECT_GRAPH_MOIE]).pObject) = ((struct DisplayObject *)((struct MonitoringObject *)(&this->MoTVIE)));
((InfoGraph[OBJECT_GRAPH_MOIT]).pObject) = ((struct DisplayObject *)(&this->MoIT));
((InfoGraph[OBJECT_GRAPH_MOFR]).pObject) = ((struct DisplayObject *)(&this->MoRate));
((InfoGraph[OBJECT_GRAPH_MOVM]).pObject) = ((struct DisplayObject *)(&this->MoVmi));
((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject) = ((struct DisplayObject *)(&this->MoVte));
((InfoGraph[OBJECT_GRAPH_MOVTI]).pObject) = ((struct DisplayObject *)(&this->MoVti));
((InfoGraph[OBJECT_GRAPH_MOPE]).pObject) = ((struct DisplayObject *)(&this->MoPe));
((InfoGraph[OBJECT_GRAPH_MOPI]).pObject) = ((struct DisplayObject *)(&this->MoPip));
((InfoGraph[OBJECT_GRAPH_MOFUITE]).pObject) = ((struct DisplayObject *)(&this->MoFuite));
((InfoGraph[OBJECT_GRAPH_MOTE]).pObject) = ((struct DisplayObject *)(&this->MoTe));
((InfoGraph[OBJECT_GRAPH_MOTI]).pObject) = ((struct DisplayObject *)(&this->MoTi));
((InfoGraph[OBJECT_GRAPH_OBJECT_MAX]).pObject) = ((struct DisplayObject *)0);

SetInfoTable__6VFrameFP5tInfoUiN22(((struct VFrame *)this), InfoGraph, 14U, 0U, 0U);
#line 729
if (!(CheckInfoTable__6VFrameFv(((struct VFrame *)this)))) {
Panic__5ToolsSF13ePANIC_MODULE(PANIC_MODULE_GRAPH); }

(__T50430368 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50430368->f)))(((struct FrameGraph *)(((char *)this) + ((__T50430368->d)))), ((this->Mode)))); return;
}
#line 1650
void GraphReInit__10FrameGraphFiT1( struct FrameGraph *const this,  e_BOOL _PositiveCurves,  e_BOOL _DisplayFlag)
{
auto struct Graph *_GraphPtr;
auto struct Graph *_GraphTable[4];
auto UWORD16 i; auto UWORD16 cpt;
#line 1662
auto UWORD16 _Line; auto UWORD16 _Col; auto UWORD16 _Height; auto UWORD16 _Width;

auto SWORD16 _MinX; auto SWORD16 _MaxX;
auto UWORD16 _ZeroPosX; auto UWORD16 _MajorTickSpacingX;

auto SWORD16 _MinY; auto SWORD16 _MaxY;
auto UWORD16 _ZeroPosY; auto UWORD16 _MajorTickSpacingY;

auto UWORD16 _Font;
auto UBYTE **_Unit1;
auto UBYTE **_Unit2;
auto UBYTE **_OutOfLimit;
auto UWORD16 _IdMaxX; auto UWORD16 _IdMaxY;
auto e_TYPE_OF_DB_TARGET _DbMaxX; auto e_TYPE_OF_DB_TARGET _DbMaxY;

auto struct GraphControl *_GraphControlPtr;
auto UWORD16 _GraphControlRefreshTime;

auto tCurvInfo _CurveInfoTable[5];
#line 1687
auto struct CurveData **_CurveTable;
auto UWORD16 _CurveNumber;

auto e_BOOL _Symetric;
#line 1657
i = 0U;
(((struct Graph **)_GraphTable)[i++]) = (&this->GSmallFlow);
(((struct Graph **)_GraphTable)[i++]) = (&this->GSmallPressure);
(((struct Graph **)_GraphTable)[i]) = ((struct Graph *)0);
#line 1680
_CurveInfoTable[0].Curv = ((struct CurveData *)0); _CurveInfoTable[0].ScaleX = ((struct Scale *)0); _CurveInfoTable[0].ScaleY = ((struct Scale *)0); _CurveInfoTable[0].IdParamY = 0U; _CurveInfoTable[0].IdDbY = ((e_TYPE_OF_DB_TARGET)0); _CurveInfoTable[0].Dotted = 0; _CurveInfoTable[1].Curv = ((
#line 1680
struct CurveData *)0); _CurveInfoTable[1].ScaleX = ((struct Scale *)0); _CurveInfoTable[1].ScaleY = ((struct Scale *)0); _CurveInfoTable[1].IdParamY = 0U; _CurveInfoTable[1].IdDbY = ((e_TYPE_OF_DB_TARGET)0); _CurveInfoTable[1].Dotted = 0; _CurveInfoTable[2].Curv = ((struct CurveData *)0); _CurveInfoTable
#line 1680
[2].ScaleX = ((struct Scale *)0); _CurveInfoTable[2].ScaleY = ((struct Scale *)0); _CurveInfoTable[2].IdParamY = 0U; _CurveInfoTable[2].IdDbY = ((e_TYPE_OF_DB_TARGET)0); _CurveInfoTable[2].Dotted = 0; _CurveInfoTable[3].Curv = ((struct CurveData *)0); _CurveInfoTable[3].ScaleX = ((struct Scale *)0); _CurveInfoTable
#line 1680
[3].ScaleY = ((struct Scale *)0); _CurveInfoTable[3].IdParamY = 0U; _CurveInfoTable[3].IdDbY = ((e_TYPE_OF_DB_TARGET)0); _CurveInfoTable[3].Dotted = 0; _CurveInfoTable[4].Curv = ((struct CurveData *)0); _CurveInfoTable[4].ScaleX = ((struct Scale *)0); _CurveInfoTable[4].ScaleY = ((struct Scale *)0); _CurveInfoTable
#line 1680
[4].IdParamY = 0U; _CurveInfoTable[4].IdDbY = ((e_TYPE_OF_DB_TARGET)0); _CurveInfoTable[4].Dotted = 0;
#line 1692
cpt = 0U;
while ((((struct Graph **)_GraphTable)[cpt]) != ((struct Graph *)0))
{ auto struct __T50280064 *__T50604508; auto struct DisplayObject *__T50606836; auto struct DisplayObject *__T50607760; auto struct DisplayObject *__T50611072; auto struct DisplayObject *__T50611996;
#line 1774
auto e_BOOL _IsVisibleGraph;
auto e_BOOL _IsVisibleScaleX;
auto e_BOOL _IsVisibleScaleY;
#line 1696
_GraphPtr = (((struct Graph **)_GraphTable)[cpt]);

for (i = 0U; (i < 5U); i++)
{
((((tCurvInfo *)_CurveInfoTable)[i]).Curv) = ((struct CurveData *)0);
}




_Line = (GetLine__13DisplayObjectFv(((struct DisplayObject *)((struct GraphicBox *)_GraphPtr))));
_Col = (GetCol__13DisplayObjectFv(((struct DisplayObject *)((struct GraphicBox *)_GraphPtr))));
_Height = (GetHeight__10GraphicBoxFv(((struct GraphicBox *)_GraphPtr)));
_Width = (GetWidth__10GraphicBoxFv(((struct GraphicBox *)_GraphPtr)));
_MinX = ((SWORD16)(GetMin__5ScaleFv((GetScaleX__5GraphFv(_GraphPtr)))));
_MaxX = ((SWORD16)(GetMax__5ScaleFv((GetScaleX__5GraphFv(_GraphPtr)))));
_ZeroPosX = (GetZeroPos__5ScaleFv((GetScaleX__5GraphFv(_GraphPtr))));
_MajorTickSpacingX = ((UWORD16)(GetMajorTickSpacing__5ScaleFv((GetScaleX__5GraphFv(_GraphPtr)))));
_MinY = ((SWORD16)(GetMin__5ScaleFv((GetScaleY__5GraphFv(_GraphPtr)))));
_MaxY = ((SWORD16)(GetMax__5ScaleFv((GetScaleY__5GraphFv(_GraphPtr)))));
_ZeroPosY = (GetZeroPos__5ScaleFv((GetScaleY__5GraphFv(_GraphPtr))));
_MajorTickSpacingY = ((UWORD16)(GetMajorTickSpacing__5ScaleFv((GetScaleY__5GraphFv(_GraphPtr)))));
_Font = (GetFont__11FieldObjectFv(((struct FieldObject *)(GetScaleY__5GraphFv(_GraphPtr)))));
_Unit1 = (GetTUnit1Ptr__5GraphFv(_GraphPtr));
_Unit2 = (GetTUnit2Ptr__5GraphFv(_GraphPtr));
_OutOfLimit = (GetTOutOfLimitPtr__5GraphFv(_GraphPtr));
_IdMaxX = (GetIdMax__5ScaleFv((GetScaleX__5GraphFv(_GraphPtr))));
_DbMaxX = (GetDbMax__5ScaleFv((GetScaleX__5GraphFv(_GraphPtr))));
_IdMaxY = (GetIdMax__5ScaleFv((GetScaleY__5GraphFv(_GraphPtr))));
_DbMaxY = (GetDbMax__5ScaleFv((GetScaleY__5GraphFv(_GraphPtr))));
_Symetric = (GetSymetric__5ScaleFv((GetScaleY__5GraphFv(_GraphPtr))));


_GraphControlPtr = (GetGControl__5GraphFv(_GraphPtr));
_GraphControlRefreshTime = ((_GraphControlPtr != ((struct GraphControl *)0)) ? ((__T50604508 = (((_GraphControlPtr->__vptr)) + 4)) , (((UWORD16 (*)(struct GraphControl *const))((__T50604508->f)))(((struct GraphControl *)(((char *)_GraphControlPtr) + ((__T50604508->d))))))) : 0U);


_CurveTable = (GetCurveTable__5GraphFv(_GraphPtr));
_CurveNumber = (GetCurveNumber__5GraphFv(_GraphPtr));


if (_CurveTable != ((struct CurveData **)0))
{
for (i = 0U; (i < _CurveNumber); i++)
{
#line 1749
((((tCurvInfo *)_CurveInfoTable)[i]).Curv) = (_CurveTable[i]);
((((tCurvInfo *)_CurveInfoTable)[i]).ScaleX) = (GetScaleX__9CurveDataFv((_CurveTable[i])));
((((tCurvInfo *)_CurveInfoTable)[i]).ScaleY) = (GetScaleY__9CurveDataFv((_CurveTable[i])));
((((tCurvInfo *)_CurveInfoTable)[i]).IdParamY) = (GetIdParamY__9CurveDataFv((_CurveTable[i])));
((((tCurvInfo *)_CurveInfoTable)[i]).IdDbY) = (GetDbTargetY__9CurveDataFv((_CurveTable[i])));
((((tCurvInfo *)_CurveInfoTable)[i]).Dotted) = (IsDotted__3PenFv((GetPen__9CurveDataFv((_CurveTable[i])))));
}
}

if (_GraphPtr == (&this->GSmallFlow))
{

if (!(_PositiveCurves))
{
_ZeroPosY = 30U;
_Symetric = 1;
}

else  {
_ZeroPosY = 0U;
_Symetric = 0;
}
}


_IsVisibleGraph = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct GraphicBox *)_GraphPtr))));
_IsVisibleScaleX = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(GetScaleX__5GraphFv(_GraphPtr))))));
_IsVisibleScaleY = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(GetScaleY__5GraphFv(_GraphPtr))))));
(__T50604508 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)_GraphPtr)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50604508->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct GraphicBox *)_GraphPtr))) + ((__T50604508
#line 1777
->d)))), 0));
(__T50604508 = ((((*((struct MenuObject *)(__T50606836 = ((struct DisplayObject *)((struct FieldObject *)(GetScaleX__5GraphFv(_GraphPtr))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50604508->f)))(((struct DisplayObject *)(((char *)__T50606836) + ((__T50604508->d))))
#line 1778
, 0));
(__T50604508 = ((((*((struct MenuObject *)(__T50607760 = ((struct DisplayObject *)((struct FieldObject *)(GetScaleY__5GraphFv(_GraphPtr))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50604508->f)))(((struct DisplayObject *)(((char *)__T50607760) + ((__T50604508->d))))
#line 1779
, 0));
Construct__5GraphFv(_GraphPtr);
(__T50604508 = (((_GraphControlPtr->__vptr)) + 2)) , (((void (*)(struct GraphControl *const))((__T50604508->f)))(((struct GraphControl *)(((char *)_GraphControlPtr) + ((__T50604508->d))))));
i = 0U;
while (((((((tCurvInfo *)_CurveInfoTable)[i]).Curv)) != ((struct CurveData *)0)) && (i < 5U))
{
Construct__9CurveDataFv((((((tCurvInfo *)_CurveInfoTable)[i]).Curv)));
i++;
}


(__T50604508 = (((_GraphControlPtr->__vptr)) + 5)) , (((void (*)(struct GraphControl *const, UWORD16))((__T50604508->f)))(((struct GraphControl *)(((char *)_GraphControlPtr) + ((__T50604508->d)))), _GraphControlRefreshTime));


i = 0U;
while (((((((tCurvInfo *)_CurveInfoTable)[i]).Curv)) != ((struct CurveData *)0)) && (i < 5U))
{

Init__9CurveDataFP5ScaleT1((((((tCurvInfo *)_CurveInfoTable)[i]).Curv)), (((((tCurvInfo *)_CurveInfoTable)[i]).ScaleX)), (((((tCurvInfo *)_CurveInfoTable)[i]).ScaleY)));


InitDbAccess__9CurveDataFUi19e_TYPE_OF_DB_TARGET((((((tCurvInfo *)_CurveInfoTable)[i]).Curv)), (((((tCurvInfo *)_CurveInfoTable)[i]).IdParamY)), (((((tCurvInfo *)_CurveInfoTable)[i]).IdDbY)));


SetDotted__3PenFi((GetPen__9CurveDataFv((((((tCurvInfo *)_CurveInfoTable)[i]).Curv)))), (((((tCurvInfo *)_CurveInfoTable)[i]).Dotted)));

i++;
}

SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct GraphicBox *)_GraphPtr)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__5GraphFUiN31iT5N21N25N31PPUcPPUcPPUc(_GraphPtr, _Line, _Col, _Height, _Width, _MinX, _MaxX, _ZeroPosX, _MajorTickSpacingX, _MinY, _MaxY, _ZeroPosY, _MajorTickSpacingY, _Font, _Unit1, _Unit2, _OutOfLimit);
#line 1827
SetGControl__5GraphFP12GraphControl(_GraphPtr, _GraphControlPtr);


i = 0U;
while (((((((tCurvInfo *)_CurveInfoTable)[i]).Curv)) != ((struct CurveData *)0)) && (i < 5U))
{
AddCurve__5GraphFP9CurveData(_GraphPtr, (((((tCurvInfo *)_CurveInfoTable)[i]).Curv)));
i++;
}

InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleX__5GraphFv(_GraphPtr)), _IdMaxX, _DbMaxX);
InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleY__5GraphFv(_GraphPtr)), _IdMaxY, _DbMaxY);
SetSymetric__5ScaleFi((GetScaleY__5GraphFv(_GraphPtr)), _Symetric);


(__T50604508 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)_GraphPtr)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50604508->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct GraphicBox *)_GraphPtr))) + ((__T50604508
#line 1842
->d)))), _IsVisibleGraph));
(__T50604508 = ((((*((struct MenuObject *)(__T50611072 = ((struct DisplayObject *)((struct FieldObject *)(GetScaleX__5GraphFv(_GraphPtr))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50604508->f)))(((struct DisplayObject *)(((char *)__T50611072) + ((__T50604508->d))))
#line 1843
, _IsVisibleScaleX));
(__T50604508 = ((((*((struct MenuObject *)(__T50611996 = ((struct DisplayObject *)((struct FieldObject *)(GetScaleY__5GraphFv(_GraphPtr))))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50604508->f)))(((struct DisplayObject *)(((char *)__T50611996) + ((__T50604508->d))))
#line 1844
, _IsVisibleScaleY));

cpt++;
}


if (_DisplayFlag)
{
GraphRefresh__10FrameGraphFv(this);
} return;
}
#line 1864
void GraphRefresh__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50620680;
auto UWORD16 WobDisplayMode;
#line 1875
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&WobDisplayMode), 70U, CONFIG);



if (WobDisplayMode)
{ auto struct __T50280064 *__T50617064;
(__T50617064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50617064->f)))(((struct Graph *)(((char *)(&this->GSmallPressure)) + ((__T50617064->d))))));
(__T50617064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50617064->f)))(((struct Graph *)(((char *)(&this->GSmallFlow)) + ((__T50617064->d))))));
SetScale__9CurveDataFP5ScaleT1((&this->CDPressureV), (GetScaleX__5GraphFv((&this->GSmallPressureV))), (GetScaleY__5GraphFv((&this->GSmallPressureV))));


(__T50617064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50617064->f)))(((struct Graph *)(((char *)(&this->GSmallPressureV)) + ((__T50617064->d))))));
SetScale__9CurveDataFP5ScaleT1((&this->CDFlowV), (GetScaleX__5GraphFv((&this->GSmallFlowV))), (GetScaleY__5GraphFv((&this->GSmallFlowV))));


(__T50617064 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50617064->f)))(((struct Graph *)(((char *)(&this->GSmallFlowV)) + ((__T50617064->d))))));
}

else  {
(__T50620680 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50620680->f)))(((struct Graph *)(((char *)(&this->GSmallPressureV)) + ((__T50620680->d))))));
(__T50620680 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50620680->f)))(((struct Graph *)(((char *)(&this->GSmallFlowV)) + ((__T50620680->d))))));

SetScale__9CurveDataFP5ScaleT1((&this->CDPressure), (GetScaleX__5GraphFv((&this->GSmallPressure))), (GetScaleY__5GraphFv((&this->GSmallPressure))));


(__T50620680 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50620680->f)))(((struct Graph *)(((char *)(&this->GSmallPressure)) + ((__T50620680->d))))));
SetScale__9CurveDataFP5ScaleT1((&this->CDFlow), (GetScaleX__5GraphFv((&this->GSmallFlow))), (GetScaleY__5GraphFv((&this->GSmallFlow))));


(__T50620680 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50620680->f)))(((struct Graph *)(((char *)(&this->GSmallFlow)) + ((__T50620680->d))))));
} return;
}
#line 1973
void HideInhibApneaAlarm__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50635824;

(__T50635824 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T50635824->f)))(((struct SymbolField *)(((char *)(&this->InhibApneaAlarm)) + ((__T50635824->d)))))); return;


}
#line 1948
void ShowInhibApneaAlarm__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50634160;




(__T50634160 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T50634160->f)))(((struct SymbolField *)(((char *)(&this->InhibApneaAlarm)) + ((__T50634160->d))))));


DisplayCross__13InterfaceCppCSFUiN51((GetLine__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))), (GetCol__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))))), 17U, 16U, 1U, (GetPage__13DisplayObjectFv(((struct 
#line 1957
DisplayObject *)((struct VFrame *)this))))); return;
#line 1963
}
#line 50
struct FrameGraph *__ct__10FrameGraphFv( struct FrameGraph *this)
{  if ((this != ((struct FrameGraph *)0)) || ((this = ((struct FrameGraph *)(__nw__FUi(6620U)))) != ((struct FrameGraph *)0))) { __ct__6VFrameFv(((struct VFrame *)this)); ((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr) = __vtbl__10FrameGraph; 
#line 51
__ct__13BatteryObjectFv((&this->BOBat)); __ct__11SymbolFieldFv((&this->SFValve)); __ct__11SymbolFieldFv((&this->SFPause)); __ct__5LabelFv((&this->LGraph)); __ct__10GraphTitleFv((&this->GTMode)); __ct__5GraphFv((&this->GSmallFlow)); __ct__5GraphFv((&this->GSmallPressure)); __ct__5GraphFv((&this->
#line 51
GSmallFlowV)); __ct__5GraphFv((&this->GSmallPressureV)); __ct__23PerformanceGraphControlFv((&this->PGCSmallFlow)); __ct__23PerformanceGraphControlFv((&this->PGCSmallPressure)); __ct__9CurveDataFv((&this->CDFlow)); __ct__9CurveDataFv((&this->CDPressure)); __ct__9CurveDataFv((&this->CDFlowV)); 
#line 51
__ct__9CurveDataFv((&this->CDPressureV)); __ct__15WobGraphControlFv((&this->WGCSmallFlowV)); __ct__15WobGraphControlFv((&this->WGCSmallPressureV)); __ct__16MonitoringObjectFv((&this->MoSpO2)); __ct__16MonitoringObjectFv((&this->MoFiO2)); __ct__16MonitoringObjectFv((&this->MoRate)); 
#line 51
__ct__24MonitoringObjectTwoValueFv((&this->MoTVIE)); __ct__16MonitoringObjectFv((&this->MoIT)); __ct__16MonitoringObjectFv((&this->MoVmi)); __ct__16MonitoringObjectFv((&this->MoFuite)); __ct__16MonitoringObjectFv((&this->MoVti)); __ct__16MonitoringObjectFv((&this->MoVte)); __ct__16MonitoringObjectFv
#line 51
((&this->MoPe)); __ct__16MonitoringObjectFv((&this->MoPip)); __ct__16MonitoringObjectFv((&this->MoPulse)); __ct__16MonitoringObjectFv((&this->MoTi)); __ct__16MonitoringObjectFv((&this->MoTe)); __ct__11SymbolFieldFv((&this->InhibAlarm)); __ct__11SymbolFieldFv((&this->CancelAlarm)); 
#line 51
__ct__11SymbolFieldFv((&this->InhibApneaAlarm));
(this->Mode) = VOL;
(this->TriggerOn) = 0;
(this->Freezed) = 0;
(this->IESelected) = 1;
(this->ValveDetected) = 1;

(this->FiO2Enabled) = 0;
(this->SpO2Enabled) = 0;

(this->FirstInitOk) = 0;

SetModeChange__10FrameGraphFi(this, 0);

(this->BlocExpiDetected) = 1;

(this->Mode) = VOL;

(this->ExhalFlowUsed) = 0; } return this;
}
#line 126
void init__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50403704;

SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->InhibApneaAlarm))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->InhibApneaAlarm), 19U, 251U, 0U, 0, ALARM_TRIANGLE_BLACK_DOT);
#line 138
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->InhibAlarm), 19U, 274U, 0U, 0, BELL_BLACK);
#line 146
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->CancelAlarm), 19U, 297U, 0U, 0, ALARM_TRIANGLE_BLACK);
#line 154
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->BOBat)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__13BatteryObjectFUiT1((&this->BOBat), 15U, 161U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->SFValve), 15U, 231U, 0U, 0, VALVE_BLACK);
#line 167
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct FieldObject *)(&this->SFPause))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__11SymbolFieldFUiN21i8e_SYMBOL((&this->SFPause), 14U, 117U, 0U, 0, PAUSE);
#line 176
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->GTMode)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__10GraphTitleFUiT1PPUcN23((&this->GTMode), 1U, 1U, ((UBYTE **)cMSG_Mode), ((UBYTE **)cMSG_Mode2), ((UBYTE **)cMSG_Mode3));
#line 186
(__T50403704 = ((((*((struct GraphControl *)(&this->PGCSmallFlow))).__vptr)) + 5)) , (((void (*)(struct PerformanceGraphControl *const, UWORD16))((__T50403704->f)))(((struct PerformanceGraphControl *)(((char *)(&this->PGCSmallFlow)) + ((__T50403704->d)))), 160U));

Init__9CurveDataFP5ScaleT1((&this->CDFlow), (GetScaleX__5GraphFv((&this->GSmallFlow))), (GetScaleY__5GraphFv((&this->GSmallFlow))));


InitDbAccess__9CurveDataFUi19e_TYPE_OF_DB_TARGET((&this->CDFlow), 41U, COMPUTE);




SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__5GraphFUiN31iT5N21N25N31PPUcPPUcPPUc((&this->GSmallFlow), 196U, 1U, 84U, 266U, 0, 50, 0U, 44U, ((SWORD16)((GetMin__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(72U, CONFIG)) * 10U)), ((SWORD16)((GetMax__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(72U, CONFIG)) * 10U)), 30U, 15U, 2U, ((UBYTE **)
#line 198
cMSG_SecondUnit), ((UBYTE **)cMSG_FlowUnit), ((UBYTE **)cMSG_OutOfLimit));
#line 215
SetGControl__5GraphFP12GraphControl((&this->GSmallFlow), ((struct GraphControl *)(&this->PGCSmallFlow)));

AddCurve__5GraphFP9CurveData((&this->GSmallFlow), (&this->CDFlow));

InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleX__5GraphFv((&this->GSmallFlow))), 74U, CONFIG);
InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleY__5GraphFv((&this->GSmallFlow))), 72U, CONFIG);
SetSymetric__5ScaleFi((GetScaleY__5GraphFv((&this->GSmallFlow))), 1);



(__T50403704 = ((((*((struct GraphControl *)(&this->PGCSmallPressure))).__vptr)) + 5)) , (((void (*)(struct PerformanceGraphControl *const, UWORD16))((__T50403704->f)))(((struct PerformanceGraphControl *)(((char *)(&this->PGCSmallPressure)) + ((__T50403704->d)))), 160U));

Init__9CurveDataFP5ScaleT1((&this->CDPressure), (GetScaleX__5GraphFv((&this->GSmallPressure))), (GetScaleY__5GraphFv((&this->GSmallPressure))));


InitDbAccess__9CurveDataFUi19e_TYPE_OF_DB_TARGET((&this->CDPressure), 81U, COMPUTE);


SetDotted__3PenFi((GetPen__9CurveDataFv((&this->CDPressure))), 0);



SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__5GraphFUiN31iT5N21N25N31PPUcPPUcPPUc((&this->GSmallPressure), 112U, 1U, 84U, 266U, 0, 50, 0U, 44U, ((SWORD16)((GetMin__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(71U, CONFIG)) * 10U)), ((SWORD16)((GetMax__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(71U, CONFIG)) * 10U)), 0U, 15U, 2U, ((UBYTE **)
#line 239
cMSG_SecondUnit), ((UBYTE **)cMSG_PressureUnit), ((UBYTE **)cMSG_OutOfLimit));
#line 258
SetGControl__5GraphFP12GraphControl((&this->GSmallPressure), ((struct GraphControl *)(&this->PGCSmallPressure)));

AddCurve__5GraphFP9CurveData((&this->GSmallPressure), (&this->CDPressure));

InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleX__5GraphFv((&this->GSmallPressure))), 74U, CONFIG);
InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleY__5GraphFv((&this->GSmallPressure))), 71U, CONFIG);



Init__15WobGraphControlFv((&this->WGCSmallFlowV));
Init__9CurveDataFP5ScaleT1((&this->CDFlowV), (GetScaleX__5GraphFv((&this->GSmallFlowV))), (GetScaleY__5GraphFv((&this->GSmallFlowV))));


InitDbAccess__9CurveDataFUi19e_TYPE_OF_DB_TARGETT1T2((&this->CDFlowV), 40U, COMPUTE, 41U, COMPUTE);
#line 277
SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__5GraphFUiN31iT5N21N25N31PPUcPPUcPPUc((&this->GSmallFlowV), 197U, 1U, 84U, 266U, 0, 6000, 0U, 44U, ((SWORD16)((GetMin__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(72U, CONFIG)) * 10U)), ((SWORD16)((GetMax__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(72U, CONFIG)) * 10U)), 30U, 15U, 2U, ((UBYTE **)
#line 279
cMSG_VolumeUnit), ((UBYTE **)cMSG_FlowUnit), ((UBYTE **)cMSG_OutOfLimit));
#line 298
SetGControl__5GraphFP12GraphControl((&this->GSmallFlowV), ((struct GraphControl *)(&this->WGCSmallFlowV)));

AddCurve__5GraphFP9CurveData((&this->GSmallFlowV), (&this->CDFlowV));

InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleX__5GraphFv((&this->GSmallFlowV))), 73U, CONFIG);
InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleY__5GraphFv((&this->GSmallFlowV))), 72U, CONFIG);
SetSymetric__5ScaleFi((GetScaleY__5GraphFv((&this->GSmallFlowV))), 1);



Init__15WobGraphControlFv((&this->WGCSmallPressureV));

Init__9CurveDataFP5ScaleT1((&this->CDPressureV), (GetScaleX__5GraphFv((&this->GSmallPressureV))), (GetScaleY__5GraphFv((&this->GSmallPressureV))));


InitDbAccess__9CurveDataFUi19e_TYPE_OF_DB_TARGETT1T2((&this->CDPressureV), 40U, COMPUTE, 7U, COMPUTE);




SetDotted__3PenFi((GetPen__9CurveDataFv((&this->CDPressureV))), 0);



SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__5GraphFUiN31iT5N21N25N31PPUcPPUcPPUc((&this->GSmallPressureV), 112U, 1U, 84U, 266U, 0, 6000, 0U, 44U, ((SWORD16)((GetMin__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(71U, CONFIG)) * 10U)), ((SWORD16)((GetMax__14DataBaseAccessSFUi19e_TYPE_OF_DB_TARGET(71U, CONFIG)) * 10U)), 0U, 15U, 2U, ((UBYTE *
#line 324
*)cMSG_VolumeUnit), ((UBYTE **)cMSG_PressureUnit), ((UBYTE **)cMSG_OutOfLimit));
#line 343
SetGControl__5GraphFP12GraphControl((&this->GSmallPressureV), ((struct GraphControl *)(&this->WGCSmallPressureV)));

AddCurve__5GraphFP9CurveData((&this->GSmallPressureV), (&this->CDPressureV));

InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleX__5GraphFv((&this->GSmallPressureV))), 73U, CONFIG);
InitDbAccess__5ScaleFUi19e_TYPE_OF_DB_TARGET((GetScaleY__5GraphFv((&this->GSmallPressureV))), 71U, CONFIG);



SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoRate)), ((struct DisplayObject *)((struct VFrame *)this)));
Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoRate), NO, 196U, 108U, ((UBYTE **)cMSG_RateMon), 10U, 0, ((UBYTE **)cMSG_FrequencyUnit), 0, 1);
#line 363
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoRate))), 24U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoRate)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoRate)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoRate), 99U);



SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoFiO2)), ((struct DisplayObject *)((struct VFrame *)this)));
Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoFiO2), NO, 196U, 161U, ((UBYTE **)cMSG_FiO2), 10U, 0, ((UBYTE **)cMSG_PerCentUnit), 0, 1);
#line 383
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoFiO2))), 17U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoFiO2)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoFiO2)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoFiO2), 999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoSpO2)), ((struct DisplayObject *)((struct VFrame *)this)));
Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoSpO2), NO, 196U, 161U, ((UBYTE **)cMSG_SpO2), 10U, 1, ((UBYTE **)cMSG_PerCentUnit), 0, 1);
#line 402
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoSpO2))), 36U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoSpO2)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoSpO2)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoSpO2), 9999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoPulse)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoPulse), HEART_INVERSE_VIDEO, 108U, 267U, ((UBYTE **)cMSG_Pulse), 10U, 0, ((UBYTE **)cMSG_FrequencyUnit), 0, 1);
#line 422
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoPulse))), 55U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoPulse)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoPulse)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoPulse), 9999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoFuite)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoFuite), NO, 108U, 267U, ((UBYTE **)cMSG_FuiteMon), 10U, 0, ((UBYTE **)cMSG_FlowUnit), 0, 1);
#line 442
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoFuite))), 39U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoFuite)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoFuite)) + ((__T50403704->d)))), 1));
SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoFuite), 200U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)((struct MonitoringObject *)(&this->MoTVIE))), ((struct DisplayObject *)((struct VFrame *)this)));

Init__24MonitoringObjectTwoValueF8e_SYMBOLUiT2PPUcT2iT2T6T4N26((&this->MoTVIE), NO, 196U, 267U, ((UBYTE **)cMSG_IERation), 10U, 1, 10U, 1, ((UBYTE **)cMSG_Colon), 0, 1);
#line 463
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)((struct MonitoringObject *)(&this->MoTVIE)))), 19U, COMPUTE);


InitDbAccess2__24MonitoringObjectTwoValueFUi19e_TYPE_OF_DB_TARGET((&this->MoTVIE), 20U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct MonitoringObject *)(&this->MoTVIE))))).__vptr)) + 38)) , (((void (*)(struct MonitoringObjectTwoValue *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObjectTwoValue *)(((char *)(&this->MoTVIE)) + ((__T50403704->d)))), 1
#line 469
));

SetMaxDisplayValue__16MonitoringObjectFUi(((struct MonitoringObject *)(&this->MoTVIE)), 99U);
SetMaxDisplayValue2__24MonitoringObjectTwoValueFUi((&this->MoTVIE), 1990U);

SetCenteredDisplay__16MonitoringObjectFi(((struct MonitoringObject *)(&this->MoTVIE)), 0);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoIT)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoIT), NO, 152U, 267U, ((UBYTE **)cMSG_ITRation), 10U, 0, ((UBYTE **)cMSG_PerCentUnit), 0, 1);
#line 489
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoIT))), 53U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoIT)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoIT)) + ((__T50403704->d)))), 1));

SetTrigger__16MonitoringObjectFi((&this->MoIT), 1);

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoIT), 100U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoVmi)), ((struct DisplayObject *)((struct VFrame *)this)));
Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoVmi), NO, 196U, 2U, ((UBYTE **)cMSG_Vmi), 10U, 1, ((UBYTE **)cMSG_VolumeLiterUnit), 0, 1);
#line 510
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoVmi))), 47U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoVmi)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoVmi)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoVmi), 999U);



SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoVte)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoVte), NO, 152U, 267U, ((UBYTE **)cMSG_Vte), 10U, 0, ((UBYTE **)cMSG_VolumeUnit), 0, 1);
#line 531
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoVte))), 13U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoVte)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoVte)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoVte), 9999U);



SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoVti)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoVti), NO, 108U, 267U, ((UBYTE **)cMSG_Vti), 10U, 0, ((UBYTE **)cMSG_VolumeUnit), 0, 1);
#line 552
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoVti))), 43U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoVti)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoVti)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoVti), 9999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoPe)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoPe), NO, 64U, 267U, ((UBYTE **)cMSG_ExhalationPressureMon), 10U, 0, ((UBYTE **)cMSG_PressureUnit), 0, 1);
#line 572
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoPe))), 16U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoPe)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoPe)) + ((__T50403704->d)))), 1));

SetDivisionFactorOfValue__16MonitoringObjectFUi((&this->MoPe), 10U);

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoPe), 999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoPip)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoPip), NO, 20U, 267U, ((UBYTE **)cMSG_InsuflationPressurePeakMon), 10U, 0, ((UBYTE **)cMSG_PressureUnit), 0, 1);
#line 594
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoPip))), 82U, COMPUTE);


(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoPip)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoPip)) + ((__T50403704->d)))), 1));

SetDivisionFactorOfValue__16MonitoringObjectFUi((&this->MoPip), 10U);

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoPip), 999U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoTi)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoTi), NO, 20U, 267U, ((UBYTE **)cMSG_TiMon), 10U, 1, ((UBYTE **)cMSG_SecondUnit), 0, 1);
#line 617
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoTi))), 21U, COMPUTE);

(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoTi)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoTi)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoTi), 99U);


SetParent__13DisplayObjectFP13DisplayObject(((struct DisplayObject *)(&this->MoTe)), ((struct DisplayObject *)((struct VFrame *)this)));

Init__16MonitoringObjectF8e_SYMBOLUiT2PPUcT2iT4N26((&this->MoTe), NO, 20U, 267U, ((UBYTE **)cMSG_TeMon), 10U, 1, ((UBYTE **)cMSG_SecondUnit), 0, 1);
#line 637
InitDbAccess__10MenuObjectFUi19e_TYPE_OF_DB_TARGET(((struct MenuObject *)((struct DisplayObject *)(&this->MoTe))), 23U, COMPUTE);

(__T50403704 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoTe)))).__vptr)) + 38)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50403704->f)))(((struct MonitoringObject *)(((char *)(&this->MoTe)) + ((__T50403704->d)))), 1));

SetMaxDisplayValue__16MonitoringObjectFUi((&this->MoTe), 599U);



InitInfoGraphTable__10FrameGraphFv(this);



(((struct DisplayObject **)(&this->RefreshTable))[0]) = ((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow)));
(((struct DisplayObject **)(&this->RefreshTable))[1]) = ((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure)));
(((struct DisplayObject **)(&this->RefreshTable))[2]) = ((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV)));
(((struct DisplayObject **)(&this->RefreshTable))[3]) = ((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV)));
(((struct DisplayObject **)(&this->RefreshTable))[4]) = ((struct DisplayObject *)0);


(((struct DisplayObject **)(&this->RefreshTable))[5]) = ((struct DisplayObject *)(&this->MoRate));
(((struct DisplayObject **)(&this->RefreshTable))[6]) = ((struct DisplayObject *)(&this->MoIT));
(((struct DisplayObject **)(&this->RefreshTable))[7]) = ((struct DisplayObject *)((struct MonitoringObject *)(&this->MoTVIE)));
(((struct DisplayObject **)(&this->RefreshTable))[8]) = ((struct DisplayObject *)(&this->MoVte));
(((struct DisplayObject **)(&this->RefreshTable))[9]) = ((struct DisplayObject *)(&this->MoPe));
(((struct DisplayObject **)(&this->RefreshTable))[10]) = ((struct DisplayObject *)(&this->MoFuite));
(((struct DisplayObject **)(&this->RefreshTable))[11]) = ((struct DisplayObject *)(&this->MoTe));
(((struct DisplayObject **)(&this->RefreshTable))[12]) = ((struct DisplayObject *)(&this->MoTi));
(((struct DisplayObject **)(&this->RefreshTable))[13]) = ((struct DisplayObject *)0);


(((struct DisplayObject **)(&this->RefreshTable))[14]) = ((struct DisplayObject *)(&this->MoFiO2));
(((struct DisplayObject **)(&this->RefreshTable))[15]) = ((struct DisplayObject *)(&this->MoSpO2));
(((struct DisplayObject **)(&this->RefreshTable))[16]) = ((struct DisplayObject *)(&this->MoVti));
(((struct DisplayObject **)(&this->RefreshTable))[17]) = ((struct DisplayObject *)(&this->MoPip));
(((struct DisplayObject **)(&this->RefreshTable))[18]) = ((struct DisplayObject *)(&this->MoPulse));
(((struct DisplayObject **)(&this->RefreshTable))[19]) = ((struct DisplayObject *)(&this->MoVmi));
(((struct DisplayObject **)(&this->RefreshTable))[20]) = ((struct DisplayObject *)0);


(((struct DisplayObject **)(&this->RefreshTable))[21]) = ((struct DisplayObject *)(&this->BOBat));
(((struct DisplayObject **)(&this->RefreshTable))[22]) = ((struct DisplayObject *)0);

(this->FirstInitOk) = 1; return;

}
#line 933
void SetMode__10FrameGraphF12e_MODE_TYPES( struct FrameGraph *const this,  e_MODE_TYPES _ModeTmp)
{ auto struct __T50280064 *__T50471972;
if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this))))
{ auto struct __T50280064 *__T50471000;
(__T50471000 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 49)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50471000->f)))(((struct FrameGraph *)(((char *)this) + ((__T50471000->d)))), ((this->Mode))));
}

SetPreviousMode__10FrameGraphF12e_MODE_TYPES(this, ((this->Mode)));
(this->Mode) = _ModeTmp;
(__T50471972 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50471972->f)))(((struct FrameGraph *)(((char *)this) + ((__T50471972->d)))), ((this->Mode))));

if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this))))
{
ObjectsShow__6VFrameF12e_MODE_TYPES(((struct VFrame *)this), ((this->Mode)));
}
SetModeChange__10FrameGraphFi(this, 1); return;
}
#line 1184
void ShowTrigger__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50511188;
(this->TriggerOn) = 1;

if ((!((this->Freezed))) && (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this)))))

{
if ((this->IESelected)) { auto struct __T50280064 *__T50510184;
(__T50510184 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct MonitoringObject *)(&this->MoTVIE))))).__vptr)) + 35)) , (((void (*)(struct MonitoringObjectTwoValue *const))((__T50510184->f)))(((struct MonitoringObjectTwoValue *)(((char *)(&this->MoTVIE)) + ((__T50510184->d)))))); } 
#line 1192
else  {

(__T50511188 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoIT)))).__vptr)) + 35)) , (((void (*)(struct MonitoringObject *const))((__T50511188->f)))(((struct MonitoringObject *)(((char *)(&this->MoIT)) + ((__T50511188->d)))))); }
} return;
}
#line 1210
void HideTrigger__10FrameGraphFv( struct FrameGraph *const this)
{
(this->TriggerOn) = 0;

if ((!((this->Freezed))) && (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this)))))

{
if ((this->IESelected)) {
HideTrigger__16MonitoringObjectFv(((struct MonitoringObject *)(&this->MoTVIE))); } else  {

HideTrigger__16MonitoringObjectFv((&this->MoIT)); }
} return;
}
#line 1236
void FreezeMonitoring__10FrameGraphFiT1( struct FrameGraph *const this,  e_BOOL Freeze,  e_BOOL _DisplayFlag)
{


static e_BOOL RefreshScreen = 0; auto struct __T50280064 *__T50519412;
#line 1238
auto UWORD16 CurrentMode;




(this->Freezed) = Freeze;


if (Freeze)
{ auto struct __T50280064 *__T50518408;
RefreshScreen = 0;

ObjectsFreezeMonitoringMode__10FrameGraphFv(this);


(__T50518408 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFPause))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T50518408->f)))(((struct SymbolField *)(((char *)(&this->SFPause)) + ((__T50518408->d))))));

} else  {

if (RefreshScreen == 0)
{
RefreshScreen = 1;
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&CurrentMode), 1U, CONFIG);
SetMode__10FrameGraphF12e_MODE_TYPES(this, ((e_MODE_TYPES)CurrentMode));
(__T50519412 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->GTMode)))).__vptr)) + 16)) , (((void (*)(struct GraphTitle *const))((__T50519412->f)))(((struct GraphTitle *)(((char *)(&this->GTMode)) + ((__T50519412->d))))));


(__T50519412 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFPause))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T50519412->f)))(((struct SymbolField *)(((char *)(&this->SFPause)) + ((__T50519412->d))))));

ObjectsStartMonitoringModeImpactDisplay__10FrameGraphFi(this, _DisplayFlag);


if ((this->TriggerOn))
{
ShowTrigger__10FrameGraphFv(this);
}

else  {
HideTrigger__10FrameGraphFv(this);
}
} }


FreezeGraph__5GraphFi((&this->GSmallFlow), Freeze);
FreezeGraph__5GraphFi((&this->GSmallPressure), Freeze);
FreezeGraph__5GraphFi((&this->GSmallFlowV), Freeze);
FreezeGraph__5GraphFi((&this->GSmallPressureV), Freeze); return;
}
#line 1299
void RefreshMode__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50526784; auto struct __T50280064 *__T50528616; auto struct __T50280064 *__T50530528;
auto UWORD16 CurrentMode; auto UWORD16 Style;

IsBatVisible__10FrameGraphFv(this);
IsInibAlarmVisible__10FrameGraphFv(this);
IsCancelAlarmVisible__10FrameGraphFv(this);
IsInhibApneaAlarmVisible__10FrameGraphFv(this);


if (!((this->Freezed)))
{ auto struct __T50280064 *__T50525748;
ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&CurrentMode), 1U, CONFIG);


ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Style), 70U, CONFIG);
(__T50525748 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->GTMode)))).__vptr)) + 16)) , (((void (*)(struct GraphTitle *const))((__T50525748->f)))(((struct GraphTitle *)(((char *)(&this->GTMode)) + ((__T50525748->d))))));


if (Style == 1U)
{
(__T50526784 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV))))).__vptr)) + 39)) , (((void (*)(struct Graph *const))((__T50526784->f)))(((struct Graph *)(((char *)(&this->GSmallFlowV)) + ((__T50526784->d))))));
(__T50526784 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 39)) , (((void (*)(struct Graph *const))((__T50526784->f)))(((struct Graph *)(((char *)(&this->GSmallPressureV)) + ((__T50526784->d))))));
}

else  {
(__T50528616 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow))))).__vptr)) + 39)) , (((void (*)(struct Graph *const))((__T50528616->f)))(((struct Graph *)(((char *)(&this->GSmallFlow)) + ((__T50528616->d))))));
(__T50528616 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 39)) , (((void (*)(struct Graph *const))((__T50528616->f)))(((struct Graph *)(((char *)(&this->GSmallPressure)) + ((__T50528616->d))))));
}
}
if (GetModeChange__10FrameGraphFv(this))
{
SetModeChange__10FrameGraphFi(this, 0);
if (((int)(GetPreviousMode__10FrameGraphFv(this))) != ((int)((this->Mode))))
{
if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this))))
{
(__T50530528 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 49)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50530528->f)))(((struct FrameGraph *)(((char *)this) + ((__T50530528->d)))), (GetPreviousMode__10FrameGraphFv(this))));
ObjectsShow__6VFrameF12e_MODE_TYPES(((struct VFrame *)this), ((this->Mode)));
}
}
} return;
}
#line 1354
void IsBatVisible__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50534064;
auto UWORD16 Value;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 18U, CONTROL);

if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this))))
{
if (Value)
{ auto struct __T50280064 *__T50533060;
(__T50533060 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 16)) , (((void (*)(struct BatteryObject *const))((__T50533060->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T50533060->d))))));
}

else  {
(__T50534064 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 17)) , (((void (*)(struct BatteryObject *const))((__T50534064->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T50534064->d))))));
}
} return;
}
#line 1385
void IsInibAlarmVisible__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50537696;
auto UWORD16 Value;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 10U, CONTROL);

if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this))))
{
if (Value)
{ auto struct __T50280064 *__T50536660;
(__T50536660 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T50536660->f)))(((struct SymbolField *)(((char *)(&this->InhibAlarm)) + ((__T50536660->d))))));
}

else  {
(__T50537696 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T50537696->f)))(((struct SymbolField *)(((char *)(&this->InhibAlarm)) + ((__T50537696->d))))));
}
} return;
}
#line 1415
void IsCancelAlarmVisible__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50541328;
auto UWORD16 Value;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 12U, CONTROL);

if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this))))
{
if (Value)
{ auto struct __T50280064 *__T50540292;
(__T50540292 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T50540292->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T50540292->d))))));
}

else  {
(__T50541328 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 17)) , (((void (*)(struct SymbolField *const))((__T50541328->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T50541328->d))))));
}
} return;
}
#line 1445
void IsInhibApneaAlarmVisible__10FrameGraphFv( struct FrameGraph *const this)
{
auto UWORD16 Value;

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&Value), 92U, CONFIG);

if (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this))))
{
if (!(Value))
{
ShowInhibApneaAlarm__10FrameGraphFv(this);
}

else  {
HideInhibApneaAlarm__10FrameGraphFv(this);
}
} return;
}
#line 1115
void StopMonitoringMode__10FrameGraphFv( struct FrameGraph *const this)
{
if (!((this->Freezed)))
{ auto struct __T50280064 *__T50502592;
(__T50502592 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 20)) , (((void (*)(struct DisplayObject *const))((__T50502592->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)(&this->BOBat))) + ((__T50502592->d))))));

ObjectsStopMonitoringMode__6VFrameFv(((struct VFrame *)this));
} return;
}
#line 1168
void StartMonitoringMode__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50507364;
(__T50507364 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 52)) , (((void (*)(struct FrameGraph *const, e_BOOL, e_BOOL, e_BOOL))((__T50507364->f)))(((struct FrameGraph *)(((char *)this) + ((__T50507364->d)))), 0, 0, 1)); return;
}
#line 1139
void StartMonitoringModeImpactDisp__10FrameGraphFiN21( struct FrameGraph *const this,  e_BOOL IsFio2Sensor, 
e_BOOL IsSpO2Sensor, 
e_BOOL _DisplayFlag)
{
if (!((this->Freezed)))
{ auto struct __T50280064 *__T50505652;
(__T50505652 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T50505652->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)(&this->BOBat))) + ((__T50505652->d))))));

if (IsFio2Sensor) {
(this->FiO2Enabled) = 1; }

if (IsSpO2Sensor) {
(this->SpO2Enabled) = 1; }

ObjectsStartMonitoringModeImpactDisplay__10FrameGraphFi(this, _DisplayFlag);
} return;
}
#line 985
void Show__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50483380; auto struct __T50280064 *__T50489640;
auto UWORD16 WobDisplayMode;
Show__6VFrameFv(((struct VFrame *)this));

EraseZone__13InterfaceCppCSFUiN51(0U, 0U, 240U, 320U, 0U, (GetPage__13DisplayObjectFv(((struct DisplayObject *)((struct VFrame *)this)))));
#line 997
(__T50483380 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->InhibAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T50483380->f)))(((struct SymbolField *)(((char *)(&this->InhibAlarm)) + ((__T50483380->d))))));
(__T50483380 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->CancelAlarm))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T50483380->f)))(((struct SymbolField *)(((char *)(&this->CancelAlarm)) + ((__T50483380->d))))));
ShowInhibApneaAlarm__10FrameGraphFv(this);

(__T50483380 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->GTMode)))).__vptr)) + 16)) , (((void (*)(struct GraphTitle *const))((__T50483380->f)))(((struct GraphTitle *)(((char *)(&this->GTMode)) + ((__T50483380->d))))));
IsBatVisible__10FrameGraphFv(this);
IsInibAlarmVisible__10FrameGraphFv(this);
IsCancelAlarmVisible__10FrameGraphFv(this);
IsInhibApneaAlarmVisible__10FrameGraphFv(this);

ReadValue__14DataBaseAccessSFPUiUi19e_TYPE_OF_DB_TARGET((&WobDisplayMode), 70U, CONFIG);



if (WobDisplayMode)
{ auto struct __T50280064 *__T50486024;
(__T50486024 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50486024->f)))(((struct Graph *)(((char *)(&this->GSmallPressure)) + ((__T50486024->d))))));
(__T50486024 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50486024->f)))(((struct Graph *)(((char *)(&this->GSmallFlow)) + ((__T50486024->d))))));
SetScale__9CurveDataFP5ScaleT1((&this->CDPressureV), (GetScaleX__5GraphFv((&this->GSmallPressureV))), (GetScaleY__5GraphFv((&this->GSmallPressureV))));


(__T50486024 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50486024->f)))(((struct Graph *)(((char *)(&this->GSmallPressureV)) + ((__T50486024->d))))));
SetScale__9CurveDataFP5ScaleT1((&this->CDFlowV), (GetScaleX__5GraphFv((&this->GSmallFlowV))), (GetScaleY__5GraphFv((&this->GSmallFlowV))));


(__T50486024 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50486024->f)))(((struct Graph *)(((char *)(&this->GSmallFlowV)) + ((__T50486024->d))))));
}

else  {
(__T50489640 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50489640->f)))(((struct Graph *)(((char *)(&this->GSmallPressureV)) + ((__T50489640->d))))));
(__T50489640 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV))))).__vptr)) + 17)) , (((void (*)(struct Graph *const))((__T50489640->f)))(((struct Graph *)(((char *)(&this->GSmallFlowV)) + ((__T50489640->d))))));

SetScale__9CurveDataFP5ScaleT1((&this->CDPressure), (GetScaleX__5GraphFv((&this->GSmallPressure))), (GetScaleY__5GraphFv((&this->GSmallPressure))));


(__T50489640 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50489640->f)))(((struct Graph *)(((char *)(&this->GSmallPressure)) + ((__T50489640->d))))));
SetScale__9CurveDataFP5ScaleT1((&this->CDFlow), (GetScaleX__5GraphFv((&this->GSmallFlow))), (GetScaleY__5GraphFv((&this->GSmallFlow))));


(__T50489640 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow))))).__vptr)) + 16)) , (((void (*)(struct Graph *const))((__T50489640->f)))(((struct Graph *)(((char *)(&this->GSmallFlow)) + ((__T50489640->d))))));
}

(__T50483380 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 45)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50483380->f)))(((struct FrameGraph *)(((char *)this) + ((__T50483380->d)))), ((this->Mode))));
SetModeChange__10FrameGraphFi(this, 0);


if ((this->Freezed))
{
FreezeMonitoring__10FrameGraphFiT1(this, 0, 1);
}


if ((this->TriggerOn))
{
ShowTrigger__10FrameGraphFv(this);
}

else  {
HideTrigger__10FrameGraphFv(this);
}

SetValve__10FrameGraphFiT1(this, ((this->ValveDetected)), 1); return;
}
#line 1073
void Hide__10FrameGraphFv( struct FrameGraph *const this)
{
Hide__6VFrameFv(((struct VFrame *)this)); return;
}
#line 1090
void RefreshLanguage__10FrameGraphFv( struct FrameGraph *const this)
{ auto struct __T50280064 *__T50496316;
(__T50496316 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->GTMode)))).__vptr)) + 19)) , (((void (*)(struct GraphTitle *const))((__T50496316->f)))(((struct GraphTitle *)(((char *)(&this->GTMode)) + ((__T50496316->d))))));
(__T50496316 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlowV))))).__vptr)) + 19)) , (((void (*)(struct Graph *const))((__T50496316->f)))(((struct Graph *)(((char *)(&this->GSmallFlowV)) + ((__T50496316->d))))));
(__T50496316 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 19)) , (((void (*)(struct Graph *const))((__T50496316->f)))(((struct Graph *)(((char *)(&this->GSmallPressureV)) + ((__T50496316->d))))));
(__T50496316 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallFlow))))).__vptr)) + 19)) , (((void (*)(struct Graph *const))((__T50496316->f)))(((struct Graph *)(((char *)(&this->GSmallFlow)) + ((__T50496316->d))))));
(__T50496316 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 19)) , (((void (*)(struct Graph *const))((__T50496316->f)))(((struct Graph *)(((char *)(&this->GSmallPressure)) + ((__T50496316->d))))));

(__T50496316 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->BOBat)))).__vptr)) + 19)) , (((void (*)(struct BatteryObject *const))((__T50496316->f)))(((struct BatteryObject *)(((char *)(&this->BOBat)) + ((__T50496316->d))))));

ObjectsRefreshLanguage__6VFrameF12e_MODE_TYPES(((struct VFrame *)this), ((this->Mode))); return;
}
#line 74
struct DisplayObject **GetRefreshTable__10FrameGraphFv( struct FrameGraph *const this)
{
return (struct DisplayObject **)(&this->RefreshTable);
}
#line 960
void SetIESelected__10FrameGraphFi( struct FrameGraph *const this,  e_BOOL _IESelected)
{
if (((this->IESelected)) != _IESelected)
{ auto struct __T50280064 *__T50474396;

SwitchDisplayConfigForAllModes__6VFrameF8e_OBJECTT1(((struct VFrame *)this), OBJECT_GRAPH_MOIE, OBJECT_GRAPH_MOIT);


(__T50474396 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50474396->f)))(((struct FrameGraph *)(((char *)this) + ((__T50474396->d)))), ((this->Mode))));

(this->IESelected) = _IESelected;
} return;
}
#line 1475
void SetValve__10FrameGraphFiT1( struct FrameGraph *const this,  e_BOOL _ValveDetected,  e_BOOL _DisplayFlag)
{ auto struct __T50280064 *__T50551896; auto struct __T50280064 *__T50552852; auto struct __T50280064 *__T50554540; auto struct __T50280064 *__T50555624;

auto UWORD16 i;

auto e_BOOL _IsVisible = 0;

if (!(_DisplayFlag))
{ auto struct __T50280064 *__T50550764;

_IsVisible = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct FieldObject *)(&this->SFValve)))));
(__T50550764 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50550764->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve)))) 
#line 1486
+ ((__T50550764->d)))), 0));
}

if (_ValveDetected)
{
SetBarredSymbol__11SymbolFieldFi((&this->SFValve), 0);
}

else  {
SetBarredSymbol__11SymbolFieldFi((&this->SFValve), 1);
}

(__T50551896 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))))).__vptr)) + 16)) , (((void (*)(struct SymbolField *const))((__T50551896->f)))(((struct SymbolField *)(((char *)(&this->SFValve)) + ((__T50551896->d))))));

if (((this->ValveDetected)) != _ValveDetected)
{
(this->ValveDetected) = _ValveDetected;


if (_DisplayFlag)
{
(__T50552852 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 50)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES, e_OBJECT))((__T50552852->f)))(((struct FrameGraph *)(((char *)this) + ((__T50552852->d)))), ((this->Mode)), OBJECT_GRAPH_MOVTE));
(__T50552852 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 50)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES, e_OBJECT))((__T50552852->f)))(((struct FrameGraph *)(((char *)this) + ((__T50552852->d)))), ((this->Mode)), OBJECT_GRAPH_MOFUITE));
}


for (i = 0U; (i < 6U); i++)
{
if ((i) && (i != 3U))
{

SwitchDisplayConfigForOneMode__6VFrameF8e_OBJECTT112e_MODE_TYPES(((struct VFrame *)this), OBJECT_GRAPH_MOVTE, OBJECT_GRAPH_MOFUITE, ((e_MODE_TYPES)i));


(__T50554540 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 48)) , (((void (*)(struct FrameGraph *const, e_MODE_TYPES))((__T50554540->f)))(((struct FrameGraph *)(((char *)this) + ((__T50554540->d)))), ((e_MODE_TYPES)i)));
}
}
if (_DisplayFlag)
{
ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(((struct VFrame *)this), ((this->Mode)), OBJECT_GRAPH_MOVTE);
ObjectsShow__6VFrameF12e_MODE_TYPES8e_OBJECT(((struct VFrame *)this), ((this->Mode)), OBJECT_GRAPH_MOFUITE);
}

if ((this->FirstInitOk))
{

GraphReInit__10FrameGraphFiT1(this, ((e_BOOL)((!(IsBlocExpiDetected__10FrameGraphFv(this))) || (!(_ValveDetected)))), _DisplayFlag);

}

}

if (!(_DisplayFlag))
{

(__T50555624 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50555624->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct FieldObject *)(&this->SFValve)))) 
#line 1541
+ ((__T50555624->d)))), _IsVisible));
} return;
}
#line 99
void SetBlocExpi__10FrameGraphFiT1( struct FrameGraph *const this,  e_BOOL _BlocExpiDetected,  e_BOOL _DisplayFlag)
{
(this->BlocExpiDetected) = _BlocExpiDetected;

GraphReInit__10FrameGraphFiT1(this, ((e_BOOL)((!(IsBlocExpiDetected__10FrameGraphFv(this))) || (!((this->ValveDetected))))), _DisplayFlag); return;
}

e_BOOL IsBlocExpiDetected__10FrameGraphFv( struct FrameGraph *const this)
{
return (this->BlocExpiDetected);
}
#line 1555
void Fio2MonitorEnabled__10FrameGraphFiT1( struct FrameGraph *const this,  e_BOOL _Flag,  e_BOOL _DisplayFlag)
{ auto struct __T50280064 *__T50559288;
(this->FiO2Enabled) = _Flag;

if (!((this->Freezed)))
{
if (_Flag) { auto struct __T50280064 *__T50558284;
(__T50558284 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoFiO2)))).__vptr)) + 22)) , (((void (*)(struct MonitoringObject *const))((__T50558284->f)))(((struct MonitoringObject *)(((char *)(&this->MoFiO2)) + ((__T50558284->d)))))); } else  {

(__T50559288 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoFiO2)))).__vptr)) + 37)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50559288->f)))(((struct MonitoringObject *)(((char *)(&this->MoFiO2)) + ((__T50559288->d)))), _DisplayFlag)); }
} return;
}
#line 1578
void Spo2MonitorEnabled__10FrameGraphFiT1( struct FrameGraph *const this,  e_BOOL _Flag,  e_BOOL _DisplayFlag)
{ auto struct __T50280064 *__T50562888;
(this->SpO2Enabled) = _Flag;

if (!((this->Freezed)))
{
if (_Flag) { auto struct __T50280064 *__T50561884;
(__T50561884 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoSpO2)))).__vptr)) + 22)) , (((void (*)(struct MonitoringObject *const))((__T50561884->f)))(((struct MonitoringObject *)(((char *)(&this->MoSpO2)) + ((__T50561884->d)))))); } else  {

(__T50562888 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoSpO2)))).__vptr)) + 37)) , (((void (*)(struct MonitoringObject *const, e_BOOL))((__T50562888->f)))(((struct MonitoringObject *)(((char *)(&this->MoSpO2)) + ((__T50562888->d)))), _DisplayFlag)); }
} return;
}
#line 1600
void SetPressureUnit__10FrameGraphFPPUc( struct FrameGraph *const this,  UBYTE **_PressureUnit)
{ auto struct __T50280064 *__T50568584;
auto e_BOOL _VisibleBackup;

_VisibleBackup = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)(&this->MoPe))));
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoPe)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)(&this->MoPe))) + ((__T50568584->d)))), 0));
SetNameUnit__16MonitoringObjectFPPUc((&this->MoPe), _PressureUnit);
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoPe)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)(&this->MoPe))) + ((__T50568584->d)))), _VisibleBackup));

_VisibleBackup = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)(&this->MoPip))));
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoPip)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)(&this->MoPip))) + ((__T50568584->d)))), 0));
SetNameUnit__16MonitoringObjectFPPUc((&this->MoPip), _PressureUnit);
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)(&this->MoPip)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)(&this->MoPip))) + ((__T50568584->d)))), _VisibleBackup));

_VisibleBackup = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure)))));
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct GraphicBox *)(&this->
#line 1615
GSmallPressure)))) + ((__T50568584->d)))), 0));
SetTUnit2__5GraphFPPUc((&this->GSmallPressure), _PressureUnit);
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressure))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct GraphicBox *)(&this->
#line 1617
GSmallPressure)))) + ((__T50568584->d)))), _VisibleBackup));

_VisibleBackup = (IsVisible__13DisplayObjectFv(((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV)))));
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct GraphicBox *)(&this->
#line 1620
GSmallPressureV)))) + ((__T50568584->d)))), 0));
SetTUnit2__5GraphFPPUc((&this->GSmallPressureV), _PressureUnit);
(__T50568584 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct GraphicBox *)(&this->GSmallPressureV))))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50568584->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct GraphicBox *)(&this->
#line 1622
GSmallPressureV)))) + ((__T50568584->d)))), _VisibleBackup)); return;
}
#line 1635
void SetNameMode2Display__10FrameGraphFi( struct FrameGraph *const this,  e_BOOL _NameMode2Display)
{
SetNameMode2Display__10GraphTitleFi((&this->GTMode), _NameMode2Display); return;
}
#line 910
void ObjectsFreezeMonitoringMode__10FrameGraphFv( struct FrameGraph *const this)
{
auto UWORD16 i;
this;

for (i = 0U; (i < 14U); i++)
{
if ((((InfoGraph[i]).pObject)) != ((struct DisplayObject *)0)) { auto struct __T50280064 *__T50467356;
(__T50467356 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 21)) , (((void (*)(struct DisplayObject *const))((__T50467356->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50467356->d)))))); }
} return;
}
#line 744
void RebuildFrameTree__10FrameGraphF12e_MODE_TYPES( struct FrameGraph *const this,  e_MODE_TYPES Mode)
{ auto struct __T50280064 *__T50439316; auto struct __T50280064 *__T50441036;
auto UWORD16 Cnt; auto UWORD16 Order;
auto e_BOOL IsVisible;
auto UWORD16 ObjectTotalCount = 0U;
auto UWORD16 ObjectLineCount = 0U;
auto UWORD16 _Line; auto UWORD16 _Col;

auto tInfo *ptrInfo = InfoGraph;
_Col = 0U;
_Line = 0U;


ptrInfo = (GetPtrFromOrder__6VFrameFUi12e_MODE_TYPES(((struct VFrame *)this), 0U, Mode));
do
{
Order = (GetOrderFromPtr__6VFrameFP5tInfo12e_MODE_TYPES(((struct VFrame *)this), ptrInfo, Mode));


ptrInfo = (GetPtrFromOrder__6VFrameFUi12e_MODE_TYPES(((struct VFrame *)this), (++Order), Mode));
ObjectTotalCount++;

} while (ptrInfo != ((tInfo *)0));


ObjectLineCount = 6U;


Cnt = 0U;
ptrInfo = (GetPtrFromOrder__6VFrameFUi12e_MODE_TYPES(((struct VFrame *)this), 0U, Mode));
do
{ auto struct __T50280064 *__T50438312;
Order = (GetOrderFromPtr__6VFrameFP5tInfo12e_MODE_TYPES(((struct VFrame *)this), ptrInfo, Mode));



IsVisible = (IsVisible__13DisplayObjectFv(((ptrInfo->pObject))));
(__T50438312 = ((((*((struct MenuObject *)((ptrInfo->pObject)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50438312->f)))(((struct DisplayObject *)(((char *)((ptrInfo->pObject))) + ((__T50438312->d)))), 0));

if (Cnt < ObjectLineCount)
{

(__T50439316 = ((((*((struct MenuObject *)((ptrInfo->pObject)))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50439316->f)))(((struct DisplayObject *)(((char *)((ptrInfo->pObject))) + ((__T50439316->d)))), 196U));
_Col = (1U + (Cnt * 53U));
(__T50439316 = ((((*((struct MenuObject *)((ptrInfo->pObject)))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50439316->f)))(((struct DisplayObject *)(((char *)((ptrInfo->pObject))) + ((__T50439316->d)))), _Col));
}

else  {

(__T50441036 = ((((*((struct MenuObject *)((ptrInfo->pObject)))).__vptr)) + 11)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50441036->f)))(((struct DisplayObject *)(((char *)((ptrInfo->pObject))) + ((__T50441036->d)))), _Col));
_Line = (196U - (((Cnt - ObjectLineCount) + 1U) * 44U));
(__T50441036 = ((((*((struct MenuObject *)((ptrInfo->pObject)))).__vptr)) + 10)) , (((void (*)(struct DisplayObject *const, UWORD16))((__T50441036->f)))(((struct DisplayObject *)(((char *)((ptrInfo->pObject))) + ((__T50441036->d)))), _Line));
}
Cnt++;


(__T50438312 = ((((*((struct MenuObject *)((ptrInfo->pObject)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50438312->f)))(((struct DisplayObject *)(((char *)((ptrInfo->pObject))) + ((__T50438312->d)))), IsVisible));


ptrInfo = (GetPtrFromOrder__6VFrameFUi12e_MODE_TYPES(((struct VFrame *)this), (++Order), Mode));

} while (ptrInfo != ((tInfo *)0)); return;
}
#line 817
void ObjectsHide__10FrameGraphF12e_MODE_TYPES( struct FrameGraph *const this,  e_MODE_TYPES _Mode)
{ auto struct __T50280064 *__T50446172; auto struct __T50280064 *__T50447096;
auto UWORD16 i;

if (((__T50446172 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 39)) , (((e_BOOL (*)(struct VFrame *const))((__T50446172->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T50446172->d))))))) && ((__T50447096 = ((((*((struct MenuObject *)((
#line 821
struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 29)) , (((e_BOOL (*)(struct DisplayObject *const))((__T50447096->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct VFrame *)this))) + ((__T50447096->d))))))))
{
for (i = 0U; (i < 14U); i++)
{
if (((((InfoGraph[i]).pObject)) != ((struct DisplayObject *)0)) && (((((tInfoNodeForMode *)(&(InfoGraph[i]).InfoByMode))[_Mode]).Visible))) { auto struct __T50280064 *__T50448020;

(__T50448020 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 17)) , (((void (*)(struct DisplayObject *const))((__T50448020->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50448020->d)))))); }
}
} return;
}
#line 842
void ObjectsHide__10FrameGraphF12e_MODE_TYPES8e_OBJECT( struct FrameGraph *const this,  e_MODE_TYPES _Mode,  e_OBJECT _ObjectId)
{ auto struct __T50280064 *__T50451468; auto struct __T50280064 *__T50452392;
if (((__T50451468 = ((((*((struct MenuObject *)((struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 39)) , (((e_BOOL (*)(struct VFrame *const))((__T50451468->f)))(((struct VFrame *)(((char *)((struct VFrame *)this)) + ((__T50451468->d))))))) && ((__T50452392 = ((((*((struct MenuObject *)((
#line 844
struct DisplayObject *)((struct VFrame *)this)))).__vptr)) + 29)) , (((e_BOOL (*)(struct DisplayObject *const))((__T50452392->f)))(((struct DisplayObject *)(((char *)((struct DisplayObject *)((struct VFrame *)this))) + ((__T50452392->d))))))))
{
if (((int)_ObjectId) < 14)
{
if (((((InfoGraph[_ObjectId]).pObject)) != ((struct DisplayObject *)0)) && (((((tInfoNodeForMode *)(&(InfoGraph[_ObjectId]).InfoByMode))[_Mode]).Visible))) { auto struct __T50280064 *__T50453316;

(__T50453316 = ((((*((struct MenuObject *)(((InfoGraph[_ObjectId]).pObject)))).__vptr)) + 17)) , (((void (*)(struct DisplayObject *const))((__T50453316->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[_ObjectId]).pObject))) + ((__T50453316->d)))))); }
}
} return;
}
#line 864
void ObjectsStartMonitoringModeImpactDisplay__10FrameGraphFi( struct FrameGraph *const this,  e_BOOL _DisplayFlag)
{ auto struct __T50280064 *__T50460856; auto struct __T50280064 *__T50461844; auto struct __T50280064 *__T50462852; auto struct __T50280064 *__T50463840; auto struct __T50280064 *__T50464796;
auto UWORD16 i;

for (i = 0U; (i < 14U); i++)
{
if ((((InfoGraph[i]).pObject)) != ((struct DisplayObject *)0))
{

if (i == 0U)
{
if ((this->FiO2Enabled)) { auto struct __T50280064 *__T50459756;
(__T50459756 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 24)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50459756->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50459756->d)))), _DisplayFlag)); }
} else  {

if (i == 1U)
{
if ((this->SpO2Enabled)) {
(__T50460856 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 24)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50460856->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50460856->d)))), _DisplayFlag)); }
} else  {
if (i == 13U)
{
if ((this->ValveDetected)) {
(__T50461844 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 25)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50461844->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50461844->d)))), _DisplayFlag)); } else  {

(__T50462852 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 24)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50462852->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50462852->d)))), _DisplayFlag)); }
} else  {
if (i == 9U)
{
if ((this->ExhalFlowUsed)) {
(__T50463840 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 24)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50463840->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50463840->d)))), _DisplayFlag)); }
} else  {

(__T50464796 = ((((*((struct MenuObject *)(((InfoGraph[i]).pObject)))).__vptr)) + 24)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50464796->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[i]).pObject))) + ((__T50464796->d)))), _DisplayFlag)); } } } }
}
} return;
}
#line 1918
void SetExhalFlowUsed__10FrameGraphFiT1( struct FrameGraph *const this,  e_BOOL _Flag,  e_BOOL _ImpactDisplay)
{ auto struct __T50280064 *__T50628828; auto struct __T50280064 *__T50629848; auto struct __T50280064 *__T50630804; auto struct __T50280064 *__T50631792;
auto e_BOOL is_movte_visible; is_movte_visible = (IsVisible__13DisplayObjectFv((((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject))));

(this->ExhalFlowUsed) = _Flag;

if (_ImpactDisplay) { auto struct __T50280064 *__T50627760;
(__T50627760 = ((((*((struct MenuObject *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50627760->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject))) + ((__T50627760->d)))), 1)); } else  {

(__T50628828 = ((((*((struct MenuObject *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50628828->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject))) + ((__T50628828->d)))), 0)); }

if (IsRefreshObject__13DisplayObjectFv((((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject))))
{
if (_Flag) {
(__T50629848 = ((((*((struct MenuObject *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject)))).__vptr)) + 22)) , (((void (*)(struct DisplayObject *const))((__T50629848->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject))) + ((__T50629848->d)))))); } else  {

(__T50630804 = ((((*((struct MenuObject *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject)))).__vptr)) + 20)) , (((void (*)(struct DisplayObject *const))((__T50630804->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject))) + ((__T50630804->d)))))); }
}
if (_ImpactDisplay) {
(__T50631792 = ((((*((struct MenuObject *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject)))).__vptr)) + 13)) , (((void (*)(struct DisplayObject *const, e_BOOL))((__T50631792->f)))(((struct DisplayObject *)(((char *)(((InfoGraph[OBJECT_GRAPH_MOVTE]).pObject))) + ((__T50631792->d)))), is_movte_visible)); } 
#line 1937
return;
}
